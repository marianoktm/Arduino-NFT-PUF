
build/bootloader/bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c2  00800100  00007368  00004442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .startup      00000006  00000000  00000000  000000d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .app          00002fe0  00000020  00000020  000000da  2**0
                  ALLOC
  3 .text         00004366  00003000  00003000  000000da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .version      00000002  00007366  00007366  00004440  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .bss          00000006  008003c2  008003c2  00004704  2**0
                  ALLOC
  6 .noinit       00000130  008003c8  008003c8  00004704  2**0
                  ALLOC
  7 .stab         00005868  00000000  00000000  00004704  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .stabstr      000024ed  00000000  00000000  00009f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000c459  2**0
                  CONTENTS, READONLY
 10 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c46c  2**2
                  CONTENTS, READONLY
 11 .debug_info   000005f4  00000000  00000000  0000c4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000005a2  00000000  00000000  0000caa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000001a  00000000  00000000  0000d042  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000208  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .startup:

00000000 <__start>:
   0:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__app_end>
   4:	08 95       	ret

Disassembly of section .text:

00003000 <__vectors>:
    3000:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__init0>
    3004:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3008:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    300c:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3010:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3014:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3018:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    301c:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3020:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3024:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3028:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    302c:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3030:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3034:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3038:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    303c:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3040:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3044:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3048:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    304c:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3050:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3054:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3058:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    305c:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3060:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>
    3064:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__bad_interrupt>

00003068 <__trampolines_end>:
    3068:	40 c6       	rjmp	.+3200   	; 0x3cea <hkdf+0x5a>
    306a:	54 00       	.word	0x0054	; ????
    306c:	69 bf       	out	0x39, r22	; 57
    306e:	e7 a9       	ldd	r30, Z+55	; 0x37
    3070:	82 32       	cpi	r24, 0x22	; 34
    3072:	12 53       	subi	r17, 0x32	; 50
    3074:	43 1e       	adc	r4, r19
    3076:	b6 33       	cpi	r27, 0x36	; 54
    3078:	f5 51       	subi	r31, 0x15	; 21
    307a:	55 7f       	andi	r21, 0xF5	; 245
    307c:	76 b8       	out	0x06, r7	; 6
    307e:	bb c2       	rjmp	.+1398   	; 0x35f6 <hadamard_matrix+0x45e>
    3080:	98 65       	ori	r25, 0x58	; 88
    3082:	91 10       	cpse	r9, r1
    3084:	e7 b0       	in	r14, 0x07	; 7
    3086:	58 c0       	rjmp	.+176    	; 0x3138 <__trampolines_end+0xd0>
    3088:	33 23       	and	r19, r19
    308a:	32 27       	eor	r19, r18
    308c:	c7 01       	movw	r24, r14
    308e:	08 44       	sbci	r16, 0x48	; 72
    3090:	91 63       	ori	r25, 0x31	; 49
    3092:	26 71       	andi	r18, 0x16	; 22
    3094:	44 8e       	std	Z+28, r4	; 0x1c
    3096:	9c c6       	rjmp	.+3384   	; 0x3dd0 <hmacReset+0x90>
    3098:	22 45       	sbci	r18, 0x52	; 82
    309a:	46 6e       	ori	r20, 0xE6	; 230
    309c:	9d 04       	cpc	r9, r13
    309e:	49 cd       	rjmp	.-1390   	; 0x2b32 <__RAMEND__+0x2233>
    30a0:	04 36       	cpi	r16, 0x64	; 100
    30a2:	24 26       	eor	r2, r20
    30a4:	59 98       	cbi	0x0b, 1	; 11
    30a6:	2d 7b       	andi	r18, 0xBD	; 189
    30a8:	0d 83       	std	Y+5, r16	; 0x05
    30aa:	09 cf       	rjmp	.-494    	; 0x2ebe <__RAMEND__+0x25bf>
    30ac:	f9 94       	.word	0x94f9	; ????
    30ae:	b6 ce       	rjmp	.-660    	; 0x2e1c <__RAMEND__+0x251d>
    30b0:	cf 42       	sbci	r28, 0x2F	; 47
    30b2:	f5 f7       	brhc	.-4      	; 0x30b0 <__trampolines_end+0x48>
    30b4:	a9 b1       	in	r26, 0x09	; 9
    30b6:	31 d9       	rcall	.-3486   	; 0x231a <__RAMEND__+0x1a1b>
    30b8:	4b 5a       	subi	r20, 0xAB	; 171
    30ba:	51 74       	andi	r21, 0x41	; 65
    30bc:	a5 87       	std	Z+13, r26	; 0x0d
    30be:	89 a5       	ldd	r24, Y+41	; 0x29
    30c0:	0a f3       	brmi	.-62     	; 0x3084 <__trampolines_end+0x1c>
    30c2:	15 c8       	rjmp	.-4054   	; 0x20ee <__RAMEND__+0x17ef>
    30c4:	cf 26       	eor	r12, r31
    30c6:	aa 05       	cpc	r26, r10
    30c8:	ae a5       	ldd	r26, Y+46	; 0x2e
    30ca:	dd 6c       	ori	r29, 0xCD	; 205
    30cc:	73 45       	sbci	r23, 0x53	; 83
    30ce:	c2 4f       	sbci	r28, 0xF2	; 242
    30d0:	c6 32       	cpi	r28, 0x26	; 38
    30d2:	16 34       	cpi	r17, 0x46	; 70
    30d4:	e7 e0       	ldi	r30, 0x07	; 7
    30d6:	06 20       	and	r0, r6
    30d8:	2d 60       	ori	r18, 0x0D	; 13
    30da:	68 39       	cpi	r22, 0x98	; 152
    30dc:	57 1a       	sub	r5, r23
    30de:	32 94       	swap	r3
    30e0:	a0 e7       	ldi	r26, 0x70	; 112
    30e2:	70 50       	subi	r23, 0x00	; 0
    30e4:	94 24       	eor	r9, r4
    30e6:	85 f6       	brhc	.-96     	; 0x3088 <__trampolines_end+0x20>
    30e8:	22 7e       	andi	r18, 0xE2	; 226
    30ea:	c2 35       	cpi	r28, 0x52	; 82
    30ec:	8e 01       	movw	r16, r28
    30ee:	f4 0a       	sbc	r15, r20
    30f0:	d9 a6       	std	Y+41, r13	; 0x29
    30f2:	15 a7       	std	Z+45, r17	; 0x2d
    30f4:	cd 48       	sbci	r28, 0x8D	; 141
    30f6:	f5 c9       	rjmp	.-3094   	; 0x24e2 <__RAMEND__+0x1be3>
    30f8:	d7 61       	ori	r29, 0x17	; 23
    30fa:	e2 de       	rcall	.-572    	; 0x2ec0 <__RAMEND__+0x25c1>
    30fc:	ca cd       	rjmp	.-1132   	; 0x2c92 <__RAMEND__+0x2393>
    30fe:	3a 93       	st	-Y, r19
    3100:	5e 40       	sbci	r21, 0x0E	; 14
    3102:	75 a2       	std	Z+37, r7	; 0x25
    3104:	be e7       	ldi	r27, 0x7E	; 126
    3106:	d2 9f       	mul	r29, r18
    3108:	36 0a       	sbc	r3, r22
    310a:	e6 de       	rcall	.-564    	; 0x2ed8 <__RAMEND__+0x25d9>
    310c:	a0 b7       	in	r26, 0x30	; 48
    310e:	74 f3       	brlt	.-36     	; 0x30ec <__trampolines_end+0x84>
    3110:	bb fd       	.word	0xfdbb	; ????
    3112:	37 0e       	add	r3, r23
    3114:	ec a9       	ldd	r30, Y+52	; 0x34
    3116:	c7 7b       	andi	r28, 0xB7	; 183
    3118:	3a d0       	rcall	.+116    	; 0x318e <__trampolines_end+0x126>
    311a:	60 0a       	sbc	r6, r16
    311c:	93 80       	ldd	r9, Z+3	; 0x03
    311e:	93 f4       	brvc	.+36     	; 0x3144 <__trampolines_end+0xdc>
    3120:	21 08       	sbc	r2, r1
    3122:	b7 16       	cp	r11, r23
    3124:	d9 92       	st	Y+, r13
    3126:	c9 32       	cpi	r28, 0x29	; 41
    3128:	07 76       	andi	r16, 0x67	; 103
    312a:	1e 81       	ldd	r17, Y+6	; 0x06
    312c:	e5 ba       	out	0x15, r14	; 21
    312e:	e9 c3       	rjmp	.+2002   	; 0x3902 <hadamard_matrix+0x76a>
    3130:	5c f0       	brlt	.+22     	; 0x3148 <__trampolines_end+0xe0>
    3132:	19 56       	subi	r17, 0x69	; 105
    3134:	d2 cd       	rjmp	.-1116   	; 0x2cda <__RAMEND__+0x23db>
    3136:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3138:	7b f4       	brvc	.+30     	; 0x3158 <__trampolines_end+0xf0>
    313a:	70 40       	sbci	r23, 0x00	; 0
    313c:	e1 59       	subi	r30, 0x91	; 145
    313e:	b6 7b       	andi	r27, 0xB6	; 182
    3140:	58 4d       	sbci	r21, 0xD8	; 216
    3142:	0a 35       	cpi	r16, 0x5A	; 90
    3144:	07 05       	cpc	r16, r7
    3146:	bf d7       	rcall	.+3966   	; 0x40c6 <puf_extract+0x46>
    3148:	4f ea       	ldi	r20, 0xAF	; 175
    314a:	89 30       	cpi	r24, 0x09	; 9
    314c:	5a f5       	brpl	.+86     	; 0x31a4 <hadamard_matrix+0xc>
    314e:	05 b4       	in	r0, 0x25	; 37
    3150:	25 80       	ldd	r2, Z+5	; 0x05
    3152:	06 2b       	or	r16, r22
    3154:	c8 bb       	out	0x18, r28	; 24
    3156:	d8 e8       	ldi	r29, 0x88	; 136
    3158:	ea c4       	rjmp	.+2516   	; 0x3b2e <hkdfExpand+0x7e>
    315a:	79 ea       	ldi	r23, 0xA9	; 169
    315c:	96 bd       	out	0x26, r25	; 38
    315e:	9d 69       	ori	r25, 0x9D	; 157
    3160:	d1 82       	std	Z+1, r13	; 0x01
    3162:	cc 16       	cp	r12, r28
    3164:	c6 3b       	cpi	r28, 0xB6	; 182
    3166:	87 05       	cpc	r24, r7
    3168:	61 c9       	rjmp	.-3390   	; 0x242c <__RAMEND__+0x1b2d>
    316a:	7a 3c       	cpi	r23, 0xCA	; 202
    316c:	87 f5       	brid	.+96     	; 0x31ce <hadamard_matrix+0x36>
    316e:	90 85       	ldd	r25, Z+8	; 0x08
    3170:	32 80       	ldd	r3, Z+2	; 0x02
    3172:	b8 d9       	rcall	.-3216   	; 0x24e4 <__RAMEND__+0x1be5>
    3174:	db f3       	brvs	.-10     	; 0x316c <__trampolines_end+0x104>
    3176:	00 69       	ori	r16, 0x90	; 144
    3178:	4c 49       	sbci	r20, 0x9C	; 156
    317a:	7e 2e       	mov	r7, r30
    317c:	8f ba       	out	0x1f, r8	; 31
    317e:	51 db       	rcall	.-2398   	; 0x2822 <__RAMEND__+0x1f23>
    3180:	15 b7       	in	r17, 0x35	; 53
    3182:	3a e1       	ldi	r19, 0x1A	; 26
    3184:	13 a9       	ldd	r17, Z+51	; 0x33
    3186:	ef 70       	andi	r30, 0x0F	; 15
    3188:	b9 12       	cpse	r11, r25
    318a:	c4 d5       	rcall	.+2952   	; 0x3d14 <hkdf+0x84>
    318c:	de 43       	sbci	r29, 0x3E	; 62
    318e:	7b 3e       	cpi	r23, 0xEB	; 235
    3190:	1b 37       	cpi	r17, 0x7B	; 123
    3192:	cf b6       	in	r12, 0x3f	; 63
    3194:	ec e1       	ldi	r30, 0x1C	; 28
    3196:	7f f6       	brid	.-98     	; 0x3136 <__trampolines_end+0xce>

00003198 <hadamard_matrix>:
    3198:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    31a8:	aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa     ................
    31b8:	cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc     ................
    31c8:	99 99 99 99 99 99 99 99 99 99 99 99 99 99 99 99     ................
    31d8:	f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    31e8:	a5 a5 a5 a5 a5 a5 a5 a5 a5 a5 a5 a5 a5 a5 a5 a5     ................
    31f8:	c3 c3 c3 c3 c3 c3 c3 c3 c3 c3 c3 c3 c3 c3 c3 c3     ................
    3208:	96 96 96 96 96 96 96 96 96 96 96 96 96 96 96 96     ................
    3218:	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    3228:	aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55     .U.U.U.U.U.U.U.U
    3238:	cc 33 cc 33 cc 33 cc 33 cc 33 cc 33 cc 33 cc 33     .3.3.3.3.3.3.3.3
    3248:	99 66 99 66 99 66 99 66 99 66 99 66 99 66 99 66     .f.f.f.f.f.f.f.f
    3258:	f0 0f f0 0f f0 0f f0 0f f0 0f f0 0f f0 0f f0 0f     ................
    3268:	a5 5a a5 5a a5 5a a5 5a a5 5a a5 5a a5 5a a5 5a     .Z.Z.Z.Z.Z.Z.Z.Z
    3278:	c3 3c c3 3c c3 3c c3 3c c3 3c c3 3c c3 3c c3 3c     .<.<.<.<.<.<.<.<
    3288:	96 69 96 69 96 69 96 69 96 69 96 69 96 69 96 69     .i.i.i.i.i.i.i.i
    3298:	ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00 00     ................
    32a8:	aa aa 55 55 aa aa 55 55 aa aa 55 55 aa aa 55 55     ..UU..UU..UU..UU
    32b8:	cc cc 33 33 cc cc 33 33 cc cc 33 33 cc cc 33 33     ..33..33..33..33
    32c8:	99 99 66 66 99 99 66 66 99 99 66 66 99 99 66 66     ..ff..ff..ff..ff
    32d8:	f0 f0 0f 0f f0 f0 0f 0f f0 f0 0f 0f f0 f0 0f 0f     ................
    32e8:	a5 a5 5a 5a a5 a5 5a 5a a5 a5 5a 5a a5 a5 5a 5a     ..ZZ..ZZ..ZZ..ZZ
    32f8:	c3 c3 3c 3c c3 c3 3c 3c c3 c3 3c 3c c3 c3 3c 3c     ..<<..<<..<<..<<
    3308:	96 96 69 69 96 96 69 69 96 96 69 69 96 96 69 69     ..ii..ii..ii..ii
    3318:	ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff     ................
    3328:	aa 55 55 aa aa 55 55 aa aa 55 55 aa aa 55 55 aa     .UU..UU..UU..UU.
    3338:	cc 33 33 cc cc 33 33 cc cc 33 33 cc cc 33 33 cc     .33..33..33..33.
    3348:	99 66 66 99 99 66 66 99 99 66 66 99 99 66 66 99     .ff..ff..ff..ff.
    3358:	f0 0f 0f f0 f0 0f 0f f0 f0 0f 0f f0 f0 0f 0f f0     ................
    3368:	a5 5a 5a a5 a5 5a 5a a5 a5 5a 5a a5 a5 5a 5a a5     .ZZ..ZZ..ZZ..ZZ.
    3378:	c3 3c 3c c3 c3 3c 3c c3 c3 3c 3c c3 c3 3c 3c c3     .<<..<<..<<..<<.
    3388:	96 69 69 96 96 69 69 96 96 69 69 96 96 69 69 96     .ii..ii..ii..ii.
    3398:	ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00 00     ................
    33a8:	aa aa aa aa 55 55 55 55 aa aa aa aa 55 55 55 55     ....UUUU....UUUU
    33b8:	cc cc cc cc 33 33 33 33 cc cc cc cc 33 33 33 33     ....3333....3333
    33c8:	99 99 99 99 66 66 66 66 99 99 99 99 66 66 66 66     ....ffff....ffff
    33d8:	f0 f0 f0 f0 0f 0f 0f 0f f0 f0 f0 f0 0f 0f 0f 0f     ................
    33e8:	a5 a5 a5 a5 5a 5a 5a 5a a5 a5 a5 a5 5a 5a 5a 5a     ....ZZZZ....ZZZZ
    33f8:	c3 c3 c3 c3 3c 3c 3c 3c c3 c3 c3 c3 3c 3c 3c 3c     ....<<<<....<<<<
    3408:	96 96 96 96 69 69 69 69 96 96 96 96 69 69 69 69     ....iiii....iiii
    3418:	ff 00 ff 00 00 ff 00 ff ff 00 ff 00 00 ff 00 ff     ................
    3428:	aa 55 aa 55 55 aa 55 aa aa 55 aa 55 55 aa 55 aa     .U.UU.U..U.UU.U.
    3438:	cc 33 cc 33 33 cc 33 cc cc 33 cc 33 33 cc 33 cc     .3.33.3..3.33.3.
    3448:	99 66 99 66 66 99 66 99 99 66 99 66 66 99 66 99     .f.ff.f..f.ff.f.
    3458:	f0 0f f0 0f 0f f0 0f f0 f0 0f f0 0f 0f f0 0f f0     ................
    3468:	a5 5a a5 5a 5a a5 5a a5 a5 5a a5 5a 5a a5 5a a5     .Z.ZZ.Z..Z.ZZ.Z.
    3478:	c3 3c c3 3c 3c c3 3c c3 c3 3c c3 3c 3c c3 3c c3     .<.<<.<..<.<<.<.
    3488:	96 69 96 69 69 96 69 96 96 69 96 69 69 96 69 96     .i.ii.i..i.ii.i.
    3498:	ff ff 00 00 00 00 ff ff ff ff 00 00 00 00 ff ff     ................
    34a8:	aa aa 55 55 55 55 aa aa aa aa 55 55 55 55 aa aa     ..UUUU....UUUU..
    34b8:	cc cc 33 33 33 33 cc cc cc cc 33 33 33 33 cc cc     ..3333....3333..
    34c8:	99 99 66 66 66 66 99 99 99 99 66 66 66 66 99 99     ..ffff....ffff..
    34d8:	f0 f0 0f 0f 0f 0f f0 f0 f0 f0 0f 0f 0f 0f f0 f0     ................
    34e8:	a5 a5 5a 5a 5a 5a a5 a5 a5 a5 5a 5a 5a 5a a5 a5     ..ZZZZ....ZZZZ..
    34f8:	c3 c3 3c 3c 3c 3c c3 c3 c3 c3 3c 3c 3c 3c c3 c3     ..<<<<....<<<<..
    3508:	96 96 69 69 69 69 96 96 96 96 69 69 69 69 96 96     ..iiii....iiii..
    3518:	ff 00 00 ff 00 ff ff 00 ff 00 00 ff 00 ff ff 00     ................
    3528:	aa 55 55 aa 55 aa aa 55 aa 55 55 aa 55 aa aa 55     .UU.U..U.UU.U..U
    3538:	cc 33 33 cc 33 cc cc 33 cc 33 33 cc 33 cc cc 33     .33.3..3.33.3..3
    3548:	99 66 66 99 66 99 99 66 99 66 66 99 66 99 99 66     .ff.f..f.ff.f..f
    3558:	f0 0f 0f f0 0f f0 f0 0f f0 0f 0f f0 0f f0 f0 0f     ................
    3568:	a5 5a 5a a5 5a a5 a5 5a a5 5a 5a a5 5a a5 a5 5a     .ZZ.Z..Z.ZZ.Z..Z
    3578:	c3 3c 3c c3 3c c3 c3 3c c3 3c 3c c3 3c c3 c3 3c     .<<.<..<.<<.<..<
    3588:	96 69 69 96 69 96 96 69 96 69 69 96 69 96 96 69     .ii.i..i.ii.i..i
    3598:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    35a8:	aa aa aa aa aa aa aa aa 55 55 55 55 55 55 55 55     ........UUUUUUUU
    35b8:	cc cc cc cc cc cc cc cc 33 33 33 33 33 33 33 33     ........33333333
    35c8:	99 99 99 99 99 99 99 99 66 66 66 66 66 66 66 66     ........ffffffff
    35d8:	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f     ................
    35e8:	a5 a5 a5 a5 a5 a5 a5 a5 5a 5a 5a 5a 5a 5a 5a 5a     ........ZZZZZZZZ
    35f8:	c3 c3 c3 c3 c3 c3 c3 c3 3c 3c 3c 3c 3c 3c 3c 3c     ........<<<<<<<<
    3608:	96 96 96 96 96 96 96 96 69 69 69 69 69 69 69 69     ........iiiiiiii
    3618:	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff     ................
    3628:	aa 55 aa 55 aa 55 aa 55 55 aa 55 aa 55 aa 55 aa     .U.U.U.UU.U.U.U.
    3638:	cc 33 cc 33 cc 33 cc 33 33 cc 33 cc 33 cc 33 cc     .3.3.3.33.3.3.3.
    3648:	99 66 99 66 99 66 99 66 66 99 66 99 66 99 66 99     .f.f.f.ff.f.f.f.
    3658:	f0 0f f0 0f f0 0f f0 0f 0f f0 0f f0 0f f0 0f f0     ................
    3668:	a5 5a a5 5a a5 5a a5 5a 5a a5 5a a5 5a a5 5a a5     .Z.Z.Z.ZZ.Z.Z.Z.
    3678:	c3 3c c3 3c c3 3c c3 3c 3c c3 3c c3 3c c3 3c c3     .<.<.<.<<.<.<.<.
    3688:	96 69 96 69 96 69 96 69 69 96 69 96 69 96 69 96     .i.i.i.ii.i.i.i.
    3698:	ff ff 00 00 ff ff 00 00 00 00 ff ff 00 00 ff ff     ................
    36a8:	aa aa 55 55 aa aa 55 55 55 55 aa aa 55 55 aa aa     ..UU..UUUU..UU..
    36b8:	cc cc 33 33 cc cc 33 33 33 33 cc cc 33 33 cc cc     ..33..3333..33..
    36c8:	99 99 66 66 99 99 66 66 66 66 99 99 66 66 99 99     ..ff..ffff..ff..
    36d8:	f0 f0 0f 0f f0 f0 0f 0f 0f 0f f0 f0 0f 0f f0 f0     ................
    36e8:	a5 a5 5a 5a a5 a5 5a 5a 5a 5a a5 a5 5a 5a a5 a5     ..ZZ..ZZZZ..ZZ..
    36f8:	c3 c3 3c 3c c3 c3 3c 3c 3c 3c c3 c3 3c 3c c3 c3     ..<<..<<<<..<<..
    3708:	96 96 69 69 96 96 69 69 69 69 96 96 69 69 96 96     ..ii..iiii..ii..
    3718:	ff 00 00 ff ff 00 00 ff 00 ff ff 00 00 ff ff 00     ................
    3728:	aa 55 55 aa aa 55 55 aa 55 aa aa 55 55 aa aa 55     .UU..UU.U..UU..U
    3738:	cc 33 33 cc cc 33 33 cc 33 cc cc 33 33 cc cc 33     .33..33.3..33..3
    3748:	99 66 66 99 99 66 66 99 66 99 99 66 66 99 99 66     .ff..ff.f..ff..f
    3758:	f0 0f 0f f0 f0 0f 0f f0 0f f0 f0 0f 0f f0 f0 0f     ................
    3768:	a5 5a 5a a5 a5 5a 5a a5 5a a5 a5 5a 5a a5 a5 5a     .ZZ..ZZ.Z..ZZ..Z
    3778:	c3 3c 3c c3 c3 3c 3c c3 3c c3 c3 3c 3c c3 c3 3c     .<<..<<.<..<<..<
    3788:	96 69 69 96 96 69 69 96 69 96 96 69 69 96 96 69     .ii..ii.i..ii..i
    3798:	ff ff ff ff 00 00 00 00 00 00 00 00 ff ff ff ff     ................
    37a8:	aa aa aa aa 55 55 55 55 55 55 55 55 aa aa aa aa     ....UUUUUUUU....
    37b8:	cc cc cc cc 33 33 33 33 33 33 33 33 cc cc cc cc     ....33333333....
    37c8:	99 99 99 99 66 66 66 66 66 66 66 66 99 99 99 99     ....ffffffff....
    37d8:	f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f f0 f0 f0 f0     ................
    37e8:	a5 a5 a5 a5 5a 5a 5a 5a 5a 5a 5a 5a a5 a5 a5 a5     ....ZZZZZZZZ....
    37f8:	c3 c3 c3 c3 3c 3c 3c 3c 3c 3c 3c 3c c3 c3 c3 c3     ....<<<<<<<<....
    3808:	96 96 96 96 69 69 69 69 69 69 69 69 96 96 96 96     ....iiiiiiii....
    3818:	ff 00 ff 00 00 ff 00 ff 00 ff 00 ff ff 00 ff 00     ................
    3828:	aa 55 aa 55 55 aa 55 aa 55 aa 55 aa aa 55 aa 55     .U.UU.U.U.U..U.U
    3838:	cc 33 cc 33 33 cc 33 cc 33 cc 33 cc cc 33 cc 33     .3.33.3.3.3..3.3
    3848:	99 66 99 66 66 99 66 99 66 99 66 99 99 66 99 66     .f.ff.f.f.f..f.f
    3858:	f0 0f f0 0f 0f f0 0f f0 0f f0 0f f0 f0 0f f0 0f     ................
    3868:	a5 5a a5 5a 5a a5 5a a5 5a a5 5a a5 a5 5a a5 5a     .Z.ZZ.Z.Z.Z..Z.Z
    3878:	c3 3c c3 3c 3c c3 3c c3 3c c3 3c c3 c3 3c c3 3c     .<.<<.<.<.<..<.<
    3888:	96 69 96 69 69 96 69 96 69 96 69 96 96 69 96 69     .i.ii.i.i.i..i.i
    3898:	ff ff 00 00 00 00 ff ff 00 00 ff ff ff ff 00 00     ................
    38a8:	aa aa 55 55 55 55 aa aa 55 55 aa aa aa aa 55 55     ..UUUU..UU....UU
    38b8:	cc cc 33 33 33 33 cc cc 33 33 cc cc cc cc 33 33     ..3333..33....33
    38c8:	99 99 66 66 66 66 99 99 66 66 99 99 99 99 66 66     ..ffff..ff....ff
    38d8:	f0 f0 0f 0f 0f 0f f0 f0 0f 0f f0 f0 f0 f0 0f 0f     ................
    38e8:	a5 a5 5a 5a 5a 5a a5 a5 5a 5a a5 a5 a5 a5 5a 5a     ..ZZZZ..ZZ....ZZ
    38f8:	c3 c3 3c 3c 3c 3c c3 c3 3c 3c c3 c3 c3 c3 3c 3c     ..<<<<..<<....<<
    3908:	96 96 69 69 69 69 96 96 69 69 96 96 96 96 69 69     ..iiii..ii....ii
    3918:	ff 00 00 ff 00 ff ff 00 00 ff ff 00 ff 00 00 ff     ................
    3928:	aa 55 55 aa 55 aa aa 55 55 aa aa 55 aa 55 55 aa     .UU.U..UU..U.UU.
    3938:	cc 33 33 cc 33 cc cc 33 33 cc cc 33 cc 33 33 cc     .33.3..33..3.33.
    3948:	99 66 66 99 66 99 99 66 66 99 99 66 99 66 66 99     .ff.f..ff..f.ff.
    3958:	f0 0f 0f f0 0f f0 f0 0f 0f f0 f0 0f f0 0f 0f f0     ................
    3968:	a5 5a 5a a5 5a a5 a5 5a 5a a5 a5 5a a5 5a 5a a5     .ZZ.Z..ZZ..Z.ZZ.
    3978:	c3 3c 3c c3 3c c3 c3 3c 3c c3 c3 3c c3 3c 3c c3     .<<.<..<<..<.<<.
    3988:	96 69 69 96 69 96 96 69 69 96 96 69 96 69 69 96     .ii.i..ii..i.ii.

00003998 <__init0>:
}

void __init0(void)
{
    /* Reset __zero_reg__ (r1) */
    asm volatile("clr __zero_reg__");
    3998:	11 24       	eor	r1, r1

    // setta lo stack pointer a RAMEND (0x8FF)
    asm volatile(
    399a:	08 e0       	ldi	r16, 0x08	; 8
    399c:	0e bf       	out	0x3e, r16	; 62
    399e:	0f ef       	ldi	r16, 0xFF	; 255
    39a0:	0d bf       	out	0x3d, r16	; 61
        "out __SP_H__,r16\n\t"
        "ldi r16, 0xff\n\t"
        "out __SP_L__,r16\n\t"
    );

    usart_init((unsigned int)BAUD_SETTING);
    39a2:	60 e1       	ldi	r22, 0x10	; 16
    39a4:	70 e0       	ldi	r23, 0x00	; 0
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <usart_init>

    usart_tx_string("puf init0:\n\r");
    39ae:	84 e2       	ldi	r24, 0x24	; 36
    39b0:	92 e0       	ldi	r25, 0x02	; 2
    39b2:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(bss_puf, PUF_SIZE);
    39b6:	60 e3       	ldi	r22, 0x30	; 48
    39b8:	71 e0       	ldi	r23, 0x01	; 1
    39ba:	88 ec       	ldi	r24, 0xC8	; 200
    39bc:	93 e0       	ldi	r25, 0x03	; 3
    39be:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>

000039c2 <__init1>:
    39c2:	81 e3       	ldi	r24, 0x31	; 49
    39c4:	92 e0       	ldi	r25, 0x02	; 2
    39c6:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    39ca:	60 e3       	ldi	r22, 0x30	; 48
    39cc:	71 e0       	ldi	r23, 0x01	; 1
    39ce:	88 ec       	ldi	r24, 0xC8	; 200
    39d0:	93 e0       	ldi	r25, 0x03	; 3
    39d2:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>
    39d6:	11 24       	eor	r1, r1
    39d8:	1f be       	out	0x3f, r1	; 63
    39da:	cf ef       	ldi	r28, 0xFF	; 255
    39dc:	d8 e0       	ldi	r29, 0x08	; 8
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	cd bf       	out	0x3d, r28	; 61

000039e2 <__do_copy_data>:
    39e2:	13 e0       	ldi	r17, 0x03	; 3
    39e4:	a0 e0       	ldi	r26, 0x00	; 0
    39e6:	b1 e0       	ldi	r27, 0x01	; 1
    39e8:	e8 e6       	ldi	r30, 0x68	; 104
    39ea:	f3 e7       	ldi	r31, 0x73	; 115
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <__do_copy_data+0x10>
    39ee:	05 90       	lpm	r0, Z+
    39f0:	0d 92       	st	X+, r0
    39f2:	a2 3c       	cpi	r26, 0xC2	; 194
    39f4:	b1 07       	cpc	r27, r17
    39f6:	d9 f7       	brne	.-10     	; 0x39ee <__do_copy_data+0xc>

000039f8 <__do_clear_bss>:
    39f8:	23 e0       	ldi	r18, 0x03	; 3
    39fa:	a2 ec       	ldi	r26, 0xC2	; 194
    39fc:	b3 e0       	ldi	r27, 0x03	; 3
    39fe:	01 c0       	rjmp	.+2      	; 0x3a02 <.do_clear_bss_start>

00003a00 <.do_clear_bss_loop>:
    3a00:	1d 92       	st	X+, r1

00003a02 <.do_clear_bss_start>:
    3a02:	a8 3c       	cpi	r26, 0xC8	; 200
    3a04:	b2 07       	cpc	r27, r18
    3a06:	e1 f7       	brne	.-8      	; 0x3a00 <.do_clear_bss_loop>
    3a08:	0e 94 4f 32 	call	0x649e	; 0x649e <main>
    3a0c:	0c 94 b1 39 	jmp	0x7362	; 0x7362 <_exit>

00003a10 <__bad_interrupt>:
    3a10:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__vectors>

00003a14 <hkdfExtract>:
 */
int hkdfExtract(SHAversion whichSha,
    const unsigned char *salt, int salt_len,
    const unsigned char *ikm, int ikm_len,
    uint8_t prk[USHAMaxHashSize])
{
    3a14:	6f 92       	push	r6
    3a16:	7f 92       	push	r7
    3a18:	8f 92       	push	r8
    3a1a:	9f 92       	push	r9
    3a1c:	af 92       	push	r10
    3a1e:	bf 92       	push	r11
    3a20:	cf 92       	push	r12
    3a22:	df 92       	push	r13
    3a24:	ef 92       	push	r14
    3a26:	ff 92       	push	r15
    3a28:	0f 93       	push	r16
    3a2a:	1f 93       	push	r17
    3a2c:	cf 93       	push	r28
    3a2e:	df 93       	push	r29
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	c0 54       	subi	r28, 0x40	; 64
    3a36:	d1 09       	sbc	r29, r1
    3a38:	0f b6       	in	r0, 0x3f	; 63
    3a3a:	f8 94       	cli
    3a3c:	de bf       	out	0x3e, r29	; 62
    3a3e:	0f be       	out	0x3f, r0	; 63
    3a40:	cd bf       	out	0x3d, r28	; 61
    3a42:	5c 01       	movw	r10, r24
    3a44:	6a 01       	movw	r12, r20
    3a46:	49 01       	movw	r8, r18
    3a48:	38 01       	movw	r6, r16
  unsigned char nullSalt[USHAMaxHashSize];
  if (salt == 0) {
    3a4a:	61 15       	cp	r22, r1
    3a4c:	71 05       	cpc	r23, r1
    3a4e:	71 f4       	brne	.+28     	; 0x3a6c <hkdfExtract+0x58>
    salt = nullSalt;
    salt_len = USHAHashSize(whichSha);
    3a50:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <USHAHashSize>
    3a54:	6c 01       	movw	r12, r24
    memset(nullSalt, '\0', salt_len);
    3a56:	ac 01       	movw	r20, r24
    3a58:	60 e0       	ldi	r22, 0x00	; 0
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
    3a5c:	ce 01       	movw	r24, r28
    3a5e:	01 96       	adiw	r24, 0x01	; 1
    3a60:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <memset>
    const unsigned char *ikm, int ikm_len,
    uint8_t prk[USHAMaxHashSize])
{
  unsigned char nullSalt[USHAMaxHashSize];
  if (salt == 0) {
    salt = nullSalt;
    3a64:	be 01       	movw	r22, r28
    3a66:	6f 5f       	subi	r22, 0xFF	; 255
    3a68:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6a:	02 c0       	rjmp	.+4      	; 0x3a70 <hkdfExtract+0x5c>
    salt_len = USHAHashSize(whichSha);
    memset(nullSalt, '\0', salt_len);
  } else if (salt_len < 0) {
    3a6c:	57 fd       	sbrc	r21, 7
    3a6e:	08 c0       	rjmp	.+16     	; 0x3a80 <hkdfExtract+0x6c>
    return shaBadParam;
  }
  return hmac(whichSha, ikm, ikm_len, salt, salt_len, prk);
    3a70:	86 01       	movw	r16, r12
    3a72:	9b 01       	movw	r18, r22
    3a74:	a3 01       	movw	r20, r6
    3a76:	b4 01       	movw	r22, r8
    3a78:	c5 01       	movw	r24, r10
    3a7a:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <hmac>
    3a7e:	02 c0       	rjmp	.+4      	; 0x3a84 <hkdfExtract+0x70>
  if (salt == 0) {
    salt = nullSalt;
    salt_len = USHAHashSize(whichSha);
    memset(nullSalt, '\0', salt_len);
  } else if (salt_len < 0) {
    return shaBadParam;
    3a80:	84 e0       	ldi	r24, 0x04	; 4
    3a82:	90 e0       	ldi	r25, 0x00	; 0
  }
  return hmac(whichSha, ikm, ikm_len, salt, salt_len, prk);
}
    3a84:	c0 5c       	subi	r28, 0xC0	; 192
    3a86:	df 4f       	sbci	r29, 0xFF	; 255
    3a88:	0f b6       	in	r0, 0x3f	; 63
    3a8a:	f8 94       	cli
    3a8c:	de bf       	out	0x3e, r29	; 62
    3a8e:	0f be       	out	0x3f, r0	; 63
    3a90:	cd bf       	out	0x3d, r28	; 61
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	1f 91       	pop	r17
    3a98:	0f 91       	pop	r16
    3a9a:	ff 90       	pop	r15
    3a9c:	ef 90       	pop	r14
    3a9e:	df 90       	pop	r13
    3aa0:	cf 90       	pop	r12
    3aa2:	bf 90       	pop	r11
    3aa4:	af 90       	pop	r10
    3aa6:	9f 90       	pop	r9
    3aa8:	8f 90       	pop	r8
    3aaa:	7f 90       	pop	r7
    3aac:	6f 90       	pop	r6
    3aae:	08 95       	ret

00003ab0 <hkdfExpand>:
 *
 */
int hkdfExpand(SHAversion whichSha, const uint8_t prk[ ], int prk_len,
    const unsigned char *info, int info_len,
    uint8_t okm[ ], int okm_len)
{
    3ab0:	2f 92       	push	r2
    3ab2:	3f 92       	push	r3
    3ab4:	4f 92       	push	r4
    3ab6:	5f 92       	push	r5
    3ab8:	6f 92       	push	r6
    3aba:	7f 92       	push	r7
    3abc:	8f 92       	push	r8
    3abe:	9f 92       	push	r9
    3ac0:	af 92       	push	r10
    3ac2:	bf 92       	push	r11
    3ac4:	cf 92       	push	r12
    3ac6:	df 92       	push	r13
    3ac8:	ef 92       	push	r14
    3aca:	ff 92       	push	r15
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	c1 54       	subi	r28, 0x41	; 65
    3ada:	d1 40       	sbci	r29, 0x01	; 1
    3adc:	0f b6       	in	r0, 0x3f	; 63
    3ade:	f8 94       	cli
    3ae0:	de bf       	out	0x3e, r29	; 62
    3ae2:	0f be       	out	0x3f, r0	; 63
    3ae4:	cd bf       	out	0x3d, r28	; 61
    3ae6:	c4 5c       	subi	r28, 0xC4	; 196
    3ae8:	de 4f       	sbci	r29, 0xFE	; 254
    3aea:	99 83       	std	Y+1, r25	; 0x01
    3aec:	88 83       	st	Y, r24
    3aee:	cc 53       	subi	r28, 0x3C	; 60
    3af0:	d1 40       	sbci	r29, 0x01	; 1
    3af2:	c0 5c       	subi	r28, 0xC0	; 192
    3af4:	de 4f       	sbci	r29, 0xFE	; 254
    3af6:	79 83       	std	Y+1, r23	; 0x01
    3af8:	68 83       	st	Y, r22
    3afa:	c0 54       	subi	r28, 0x40	; 64
    3afc:	d1 40       	sbci	r29, 0x01	; 1
    3afe:	1a 01       	movw	r2, r20
    3b00:	49 01       	movw	r8, r18
    3b02:	27 01       	movw	r4, r14
  int hash_len, N;
  unsigned char T[USHAMaxHashSize];
  int Tlen, where, i;

  if (info == 0) {
    3b04:	23 2b       	or	r18, r19
    3b06:	29 f0       	breq	.+10     	; 0x3b12 <hkdfExpand+0x62>
    info = (const unsigned char *)"";
    info_len = 0;
  } else if (info_len < 0) {
    3b08:	17 ff       	sbrs	r17, 7
    3b0a:	09 c0       	rjmp	.+18     	; 0x3b1e <hkdfExpand+0x6e>
    return shaBadParam;
    3b0c:	84 e0       	ldi	r24, 0x04	; 4
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	a5 c0       	rjmp	.+330    	; 0x3c5c <hkdfExpand+0x1ac>
  unsigned char T[USHAMaxHashSize];
  int Tlen, where, i;

  if (info == 0) {
    info = (const unsigned char *)"";
    info_len = 0;
    3b12:	00 e0       	ldi	r16, 0x00	; 0
    3b14:	10 e0       	ldi	r17, 0x00	; 0
  int hash_len, N;
  unsigned char T[USHAMaxHashSize];
  int Tlen, where, i;

  if (info == 0) {
    info = (const unsigned char *)"";
    3b16:	97 e9       	ldi	r25, 0x97	; 151
    3b18:	89 2e       	mov	r8, r25
    3b1a:	92 e0       	ldi	r25, 0x02	; 2
    3b1c:	99 2e       	mov	r9, r25
    info_len = 0;
  } else if (info_len < 0) {
    return shaBadParam;
  }
  if (okm_len <= 0) return shaBadParam;
    3b1e:	1c 14       	cp	r1, r12
    3b20:	1d 04       	cpc	r1, r13
    3b22:	a4 f7       	brge	.-24     	; 0x3b0c <hkdfExpand+0x5c>
  if (!okm) return shaBadParam;
    3b24:	41 14       	cp	r4, r1
    3b26:	51 04       	cpc	r5, r1
    3b28:	89 f3       	breq	.-30     	; 0x3b0c <hkdfExpand+0x5c>

  hash_len = USHAHashSize(whichSha);
    3b2a:	c4 5c       	subi	r28, 0xC4	; 196
    3b2c:	de 4f       	sbci	r29, 0xFE	; 254
    3b2e:	88 81       	ld	r24, Y
    3b30:	99 81       	ldd	r25, Y+1	; 0x01
    3b32:	cc 53       	subi	r28, 0x3C	; 60
    3b34:	d1 40       	sbci	r29, 0x01	; 1
    3b36:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <USHAHashSize>
    3b3a:	7c 01       	movw	r14, r24
  if (prk_len < hash_len) return shaBadParam;
    3b3c:	28 16       	cp	r2, r24
    3b3e:	39 06       	cpc	r3, r25
    3b40:	2c f3       	brlt	.-54     	; 0x3b0c <hkdfExpand+0x5c>
  N = okm_len / hash_len;
    3b42:	c6 01       	movw	r24, r12
    3b44:	b7 01       	movw	r22, r14
    3b46:	0e 94 9e 34 	call	0x693c	; 0x693c <__divmodhi4>
    3b4a:	5b 01       	movw	r10, r22
  if ((okm_len % hash_len) != 0) N++;
    3b4c:	89 2b       	or	r24, r25
    3b4e:	19 f0       	breq	.+6      	; 0x3b56 <hkdfExpand+0xa6>
    3b50:	8f ef       	ldi	r24, 0xFF	; 255
    3b52:	a8 1a       	sub	r10, r24
    3b54:	b8 0a       	sbc	r11, r24
  if (N > 255) return shaBadParam;
    3b56:	8f ef       	ldi	r24, 0xFF	; 255
    3b58:	a8 16       	cp	r10, r24
    3b5a:	b1 04       	cpc	r11, r1
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <hkdfExpand+0xb0>
    3b5e:	b4 f6       	brge	.-84     	; 0x3b0c <hkdfExpand+0x5c>
    3b60:	36 01       	movw	r6, r12
    3b62:	cc 24       	eor	r12, r12
    3b64:	c3 94       	inc	r12
    3b66:	d1 2c       	mov	r13, r1
    3b68:	c2 5c       	subi	r28, 0xC2	; 194
    3b6a:	de 4f       	sbci	r29, 0xFE	; 254
    3b6c:	18 82       	st	Y, r1
    3b6e:	ce 53       	subi	r28, 0x3E	; 62
    3b70:	d1 40       	sbci	r29, 0x01	; 1
    3b72:	c1 5c       	subi	r28, 0xC1	; 193
    3b74:	de 4f       	sbci	r29, 0xFE	; 254
    3b76:	18 82       	st	Y, r1
    3b78:	cf 53       	subi	r28, 0x3F	; 63
    3b7a:	d1 40       	sbci	r29, 0x01	; 1

  Tlen = 0;
  where = 0;
  for (i = 1; i <= N; i++) {
    3b7c:	ac 14       	cp	r10, r12
    3b7e:	bd 04       	cpc	r11, r13
    3b80:	0c f4       	brge	.+2      	; 0x3b84 <hkdfExpand+0xd4>
    3b82:	48 c0       	rjmp	.+144    	; 0x3c14 <hkdfExpand+0x164>
    HMACContext context;
    unsigned char c = i;
    3b84:	c5 5c       	subi	r28, 0xC5	; 197
    3b86:	de 4f       	sbci	r29, 0xFE	; 254
    3b88:	c8 82       	st	Y, r12
    3b8a:	cb 53       	subi	r28, 0x3B	; 59
    3b8c:	d1 40       	sbci	r29, 0x01	; 1
    int ret = hmacReset(&context, whichSha, prk, prk_len) ||
    3b8e:	91 01       	movw	r18, r2
    3b90:	c0 5c       	subi	r28, 0xC0	; 192
    3b92:	de 4f       	sbci	r29, 0xFE	; 254
    3b94:	48 81       	ld	r20, Y
    3b96:	59 81       	ldd	r21, Y+1	; 0x01
    3b98:	c0 54       	subi	r28, 0x40	; 64
    3b9a:	d1 40       	sbci	r29, 0x01	; 1
    3b9c:	c4 5c       	subi	r28, 0xC4	; 196
    3b9e:	de 4f       	sbci	r29, 0xFE	; 254
    3ba0:	68 81       	ld	r22, Y
    3ba2:	79 81       	ldd	r23, Y+1	; 0x01
    3ba4:	cc 53       	subi	r28, 0x3C	; 60
    3ba6:	d1 40       	sbci	r29, 0x01	; 1
    3ba8:	ce 01       	movw	r24, r28
    3baa:	01 96       	adiw	r24, 0x01	; 1
    3bac:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <hmacReset>
              hmacInput(&context, T, Tlen) ||
              hmacInput(&context, info, info_len) ||
              hmacInput(&context, &c, 1) ||
    3bb0:	89 2b       	or	r24, r25
    3bb2:	99 f5       	brne	.+102    	; 0x3c1a <hkdfExpand+0x16a>
  where = 0;
  for (i = 1; i <= N; i++) {
    HMACContext context;
    unsigned char c = i;
    int ret = hmacReset(&context, whichSha, prk, prk_len) ||
              hmacInput(&context, T, Tlen) ||
    3bb4:	c2 5c       	subi	r28, 0xC2	; 194
    3bb6:	de 4f       	sbci	r29, 0xFE	; 254
    3bb8:	48 81       	ld	r20, Y
    3bba:	ce 53       	subi	r28, 0x3E	; 62
    3bbc:	d1 40       	sbci	r29, 0x01	; 1
    3bbe:	c1 5c       	subi	r28, 0xC1	; 193
    3bc0:	de 4f       	sbci	r29, 0xFE	; 254
    3bc2:	58 81       	ld	r21, Y
    3bc4:	cf 53       	subi	r28, 0x3F	; 63
    3bc6:	d1 40       	sbci	r29, 0x01	; 1
    3bc8:	be 01       	movw	r22, r28
    3bca:	65 50       	subi	r22, 0x05	; 5
    3bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bce:	ce 01       	movw	r24, r28
    3bd0:	01 96       	adiw	r24, 0x01	; 1
    3bd2:	0e 94 65 1f 	call	0x3eca	; 0x3eca <hmacInput>
  Tlen = 0;
  where = 0;
  for (i = 1; i <= N; i++) {
    HMACContext context;
    unsigned char c = i;
    int ret = hmacReset(&context, whichSha, prk, prk_len) ||
    3bd6:	89 2b       	or	r24, r25
    3bd8:	01 f5       	brne	.+64     	; 0x3c1a <hkdfExpand+0x16a>
              hmacInput(&context, T, Tlen) ||
              hmacInput(&context, info, info_len) ||
    3bda:	a8 01       	movw	r20, r16
    3bdc:	b4 01       	movw	r22, r8
    3bde:	ce 01       	movw	r24, r28
    3be0:	01 96       	adiw	r24, 0x01	; 1
    3be2:	0e 94 65 1f 	call	0x3eca	; 0x3eca <hmacInput>
  where = 0;
  for (i = 1; i <= N; i++) {
    HMACContext context;
    unsigned char c = i;
    int ret = hmacReset(&context, whichSha, prk, prk_len) ||
              hmacInput(&context, T, Tlen) ||
    3be6:	89 2b       	or	r24, r25
    3be8:	c1 f4       	brne	.+48     	; 0x3c1a <hkdfExpand+0x16a>
              hmacInput(&context, info, info_len) ||
              hmacInput(&context, &c, 1) ||
    3bea:	41 e0       	ldi	r20, 0x01	; 1
    3bec:	50 e0       	ldi	r21, 0x00	; 0
    3bee:	be 01       	movw	r22, r28
    3bf0:	65 5c       	subi	r22, 0xC5	; 197
    3bf2:	7e 4f       	sbci	r23, 0xFE	; 254
    3bf4:	ce 01       	movw	r24, r28
    3bf6:	01 96       	adiw	r24, 0x01	; 1
    3bf8:	0e 94 65 1f 	call	0x3eca	; 0x3eca <hmacInput>
  for (i = 1; i <= N; i++) {
    HMACContext context;
    unsigned char c = i;
    int ret = hmacReset(&context, whichSha, prk, prk_len) ||
              hmacInput(&context, T, Tlen) ||
              hmacInput(&context, info, info_len) ||
    3bfc:	89 2b       	or	r24, r25
    3bfe:	69 f4       	brne	.+26     	; 0x3c1a <hkdfExpand+0x16a>
              hmacInput(&context, &c, 1) ||
              hmacResult(&context, T);
    3c00:	be 01       	movw	r22, r28
    3c02:	65 50       	subi	r22, 0x05	; 5
    3c04:	7f 4f       	sbci	r23, 0xFF	; 255
    3c06:	ce 01       	movw	r24, r28
    3c08:	01 96       	adiw	r24, 0x01	; 1
    3c0a:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <hmacResult>
    HMACContext context;
    unsigned char c = i;
    int ret = hmacReset(&context, whichSha, prk, prk_len) ||
              hmacInput(&context, T, Tlen) ||
              hmacInput(&context, info, info_len) ||
              hmacInput(&context, &c, 1) ||
    3c0e:	89 2b       	or	r24, r25
    3c10:	21 f4       	brne	.+8      	; 0x3c1a <hkdfExpand+0x16a>
    3c12:	06 c0       	rjmp	.+12     	; 0x3c20 <hkdfExpand+0x170>
    memcpy(okm + where, T,
           (i != N) ? hash_len : (okm_len - where));
    where += hash_len;
    Tlen = hash_len;
  }
  return shaSuccess;
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	21 c0       	rjmp	.+66     	; 0x3c5c <hkdfExpand+0x1ac>
    int ret = hmacReset(&context, whichSha, prk, prk_len) ||
              hmacInput(&context, T, Tlen) ||
              hmacInput(&context, info, info_len) ||
              hmacInput(&context, &c, 1) ||
              hmacResult(&context, T);
    if (ret != shaSuccess) return ret;
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	1e c0       	rjmp	.+60     	; 0x3c5c <hkdfExpand+0x1ac>
    memcpy(okm + where, T,
    3c20:	ac 14       	cp	r10, r12
    3c22:	bd 04       	cpc	r11, r13
    3c24:	c9 f4       	brne	.+50     	; 0x3c58 <hkdfExpand+0x1a8>
    3c26:	a3 01       	movw	r20, r6
    3c28:	be 01       	movw	r22, r28
    3c2a:	65 50       	subi	r22, 0x05	; 5
    3c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2e:	c2 01       	movw	r24, r4
    3c30:	0e 94 41 36 	call	0x6c82	; 0x6c82 <memcpy>
  if ((okm_len % hash_len) != 0) N++;
  if (N > 255) return shaBadParam;

  Tlen = 0;
  where = 0;
  for (i = 1; i <= N; i++) {
    3c34:	8f ef       	ldi	r24, 0xFF	; 255
    3c36:	c8 1a       	sub	r12, r24
    3c38:	d8 0a       	sbc	r13, r24
    3c3a:	6e 18       	sub	r6, r14
    3c3c:	7f 08       	sbc	r7, r15
    3c3e:	4e 0c       	add	r4, r14
    3c40:	5f 1c       	adc	r5, r15
    3c42:	c2 5c       	subi	r28, 0xC2	; 194
    3c44:	de 4f       	sbci	r29, 0xFE	; 254
    3c46:	e8 82       	st	Y, r14
    3c48:	ce 53       	subi	r28, 0x3E	; 62
    3c4a:	d1 40       	sbci	r29, 0x01	; 1
    3c4c:	c1 5c       	subi	r28, 0xC1	; 193
    3c4e:	de 4f       	sbci	r29, 0xFE	; 254
    3c50:	f8 82       	st	Y, r15
    3c52:	cf 53       	subi	r28, 0x3F	; 63
    3c54:	d1 40       	sbci	r29, 0x01	; 1
    3c56:	92 cf       	rjmp	.-220    	; 0x3b7c <hkdfExpand+0xcc>
    3c58:	a7 01       	movw	r20, r14
    3c5a:	e6 cf       	rjmp	.-52     	; 0x3c28 <hkdfExpand+0x178>
           (i != N) ? hash_len : (okm_len - where));
    where += hash_len;
    Tlen = hash_len;
  }
  return shaSuccess;
}
    3c5c:	cf 5b       	subi	r28, 0xBF	; 191
    3c5e:	de 4f       	sbci	r29, 0xFE	; 254
    3c60:	0f b6       	in	r0, 0x3f	; 63
    3c62:	f8 94       	cli
    3c64:	de bf       	out	0x3e, r29	; 62
    3c66:	0f be       	out	0x3f, r0	; 63
    3c68:	cd bf       	out	0x3d, r28	; 61
    3c6a:	df 91       	pop	r29
    3c6c:	cf 91       	pop	r28
    3c6e:	1f 91       	pop	r17
    3c70:	0f 91       	pop	r16
    3c72:	ff 90       	pop	r15
    3c74:	ef 90       	pop	r14
    3c76:	df 90       	pop	r13
    3c78:	cf 90       	pop	r12
    3c7a:	bf 90       	pop	r11
    3c7c:	af 90       	pop	r10
    3c7e:	9f 90       	pop	r9
    3c80:	8f 90       	pop	r8
    3c82:	7f 90       	pop	r7
    3c84:	6f 90       	pop	r6
    3c86:	5f 90       	pop	r5
    3c88:	4f 90       	pop	r4
    3c8a:	3f 90       	pop	r3
    3c8c:	2f 90       	pop	r2
    3c8e:	08 95       	ret

00003c90 <hkdf>:
int hkdf(SHAversion whichSha,
    const unsigned char *salt, int salt_len,
    const unsigned char *ikm, int ikm_len,
    const unsigned char *info, int info_len,
    uint8_t okm[ ], int okm_len)
{
    3c90:	2f 92       	push	r2
    3c92:	3f 92       	push	r3
    3c94:	4f 92       	push	r4
    3c96:	5f 92       	push	r5
    3c98:	6f 92       	push	r6
    3c9a:	7f 92       	push	r7
    3c9c:	8f 92       	push	r8
    3c9e:	9f 92       	push	r9
    3ca0:	af 92       	push	r10
    3ca2:	bf 92       	push	r11
    3ca4:	cf 92       	push	r12
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	c0 54       	subi	r28, 0x40	; 64
    3cba:	d1 09       	sbc	r29, r1
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	cd bf       	out	0x3d, r28	; 61
    3cc6:	3c 01       	movw	r6, r24
    3cc8:	17 01       	movw	r2, r14
    3cca:	26 01       	movw	r4, r12
    3ccc:	64 01       	movw	r12, r8
  uint8_t prk[USHAMaxHashSize];
  return hkdfExtract(whichSha, salt, salt_len, ikm, ikm_len, prk) ||
    3cce:	ce 01       	movw	r24, r28
    3cd0:	01 96       	adiw	r24, 0x01	; 1
    3cd2:	7c 01       	movw	r14, r24
    3cd4:	c3 01       	movw	r24, r6
    3cd6:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <hkdfExtract>
    3cda:	89 2b       	or	r24, r25
    3cdc:	a9 f4       	brne	.+42     	; 0x3d08 <hkdf+0x78>
         hkdfExpand(whichSha, prk, USHAHashSize(whichSha), info,
    3cde:	c3 01       	movw	r24, r6
    3ce0:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <USHAHashSize>
    3ce4:	75 01       	movw	r14, r10
    3ce6:	82 01       	movw	r16, r4
    3ce8:	91 01       	movw	r18, r2
    3cea:	ac 01       	movw	r20, r24
    3cec:	be 01       	movw	r22, r28
    3cee:	6f 5f       	subi	r22, 0xFF	; 255
    3cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf2:	c3 01       	movw	r24, r6
    3cf4:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <hkdfExpand>
    const unsigned char *ikm, int ikm_len,
    const unsigned char *info, int info_len,
    uint8_t okm[ ], int okm_len)
{
  uint8_t prk[USHAMaxHashSize];
  return hkdfExtract(whichSha, salt, salt_len, ikm, ikm_len, prk) ||
    3cf8:	31 e0       	ldi	r19, 0x01	; 1
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	89 2b       	or	r24, r25
    3cfe:	09 f4       	brne	.+2      	; 0x3d02 <hkdf+0x72>
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	83 2f       	mov	r24, r19
    3d04:	92 2f       	mov	r25, r18
    3d06:	02 c0       	rjmp	.+4      	; 0x3d0c <hkdf+0x7c>
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
         hkdfExpand(whichSha, prk, USHAHashSize(whichSha), info,
                    info_len, okm, okm_len);
}
    3d0c:	c0 5c       	subi	r28, 0xC0	; 192
    3d0e:	df 4f       	sbci	r29, 0xFF	; 255
    3d10:	0f b6       	in	r0, 0x3f	; 63
    3d12:	f8 94       	cli
    3d14:	de bf       	out	0x3e, r29	; 62
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	cd bf       	out	0x3d, r28	; 61
    3d1a:	df 91       	pop	r29
    3d1c:	cf 91       	pop	r28
    3d1e:	1f 91       	pop	r17
    3d20:	0f 91       	pop	r16
    3d22:	ff 90       	pop	r15
    3d24:	ef 90       	pop	r14
    3d26:	df 90       	pop	r13
    3d28:	cf 90       	pop	r12
    3d2a:	bf 90       	pop	r11
    3d2c:	af 90       	pop	r10
    3d2e:	9f 90       	pop	r9
    3d30:	8f 90       	pop	r8
    3d32:	7f 90       	pop	r7
    3d34:	6f 90       	pop	r6
    3d36:	5f 90       	pop	r5
    3d38:	4f 90       	pop	r4
    3d3a:	3f 90       	pop	r3
    3d3c:	2f 90       	pop	r2
    3d3e:	08 95       	ret

00003d40 <hmacReset>:
 *      sha Error Code.
 *
 */
int hmacReset(HMACContext *context, enum SHAversion whichSha,
    const unsigned char *key, int key_len)
{
    3d40:	2f 92       	push	r2
    3d42:	3f 92       	push	r3
    3d44:	4f 92       	push	r4
    3d46:	5f 92       	push	r5
    3d48:	6f 92       	push	r6
    3d4a:	7f 92       	push	r7
    3d4c:	8f 92       	push	r8
    3d4e:	9f 92       	push	r9
    3d50:	af 92       	push	r10
    3d52:	bf 92       	push	r11
    3d54:	cf 92       	push	r12
    3d56:	df 92       	push	r13
    3d58:	ef 92       	push	r14
    3d5a:	ff 92       	push	r15
    3d5c:	0f 93       	push	r16
    3d5e:	1f 93       	push	r17
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	cd b7       	in	r28, 0x3d	; 61
    3d66:	de b7       	in	r29, 0x3e	; 62
    3d68:	c0 5c       	subi	r28, 0xC0	; 192
    3d6a:	d1 09       	sbc	r29, r1
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	f8 94       	cli
    3d70:	de bf       	out	0x3e, r29	; 62
    3d72:	0f be       	out	0x3f, r0	; 63
    3d74:	cd bf       	out	0x3d, r28	; 61
    3d76:	7c 01       	movw	r14, r24
    3d78:	5b 01       	movw	r10, r22
    3d7a:	3a 01       	movw	r6, r20
    3d7c:	89 01       	movw	r16, r18
  unsigned char k_ipad[USHA_Max_Message_Block_Size];

  /* temporary buffer when keylen > blocksize */
  unsigned char tempkey[USHAMaxHashSize];

  if (!context) return shaNull;
    3d7e:	00 97       	sbiw	r24, 0x00	; 0
    3d80:	09 f4       	brne	.+2      	; 0x3d84 <hmacReset+0x44>
    3d82:	87 c0       	rjmp	.+270    	; 0x3e92 <hmacReset+0x152>
  context->Computed = 0;
    3d84:	fc 01       	movw	r30, r24
    3d86:	ea 50       	subi	r30, 0x0A	; 10
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	11 82       	std	Z+1, r1	; 0x01
    3d8c:	10 82       	st	Z, r1
  context->Corrupted = shaSuccess;
    3d8e:	2c 01       	movw	r4, r24
    3d90:	88 ef       	ldi	r24, 0xF8	; 248
    3d92:	48 0e       	add	r4, r24
    3d94:	51 1c       	adc	r5, r1
    3d96:	f2 01       	movw	r30, r4
    3d98:	11 82       	std	Z+1, r1	; 0x01
    3d9a:	10 82       	st	Z, r1

  blocksize = context->blockSize = USHABlockSize(whichSha);
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <USHABlockSize>
    3da2:	4c 01       	movw	r8, r24
    3da4:	f7 01       	movw	r30, r14
    3da6:	95 83       	std	Z+5, r25	; 0x05
    3da8:	84 83       	std	Z+4, r24	; 0x04
  hashsize = context->hashSize = USHAHashSize(whichSha);
    3daa:	c5 01       	movw	r24, r10
    3dac:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <USHAHashSize>
    3db0:	1c 01       	movw	r2, r24
    3db2:	f7 01       	movw	r30, r14
    3db4:	82 83       	std	Z+2, r24	; 0x02
    3db6:	33 82       	std	Z+3, r3	; 0x03
  context->whichSha = whichSha;
    3db8:	b1 82       	std	Z+1, r11	; 0x01
    3dba:	a0 82       	st	Z, r10
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	01 96       	adiw	r24, 0x01	; 1
    3dc0:	6c 01       	movw	r12, r24

  /*
   * If key is longer than the hash blocksize,
   * reset it to key = HASH(key).
   */
  if (key_len > blocksize) {
    3dc2:	80 16       	cp	r8, r16
    3dc4:	91 06       	cpc	r9, r17
    3dc6:	d4 f4       	brge	.+52     	; 0x3dfc <hmacReset+0xbc>
    USHAContext tcontext;
    int err = USHAReset(&tcontext, whichSha) ||
    3dc8:	b5 01       	movw	r22, r10
    3dca:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <USHAReset>
              USHAInput(&tcontext, key, key_len) ||
    3dce:	89 2b       	or	r24, r25
    3dd0:	09 f0       	breq	.+2      	; 0x3dd4 <hmacReset+0x94>
    3dd2:	5f c0       	rjmp	.+190    	; 0x3e92 <hmacReset+0x152>
    3dd4:	a8 01       	movw	r20, r16
    3dd6:	b3 01       	movw	r22, r6
    3dd8:	c6 01       	movw	r24, r12
    3dda:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <USHAInput>
   * If key is longer than the hash blocksize,
   * reset it to key = HASH(key).
   */
  if (key_len > blocksize) {
    USHAContext tcontext;
    int err = USHAReset(&tcontext, whichSha) ||
    3dde:	89 2b       	or	r24, r25
    3de0:	09 f0       	breq	.+2      	; 0x3de4 <hmacReset+0xa4>
    3de2:	57 c0       	rjmp	.+174    	; 0x3e92 <hmacReset+0x152>
              USHAInput(&tcontext, key, key_len) ||
              USHAResult(&tcontext, tempkey);
    3de4:	3e 01       	movw	r6, r28
    3de6:	91 e8       	ldi	r25, 0x81	; 129
    3de8:	69 0e       	add	r6, r25
    3dea:	71 1c       	adc	r7, r1
    3dec:	b3 01       	movw	r22, r6
    3dee:	c6 01       	movw	r24, r12
    3df0:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <USHAResult>
   * reset it to key = HASH(key).
   */
  if (key_len > blocksize) {
    USHAContext tcontext;
    int err = USHAReset(&tcontext, whichSha) ||
              USHAInput(&tcontext, key, key_len) ||
    3df4:	89 2b       	or	r24, r25
    3df6:	09 f0       	breq	.+2      	; 0x3dfa <hmacReset+0xba>
    3df8:	4c c0       	rjmp	.+152    	; 0x3e92 <hmacReset+0x152>
              USHAResult(&tcontext, tempkey);
    if (err != shaSuccess) return err;

    key = tempkey;
    key_len = hashsize;
    3dfa:	81 01       	movw	r16, r2
    3dfc:	b3 01       	movw	r22, r6
    3dfe:	97 01       	movw	r18, r14
    3e00:	2a 58       	subi	r18, 0x8A	; 138
    3e02:	3f 4f       	sbci	r19, 0xFF	; 255
   * opad is the byte 0x5c repeated blocksize times,
   * and text is the data being protected.
   */

  /* store key into the pads, XOR'd with ipad and opad values */
  for (i = 0; i < key_len; i++) {
    3e04:	d6 01       	movw	r26, r12
    k_ipad[i] = key[i] ^ 0x36;
    3e06:	46 e3       	ldi	r20, 0x36	; 54
    context->k_opad[i] = key[i] ^ 0x5c;
    3e08:	5c e5       	ldi	r21, 0x5C	; 92
   * opad is the byte 0x5c repeated blocksize times,
   * and text is the data being protected.
   */

  /* store key into the pads, XOR'd with ipad and opad values */
  for (i = 0; i < key_len; i++) {
    3e0a:	cd 01       	movw	r24, r26
    3e0c:	8c 19       	sub	r24, r12
    3e0e:	9d 09       	sbc	r25, r13
    3e10:	80 17       	cp	r24, r16
    3e12:	91 07       	cpc	r25, r17
    3e14:	5c f4       	brge	.+22     	; 0x3e2c <hmacReset+0xec>
    k_ipad[i] = key[i] ^ 0x36;
    3e16:	fb 01       	movw	r30, r22
    3e18:	81 91       	ld	r24, Z+
    3e1a:	bf 01       	movw	r22, r30
    3e1c:	98 2f       	mov	r25, r24
    3e1e:	94 27       	eor	r25, r20
    3e20:	9d 93       	st	X+, r25
    context->k_opad[i] = key[i] ^ 0x5c;
    3e22:	85 27       	eor	r24, r21
    3e24:	f9 01       	movw	r30, r18
    3e26:	81 93       	st	Z+, r24
    3e28:	9f 01       	movw	r18, r30
    3e2a:	ef cf       	rjmp	.-34     	; 0x3e0a <hmacReset+0xca>
    3e2c:	17 ff       	sbrs	r17, 7
    3e2e:	02 c0       	rjmp	.+4      	; 0x3e34 <hmacReset+0xf4>
    3e30:	00 e0       	ldi	r16, 0x00	; 0
    3e32:	10 e0       	ldi	r17, 0x00	; 0
    3e34:	d6 01       	movw	r26, r12
    3e36:	a0 0f       	add	r26, r16
    3e38:	b1 1f       	adc	r27, r17
    3e3a:	0a 58       	subi	r16, 0x8A	; 138
    3e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3e:	f7 01       	movw	r30, r14
    3e40:	e0 0f       	add	r30, r16
    3e42:	f1 1f       	adc	r31, r17
  }
  /* remaining pad bytes are '\0' XOR'd with ipad and opad values */
  for ( ; i < blocksize; i++) {
    k_ipad[i] = 0x36;
    3e44:	26 e3       	ldi	r18, 0x36	; 54
    context->k_opad[i] = 0x5c;
    3e46:	3c e5       	ldi	r19, 0x5C	; 92
  for (i = 0; i < key_len; i++) {
    k_ipad[i] = key[i] ^ 0x36;
    context->k_opad[i] = key[i] ^ 0x5c;
  }
  /* remaining pad bytes are '\0' XOR'd with ipad and opad values */
  for ( ; i < blocksize; i++) {
    3e48:	cd 01       	movw	r24, r26
    3e4a:	8c 19       	sub	r24, r12
    3e4c:	9d 09       	sbc	r25, r13
    3e4e:	88 15       	cp	r24, r8
    3e50:	99 05       	cpc	r25, r9
    3e52:	1c f4       	brge	.+6      	; 0x3e5a <hmacReset+0x11a>
    k_ipad[i] = 0x36;
    3e54:	2d 93       	st	X+, r18
    context->k_opad[i] = 0x5c;
    3e56:	31 93       	st	Z+, r19
    3e58:	f7 cf       	rjmp	.-18     	; 0x3e48 <hmacReset+0x108>
  }

  /* perform inner hash */
  /* init context for 1st pass */
  ret = USHAReset(&context->shaContext, whichSha) ||
    3e5a:	f6 e0       	ldi	r31, 0x06	; 6
    3e5c:	ef 0e       	add	r14, r31
    3e5e:	f1 1c       	adc	r15, r1
    3e60:	b5 01       	movw	r22, r10
    3e62:	c7 01       	movw	r24, r14
    3e64:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <USHAReset>
    3e68:	89 2b       	or	r24, r25
    3e6a:	69 f4       	brne	.+26     	; 0x3e86 <hmacReset+0x146>
        /* and start with inner pad */
        USHAInput(&context->shaContext, k_ipad, blocksize);
    3e6c:	a4 01       	movw	r20, r8
    3e6e:	b6 01       	movw	r22, r12
    3e70:	c7 01       	movw	r24, r14
    3e72:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <USHAInput>
    context->k_opad[i] = 0x5c;
  }

  /* perform inner hash */
  /* init context for 1st pass */
  ret = USHAReset(&context->shaContext, whichSha) ||
    3e76:	31 e0       	ldi	r19, 0x01	; 1
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	89 2b       	or	r24, r25
    3e7c:	09 f4       	brne	.+2      	; 0x3e80 <hmacReset+0x140>
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	83 2f       	mov	r24, r19
    3e82:	92 2f       	mov	r25, r18
    3e84:	02 c0       	rjmp	.+4      	; 0x3e8a <hmacReset+0x14a>
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	90 e0       	ldi	r25, 0x00	; 0
        /* and start with inner pad */
        USHAInput(&context->shaContext, k_ipad, blocksize);
  return context->Corrupted = ret;
    3e8a:	f2 01       	movw	r30, r4
    3e8c:	80 83       	st	Z, r24
    3e8e:	91 83       	std	Z+1, r25	; 0x01
    3e90:	02 c0       	rjmp	.+4      	; 0x3e96 <hmacReset+0x156>
  if (key_len > blocksize) {
    USHAContext tcontext;
    int err = USHAReset(&tcontext, whichSha) ||
              USHAInput(&tcontext, key, key_len) ||
              USHAResult(&tcontext, tempkey);
    if (err != shaSuccess) return err;
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	90 e0       	ldi	r25, 0x00	; 0
  /* init context for 1st pass */
  ret = USHAReset(&context->shaContext, whichSha) ||
        /* and start with inner pad */
        USHAInput(&context->shaContext, k_ipad, blocksize);
  return context->Corrupted = ret;
}
    3e96:	c0 54       	subi	r28, 0x40	; 64
    3e98:	df 4f       	sbci	r29, 0xFF	; 255
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	cd bf       	out	0x3d, r28	; 61
    3ea4:	df 91       	pop	r29
    3ea6:	cf 91       	pop	r28
    3ea8:	1f 91       	pop	r17
    3eaa:	0f 91       	pop	r16
    3eac:	ff 90       	pop	r15
    3eae:	ef 90       	pop	r14
    3eb0:	df 90       	pop	r13
    3eb2:	cf 90       	pop	r12
    3eb4:	bf 90       	pop	r11
    3eb6:	af 90       	pop	r10
    3eb8:	9f 90       	pop	r9
    3eba:	8f 90       	pop	r8
    3ebc:	7f 90       	pop	r7
    3ebe:	6f 90       	pop	r6
    3ec0:	5f 90       	pop	r5
    3ec2:	4f 90       	pop	r4
    3ec4:	3f 90       	pop	r3
    3ec6:	2f 90       	pop	r2
    3ec8:	08 95       	ret

00003eca <hmacInput>:
 *      sha Error Code.
 *
 */
int hmacInput(HMACContext *context, const unsigned char *text,
    int text_len)
{
    3eca:	cf 93       	push	r28
    3ecc:	df 93       	push	r29
    3ece:	9c 01       	movw	r18, r24
  if (!context) return shaNull;
    3ed0:	00 97       	sbiw	r24, 0x00	; 0
    3ed2:	c1 f0       	breq	.+48     	; 0x3f04 <hmacInput+0x3a>
  if (context->Corrupted) return context->Corrupted;
    3ed4:	ec 01       	movw	r28, r24
    3ed6:	c8 50       	subi	r28, 0x08	; 8
    3ed8:	df 4f       	sbci	r29, 0xFF	; 255
    3eda:	88 81       	ld	r24, Y
    3edc:	99 81       	ldd	r25, Y+1	; 0x01
    3ede:	00 97       	sbiw	r24, 0x00	; 0
    3ee0:	99 f4       	brne	.+38     	; 0x3f08 <hmacInput+0x3e>
  if (context->Computed) return context->Corrupted = shaStateError;
    3ee2:	f9 01       	movw	r30, r18
    3ee4:	ea 50       	subi	r30, 0x0A	; 10
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	89 2b       	or	r24, r25
    3eee:	19 f0       	breq	.+6      	; 0x3ef6 <hmacInput+0x2c>
    3ef0:	83 e0       	ldi	r24, 0x03	; 3
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	04 c0       	rjmp	.+8      	; 0x3efe <hmacInput+0x34>
    3ef6:	c9 01       	movw	r24, r18
  /* then text of datagram */
  return context->Corrupted =
    USHAInput(&context->shaContext, text, text_len);
    3ef8:	06 96       	adiw	r24, 0x06	; 6
    3efa:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <USHAInput>
{
  if (!context) return shaNull;
  if (context->Corrupted) return context->Corrupted;
  if (context->Computed) return context->Corrupted = shaStateError;
  /* then text of datagram */
  return context->Corrupted =
    3efe:	99 83       	std	Y+1, r25	; 0x01
    3f00:	88 83       	st	Y, r24
    3f02:	02 c0       	rjmp	.+4      	; 0x3f08 <hmacInput+0x3e>
 *
 */
int hmacInput(HMACContext *context, const unsigned char *text,
    int text_len)
{
  if (!context) return shaNull;
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	90 e0       	ldi	r25, 0x00	; 0
  if (context->Corrupted) return context->Corrupted;
  if (context->Computed) return context->Corrupted = shaStateError;
  /* then text of datagram */
  return context->Corrupted =
    USHAInput(&context->shaContext, text, text_len);
}
    3f08:	df 91       	pop	r29
    3f0a:	cf 91       	pop	r28
    3f0c:	08 95       	ret

00003f0e <hmacResult>:
 * Returns:
 *   sha Error Code.
 *
 */
int hmacResult(HMACContext *context, uint8_t *digest)
{
    3f0e:	af 92       	push	r10
    3f10:	bf 92       	push	r11
    3f12:	cf 92       	push	r12
    3f14:	df 92       	push	r13
    3f16:	ef 92       	push	r14
    3f18:	ff 92       	push	r15
    3f1a:	0f 93       	push	r16
    3f1c:	1f 93       	push	r17
    3f1e:	cf 93       	push	r28
    3f20:	df 93       	push	r29
  int ret;
  if (!context) return shaNull;
    3f22:	00 97       	sbiw	r24, 0x00	; 0
    3f24:	09 f4       	brne	.+2      	; 0x3f28 <hmacResult+0x1a>
    3f26:	57 c0       	rjmp	.+174    	; 0x3fd6 <hmacResult+0xc8>
  if (context->Corrupted) return context->Corrupted;
    3f28:	8c 01       	movw	r16, r24
    3f2a:	08 50       	subi	r16, 0x08	; 8
    3f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2e:	f8 01       	movw	r30, r16
    3f30:	20 81       	ld	r18, Z
    3f32:	31 81       	ldd	r19, Z+1	; 0x01
    3f34:	21 15       	cp	r18, r1
    3f36:	31 05       	cpc	r19, r1
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <hmacResult+0x2e>
    3f3a:	4f c0       	rjmp	.+158    	; 0x3fda <hmacResult+0xcc>
  if (context->Computed) return context->Corrupted = shaStateError;
    3f3c:	7c 01       	movw	r14, r24
    3f3e:	f6 ef       	ldi	r31, 0xF6	; 246
    3f40:	ef 0e       	add	r14, r31
    3f42:	f1 1c       	adc	r15, r1
    3f44:	f7 01       	movw	r30, r14
    3f46:	20 81       	ld	r18, Z
    3f48:	31 81       	ldd	r19, Z+1	; 0x01
    3f4a:	23 2b       	or	r18, r19
    3f4c:	41 f0       	breq	.+16     	; 0x3f5e <hmacResult+0x50>
    3f4e:	83 e0       	ldi	r24, 0x03	; 3
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	f8 01       	movw	r30, r16
    3f54:	91 83       	std	Z+1, r25	; 0x01
    3f56:	80 83       	st	Z, r24
    3f58:	23 e0       	ldi	r18, 0x03	; 3
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	3e c0       	rjmp	.+124    	; 0x3fda <hmacResult+0xcc>
    3f5e:	5b 01       	movw	r10, r22
    3f60:	ec 01       	movw	r28, r24

  /* finish up 1st pass */
  /* (Use digest here as a temporary buffer.) */
  ret =
    USHAResult(&context->shaContext, digest) ||
    3f62:	6c 01       	movw	r12, r24
    3f64:	f6 e0       	ldi	r31, 0x06	; 6
    3f66:	cf 0e       	add	r12, r31
    3f68:	d1 1c       	adc	r13, r1
    3f6a:	c6 01       	movw	r24, r12
    3f6c:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <USHAResult>
         /* start with outer pad */
         USHAInput(&context->shaContext, context->k_opad,
                   context->blockSize) ||

         /* then results of 1st hash */
         USHAInput(&context->shaContext, digest, context->hashSize) ||
    3f70:	89 2b       	or	r24, r25
    3f72:	19 f0       	breq	.+6      	; 0x3f7a <hmacResult+0x6c>
    3f74:	91 e0       	ldi	r25, 0x01	; 1
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	23 c0       	rjmp	.+70     	; 0x3fc0 <hmacResult+0xb2>
  ret =
    USHAResult(&context->shaContext, digest) ||

         /* perform outer SHA */
         /* init context for 2nd pass */
         USHAReset(&context->shaContext, context->whichSha) ||
    3f7a:	68 81       	ld	r22, Y
    3f7c:	79 81       	ldd	r23, Y+1	; 0x01
    3f7e:	c6 01       	movw	r24, r12
    3f80:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <USHAReset>
  if (context->Computed) return context->Corrupted = shaStateError;

  /* finish up 1st pass */
  /* (Use digest here as a temporary buffer.) */
  ret =
    USHAResult(&context->shaContext, digest) ||
    3f84:	89 2b       	or	r24, r25
    3f86:	b1 f7       	brne	.-20     	; 0x3f74 <hmacResult+0x66>
         /* perform outer SHA */
         /* init context for 2nd pass */
         USHAReset(&context->shaContext, context->whichSha) ||

         /* start with outer pad */
         USHAInput(&context->shaContext, context->k_opad,
    3f88:	4c 81       	ldd	r20, Y+4	; 0x04
    3f8a:	5d 81       	ldd	r21, Y+5	; 0x05
    3f8c:	be 01       	movw	r22, r28
    3f8e:	6a 58       	subi	r22, 0x8A	; 138
    3f90:	7f 4f       	sbci	r23, 0xFF	; 255
    3f92:	c6 01       	movw	r24, r12
    3f94:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <USHAInput>
  ret =
    USHAResult(&context->shaContext, digest) ||

         /* perform outer SHA */
         /* init context for 2nd pass */
         USHAReset(&context->shaContext, context->whichSha) ||
    3f98:	89 2b       	or	r24, r25
    3f9a:	61 f7       	brne	.-40     	; 0x3f74 <hmacResult+0x66>
         /* start with outer pad */
         USHAInput(&context->shaContext, context->k_opad,
                   context->blockSize) ||

         /* then results of 1st hash */
         USHAInput(&context->shaContext, digest, context->hashSize) ||
    3f9c:	4a 81       	ldd	r20, Y+2	; 0x02
    3f9e:	5b 81       	ldd	r21, Y+3	; 0x03
    3fa0:	b5 01       	movw	r22, r10
    3fa2:	c6 01       	movw	r24, r12
    3fa4:	0e 94 d0 27 	call	0x4fa0	; 0x4fa0 <USHAInput>
         /* init context for 2nd pass */
         USHAReset(&context->shaContext, context->whichSha) ||

         /* start with outer pad */
         USHAInput(&context->shaContext, context->k_opad,
                   context->blockSize) ||
    3fa8:	89 2b       	or	r24, r25
    3faa:	21 f7       	brne	.-56     	; 0x3f74 <hmacResult+0x66>

         /* then results of 1st hash */
         USHAInput(&context->shaContext, digest, context->hashSize) ||
         /* finish up 2nd pass */
         USHAResult(&context->shaContext, digest);
    3fac:	b5 01       	movw	r22, r10
    3fae:	c6 01       	movw	r24, r12
    3fb0:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <USHAResult>
         /* start with outer pad */
         USHAInput(&context->shaContext, context->k_opad,
                   context->blockSize) ||

         /* then results of 1st hash */
         USHAInput(&context->shaContext, digest, context->hashSize) ||
    3fb4:	31 e0       	ldi	r19, 0x01	; 1
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	89 2b       	or	r24, r25
    3fba:	09 f4       	brne	.+2      	; 0x3fbe <hmacResult+0xb0>
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	c9 01       	movw	r24, r18
         /* finish up 2nd pass */
         USHAResult(&context->shaContext, digest);

  context->Computed = 1;
    3fc0:	21 e0       	ldi	r18, 0x01	; 1
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	f7 01       	movw	r30, r14
    3fc6:	31 83       	std	Z+1, r19	; 0x01
    3fc8:	20 83       	st	Z, r18
  return context->Corrupted = ret;
    3fca:	f8 01       	movw	r30, r16
    3fcc:	90 83       	st	Z, r25
    3fce:	81 83       	std	Z+1, r24	; 0x01
    3fd0:	29 2f       	mov	r18, r25
    3fd2:	38 2f       	mov	r19, r24
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <hmacResult+0xcc>
 *
 */
int hmacResult(HMACContext *context, uint8_t *digest)
{
  int ret;
  if (!context) return shaNull;
    3fd6:	21 e0       	ldi	r18, 0x01	; 1
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
         /* finish up 2nd pass */
         USHAResult(&context->shaContext, digest);

  context->Computed = 1;
  return context->Corrupted = ret;
}
    3fda:	c9 01       	movw	r24, r18
    3fdc:	df 91       	pop	r29
    3fde:	cf 91       	pop	r28
    3fe0:	1f 91       	pop	r17
    3fe2:	0f 91       	pop	r16
    3fe4:	ff 90       	pop	r15
    3fe6:	ef 90       	pop	r14
    3fe8:	df 90       	pop	r13
    3fea:	cf 90       	pop	r12
    3fec:	bf 90       	pop	r11
    3fee:	af 90       	pop	r10
    3ff0:	08 95       	ret

00003ff2 <hmac>:

int hmac(SHAversion whichSha,
    const unsigned char *message_array, int length,
    const unsigned char *key, int key_len,
    uint8_t digest[USHAMaxHashSize])
{
    3ff2:	af 92       	push	r10
    3ff4:	bf 92       	push	r11
    3ff6:	cf 92       	push	r12
    3ff8:	df 92       	push	r13
    3ffa:	ef 92       	push	r14
    3ffc:	ff 92       	push	r15
    3ffe:	0f 93       	push	r16
    4000:	1f 93       	push	r17
    4002:	cf 93       	push	r28
    4004:	df 93       	push	r29
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	ca 5f       	subi	r28, 0xFA	; 250
    400c:	d1 09       	sbc	r29, r1
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	f8 94       	cli
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	cd bf       	out	0x3d, r28	; 61
    4018:	6b 01       	movw	r12, r22
    401a:	5a 01       	movw	r10, r20
    401c:	a9 01       	movw	r20, r18
    401e:	98 01       	movw	r18, r16
  HMACContext context;
  return hmacReset(&context, whichSha, key, key_len) ||
    4020:	bc 01       	movw	r22, r24
    4022:	ce 01       	movw	r24, r28
    4024:	01 96       	adiw	r24, 0x01	; 1
    4026:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <hmacReset>
         hmacInput(&context, message_array, length) ||
    402a:	89 2b       	or	r24, r25
    402c:	19 f0       	breq	.+6      	; 0x4034 <hmac+0x42>
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	14 c0       	rjmp	.+40     	; 0x405c <hmac+0x6a>
    4034:	a5 01       	movw	r20, r10
    4036:	b6 01       	movw	r22, r12
    4038:	ce 01       	movw	r24, r28
    403a:	01 96       	adiw	r24, 0x01	; 1
    403c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <hmacInput>
    const unsigned char *message_array, int length,
    const unsigned char *key, int key_len,
    uint8_t digest[USHAMaxHashSize])
{
  HMACContext context;
  return hmacReset(&context, whichSha, key, key_len) ||
    4040:	89 2b       	or	r24, r25
    4042:	a9 f7       	brne	.-22     	; 0x402e <hmac+0x3c>
         hmacInput(&context, message_array, length) ||
         hmacResult(&context, digest);
    4044:	b7 01       	movw	r22, r14
    4046:	ce 01       	movw	r24, r28
    4048:	01 96       	adiw	r24, 0x01	; 1
    404a:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <hmacResult>
    const unsigned char *key, int key_len,
    uint8_t digest[USHAMaxHashSize])
{
  HMACContext context;
  return hmacReset(&context, whichSha, key, key_len) ||
         hmacInput(&context, message_array, length) ||
    404e:	31 e0       	ldi	r19, 0x01	; 1
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	89 2b       	or	r24, r25
    4054:	09 f4       	brne	.+2      	; 0x4058 <hmac+0x66>
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	83 2f       	mov	r24, r19
    405a:	92 2f       	mov	r25, r18
         hmacResult(&context, digest);
}
    405c:	c6 50       	subi	r28, 0x06	; 6
    405e:	df 4f       	sbci	r29, 0xFF	; 255
    4060:	0f b6       	in	r0, 0x3f	; 63
    4062:	f8 94       	cli
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	0f be       	out	0x3f, r0	; 63
    4068:	cd bf       	out	0x3d, r28	; 61
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	1f 91       	pop	r17
    4070:	0f 91       	pop	r16
    4072:	ff 90       	pop	r15
    4074:	ef 90       	pop	r14
    4076:	df 90       	pop	r13
    4078:	cf 90       	pop	r12
    407a:	bf 90       	pop	r11
    407c:	af 90       	pop	r10
    407e:	08 95       	ret

00004080 <puf_extract>:


void puf_extract(
    uint8_t *puf_response,
    uint8_t *key)
{
    4080:	2f 92       	push	r2
    4082:	3f 92       	push	r3
    4084:	4f 92       	push	r4
    4086:	5f 92       	push	r5
    4088:	6f 92       	push	r6
    408a:	7f 92       	push	r7
    408c:	8f 92       	push	r8
    408e:	9f 92       	push	r9
    4090:	af 92       	push	r10
    4092:	bf 92       	push	r11
    4094:	cf 92       	push	r12
    4096:	df 92       	push	r13
    4098:	ef 92       	push	r14
    409a:	ff 92       	push	r15
    409c:	0f 93       	push	r16
    409e:	1f 93       	push	r17
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
    40a4:	cd b7       	in	r28, 0x3d	; 61
    40a6:	de b7       	in	r29, 0x3e	; 62
    40a8:	c9 50       	subi	r28, 0x09	; 9
    40aa:	d1 40       	sbci	r29, 0x01	; 1
    40ac:	0f b6       	in	r0, 0x3f	; 63
    40ae:	f8 94       	cli
    40b0:	de bf       	out	0x3e, r29	; 62
    40b2:	0f be       	out	0x3f, r0	; 63
    40b4:	cd bf       	out	0x3d, r28	; 61
    40b6:	2c 01       	movw	r4, r24
    40b8:	3b 01       	movw	r6, r22
    40ba:	8c 01       	movw	r16, r24

        // codifica di nuovo il secret symbol
        encode(&cs, codeword);

        // converti la codeword in bytes
        for(uint16_t j = 0U; j < 16; j++)
    40bc:	c1 2c       	mov	r12, r1
    40be:	d1 2c       	mov	r13, r1
    40c0:	ce 01       	movw	r24, r28
    40c2:	01 96       	adiw	r24, 0x01	; 1
    40c4:	7c 01       	movw	r14, r24
#endif

        // prepara il blocco di codeword da 128 bit
        for(uint16_t j = 0U; j < 16; j++)
        {
            HexToBin_int(puf_response[i*16 + j] ^ pgm_read_byte(&helper_data[i*16 + j]), &codeword[j * 8]);
    40c6:	4c 01       	movw	r8, r24
    40c8:	18 01       	movw	r2, r16
    40ca:	a1 2c       	mov	r10, r1
    40cc:	b1 2c       	mov	r11, r1
    40ce:	f1 01       	movw	r30, r2
    40d0:	81 91       	ld	r24, Z+
    40d2:	1f 01       	movw	r2, r30
    40d4:	f6 01       	movw	r30, r12
    40d6:	ea 0d       	add	r30, r10
    40d8:	fb 1d       	adc	r31, r11
    40da:	e8 59       	subi	r30, 0x98	; 152
    40dc:	ff 4c       	sbci	r31, 0xCF	; 207
    40de:	e4 91       	lpm	r30, Z
    40e0:	b4 01       	movw	r22, r8
    40e2:	8e 27       	eor	r24, r30
    40e4:	0e 94 8e 2a 	call	0x551c	; 0x551c <HexToBin_int>
        usart_tx_hex(i);
        usart_tx_string("\n\r");
#endif

        // prepara il blocco di codeword da 128 bit
        for(uint16_t j = 0U; j < 16; j++)
    40e8:	ff ef       	ldi	r31, 0xFF	; 255
    40ea:	af 1a       	sub	r10, r31
    40ec:	bf 0a       	sbc	r11, r31
    40ee:	80 e1       	ldi	r24, 0x10	; 16
    40f0:	88 0e       	add	r8, r24
    40f2:	91 1c       	adc	r9, r1
    40f4:	90 e1       	ldi	r25, 0x10	; 16
    40f6:	a9 16       	cp	r10, r25
    40f8:	b1 04       	cpc	r11, r1
    40fa:	49 f7       	brne	.-46     	; 0x40ce <puf_extract+0x4e>
        {
            HexToBin_int(puf_response[i*16 + j] ^ pgm_read_byte(&helper_data[i*16 + j]), &codeword[j * 8]);
        }

        // decodifica il risultato della XOR
        decode(codeword, cs_bin);
    40fc:	be 01       	movw	r22, r28
    40fe:	6f 5f       	subi	r22, 0xFF	; 255
    4100:	7e 4f       	sbci	r23, 0xFE	; 254
    4102:	c7 01       	movw	r24, r14
    4104:	0e 94 df 29 	call	0x53be	; 0x53be <decode>

        // converti il decoded symbol da bin a byte
        cs = BinToHex(cs_bin);
    4108:	ce 01       	movw	r24, r28
    410a:	8f 5f       	subi	r24, 0xFF	; 255
    410c:	9e 4f       	sbci	r25, 0xFE	; 254
    410e:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <BinToHex>
    4112:	c7 5f       	subi	r28, 0xF7	; 247
    4114:	de 4f       	sbci	r29, 0xFE	; 254
    4116:	88 83       	st	Y, r24
    4118:	c9 50       	subi	r28, 0x09	; 9
    411a:	d1 40       	sbci	r29, 0x01	; 1

        // codifica di nuovo il secret symbol
        encode(&cs, codeword);
    411c:	b7 01       	movw	r22, r14
    411e:	ce 01       	movw	r24, r28
    4120:	87 5f       	subi	r24, 0xF7	; 247
    4122:	9e 4f       	sbci	r25, 0xFE	; 254
    4124:	0e 94 10 28 	call	0x5020	; 0x5020 <encode>
    4128:	48 01       	movw	r8, r16

        // converti la codeword in bytes
        for(uint16_t j = 0U; j < 16; j++)
    412a:	a1 2c       	mov	r10, r1
    412c:	b1 2c       	mov	r11, r1
        {
            codeword_bytes[j] = cw_to_byte(&codeword[j * 8]);
    412e:	c7 01       	movw	r24, r14
    4130:	0e 94 22 2b 	call	0x5644	; 0x5644 <cw_to_byte>

            // Recovered PUF Response = Codeword XOR Helper_Data
            puf_response[i*16 + j] = codeword_bytes[j] ^ pgm_read_byte(&helper_data[i*16 + j]);
    4134:	f6 01       	movw	r30, r12
    4136:	ea 0d       	add	r30, r10
    4138:	fb 1d       	adc	r31, r11
    413a:	e8 59       	subi	r30, 0x98	; 152
    413c:	ff 4c       	sbci	r31, 0xCF	; 207
    413e:	e4 91       	lpm	r30, Z
    4140:	8e 27       	eor	r24, r30
    4142:	f4 01       	movw	r30, r8
    4144:	81 93       	st	Z+, r24
    4146:	4f 01       	movw	r8, r30

        // codifica di nuovo il secret symbol
        encode(&cs, codeword);

        // converti la codeword in bytes
        for(uint16_t j = 0U; j < 16; j++)
    4148:	ff ef       	ldi	r31, 0xFF	; 255
    414a:	af 1a       	sub	r10, r31
    414c:	bf 0a       	sbc	r11, r31
    414e:	80 e1       	ldi	r24, 0x10	; 16
    4150:	e8 0e       	add	r14, r24
    4152:	f1 1c       	adc	r15, r1
    4154:	90 e1       	ldi	r25, 0x10	; 16
    4156:	a9 16       	cp	r10, r25
    4158:	b1 04       	cpc	r11, r1
    415a:	49 f7       	brne	.-46     	; 0x412e <puf_extract+0xae>
    415c:	00 5f       	subi	r16, 0xF0	; 240
    415e:	1f 4f       	sbci	r17, 0xFF	; 255
    4160:	e0 e1       	ldi	r30, 0x10	; 16
    4162:	ce 0e       	add	r12, r30
    4164:	d1 1c       	adc	r13, r1
        usart_tx_hex(pgm_read_byte(&helper_data[i]));
    }
    usart_tx_ch('\n');
    usart_tx_ch('\r');
#endif
    for(uint16_t i = 0U; i < CS_LEN_BYTE; i++)
    4166:	f0 e3       	ldi	r31, 0x30	; 48
    4168:	cf 16       	cp	r12, r31
    416a:	f1 e0       	ldi	r31, 0x01	; 1
    416c:	df 06       	cpc	r13, r31
    416e:	09 f0       	breq	.+2      	; 0x4172 <puf_extract+0xf2>
    4170:	a7 cf       	rjmp	.-178    	; 0x40c0 <puf_extract+0x40>
    usart_tx_buffer(puf_response, 304U);
    usart_tx_string("Start hashing\n\r");
#endif

    // Ricostruisci la chiave
    dm_hash(puf_response, key);
    4172:	b3 01       	movw	r22, r6
    4174:	c2 01       	movw	r24, r4
    4176:	0e 94 39 2b 	call	0x5672	; 0x5672 <dm_hash>

#ifdef FE_DEBUG
    usart_tx_string("key:\n\r");
    usart_tx_buffer(key, 16);
#endif
}
    417a:	c7 5f       	subi	r28, 0xF7	; 247
    417c:	de 4f       	sbci	r29, 0xFE	; 254
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	f8 94       	cli
    4182:	de bf       	out	0x3e, r29	; 62
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	cd bf       	out	0x3d, r28	; 61
    4188:	df 91       	pop	r29
    418a:	cf 91       	pop	r28
    418c:	1f 91       	pop	r17
    418e:	0f 91       	pop	r16
    4190:	ff 90       	pop	r15
    4192:	ef 90       	pop	r14
    4194:	df 90       	pop	r13
    4196:	cf 90       	pop	r12
    4198:	bf 90       	pop	r11
    419a:	af 90       	pop	r10
    419c:	9f 90       	pop	r9
    419e:	8f 90       	pop	r8
    41a0:	7f 90       	pop	r7
    41a2:	6f 90       	pop	r6
    41a4:	5f 90       	pop	r5
    41a6:	4f 90       	pop	r4
    41a8:	3f 90       	pop	r3
    41aa:	2f 90       	pop	r2
    41ac:	08 95       	ret

000041ae <SHA224_256ProcessMessageBlock>:
 *   Many of the variable names in this code, especially the
 *   single character names, were used because those were the
 *   names used in the Secure Hash Standard.
 */
static void SHA224_256ProcessMessageBlock(SHA256Context *context)
{
    41ae:	2f 92       	push	r2
    41b0:	3f 92       	push	r3
    41b2:	4f 92       	push	r4
    41b4:	5f 92       	push	r5
    41b6:	6f 92       	push	r6
    41b8:	7f 92       	push	r7
    41ba:	8f 92       	push	r8
    41bc:	9f 92       	push	r9
    41be:	af 92       	push	r10
    41c0:	bf 92       	push	r11
    41c2:	cf 92       	push	r12
    41c4:	df 92       	push	r13
    41c6:	ef 92       	push	r14
    41c8:	ff 92       	push	r15
    41ca:	0f 93       	push	r16
    41cc:	1f 93       	push	r17
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29
    41d2:	cd b7       	in	r28, 0x3d	; 61
    41d4:	de b7       	in	r29, 0x3e	; 62
    41d6:	c0 54       	subi	r28, 0x40	; 64
    41d8:	d1 40       	sbci	r29, 0x01	; 1
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	f8 94       	cli
    41de:	de bf       	out	0x3e, r29	; 62
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	cd bf       	out	0x3d, r28	; 61
    41e4:	1c 01       	movw	r2, r24
    41e6:	fc 01       	movw	r30, r24
    41e8:	8e 01       	movw	r16, r28
    41ea:	0f 5f       	subi	r16, 0xFF	; 255
    41ec:	1f 4f       	sbci	r17, 0xFF	; 255
    41ee:	cb 5e       	subi	r28, 0xEB	; 235
    41f0:	de 4f       	sbci	r29, 0xFE	; 254
    41f2:	19 83       	std	Y+1, r17	; 0x01
    41f4:	08 83       	st	Y, r16
    41f6:	c5 51       	subi	r28, 0x15	; 21
    41f8:	d1 40       	sbci	r29, 0x01	; 1
    41fa:	ac 01       	movw	r20, r24
    41fc:	40 5c       	subi	r20, 0xC0	; 192
    41fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4200:	98 01       	movw	r18, r16

  /*
   * Initialize the first 16 words in the array W
   */
  for (t = t4 = 0; t < 16; t++, t4 += 4)
    W[t] = (((uint32_t)context->Message_Block[t4]) << 24) |
    4202:	62 a5       	ldd	r22, Z+42	; 0x2a
    4204:	83 a5       	ldd	r24, Z+43	; 0x2b
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	a0 e0       	ldi	r26, 0x00	; 0
    420a:	b0 e0       	ldi	r27, 0x00	; 0
    420c:	dc 01       	movw	r26, r24
    420e:	99 27       	eor	r25, r25
    4210:	88 27       	eor	r24, r24
    4212:	b6 2b       	or	r27, r22
    4214:	65 a5       	ldd	r22, Z+45	; 0x2d
    4216:	86 2b       	or	r24, r22
    4218:	64 a5       	ldd	r22, Z+44	; 0x2c
    421a:	6c 01       	movw	r12, r24
    421c:	7d 01       	movw	r14, r26
    421e:	d6 2a       	or	r13, r22
    4220:	d9 01       	movw	r26, r18
    4222:	cd 92       	st	X+, r12
    4224:	dd 92       	st	X+, r13
    4226:	ed 92       	st	X+, r14
    4228:	fd 92       	st	X+, r15
    422a:	9d 01       	movw	r18, r26
    422c:	34 96       	adiw	r30, 0x04	; 4
  uint32_t   A, B, C, D, E, F, G, H;  /* Word buffers */

  /*
   * Initialize the first 16 words in the array W
   */
  for (t = t4 = 0; t < 16; t++, t4 += 4)
    422e:	4e 17       	cp	r20, r30
    4230:	5f 07       	cpc	r21, r31
    4232:	39 f7       	brne	.-50     	; 0x4202 <SHA224_256ProcessMessageBlock+0x54>
    4234:	8e 01       	movw	r16, r28
    4236:	0f 53       	subi	r16, 0x3F	; 63
    4238:	1f 4f       	sbci	r17, 0xFF	; 255
    423a:	cb 5e       	subi	r28, 0xEB	; 235
    423c:	de 4f       	sbci	r29, 0xFE	; 254
    423e:	e8 81       	ld	r30, Y
    4240:	f9 81       	ldd	r31, Y+1	; 0x01
    4242:	c5 51       	subi	r28, 0x15	; 21
    4244:	d1 40       	sbci	r29, 0x01	; 1
    4246:	cf 5f       	subi	r28, 0xFF	; 255
    4248:	de 4f       	sbci	r29, 0xFE	; 254
    424a:	f9 83       	std	Y+1, r31	; 0x01
    424c:	e8 83       	st	Y, r30
    424e:	c1 50       	subi	r28, 0x01	; 1
    4250:	d1 40       	sbci	r29, 0x01	; 1
    4252:	cf 5f       	subi	r28, 0xFF	; 255
    4254:	de 4f       	sbci	r29, 0xFE	; 254
    4256:	28 81       	ld	r18, Y
    4258:	39 81       	ldd	r19, Y+1	; 0x01
    425a:	c1 50       	subi	r28, 0x01	; 1
    425c:	d1 40       	sbci	r29, 0x01	; 1
    W[t] = (((uint32_t)context->Message_Block[t4]) << 24) |
           (((uint32_t)context->Message_Block[t4 + 1]) << 16) |
           (((uint32_t)context->Message_Block[t4 + 2]) << 8) |
           (((uint32_t)context->Message_Block[t4 + 3]));
  for (t = 16; t < 64; t++)
    W[t] = SHA256_sigma1(W[t-2]) + W[t-7] +
    425e:	d9 01       	movw	r26, r18
    4260:	d8 96       	adiw	r26, 0x38	; 56
    4262:	4d 91       	ld	r20, X+
    4264:	5d 91       	ld	r21, X+
    4266:	6d 91       	ld	r22, X+
    4268:	7c 91       	ld	r23, X
    426a:	db 97       	sbiw	r26, 0x3b	; 59
        SHA256_sigma0(W[t-15]) + W[t-16];
    426c:	14 96       	adiw	r26, 0x04	; 4
    426e:	8d 91       	ld	r24, X+
    4270:	9d 91       	ld	r25, X+
    4272:	0d 90       	ld	r0, X+
    4274:	bc 91       	ld	r27, X
    4276:	a0 2d       	mov	r26, r0
    4278:	f9 01       	movw	r30, r18
    427a:	34 96       	adiw	r30, 0x04	; 4
    427c:	cf 5f       	subi	r28, 0xFF	; 255
    427e:	de 4f       	sbci	r29, 0xFE	; 254
    4280:	f9 83       	std	Y+1, r31	; 0x01
    4282:	e8 83       	st	Y, r30
    4284:	c1 50       	subi	r28, 0x01	; 1
    4286:	d1 40       	sbci	r29, 0x01	; 1
    W[t] = (((uint32_t)context->Message_Block[t4]) << 24) |
           (((uint32_t)context->Message_Block[t4 + 1]) << 16) |
           (((uint32_t)context->Message_Block[t4 + 2]) << 8) |
           (((uint32_t)context->Message_Block[t4 + 3]));
  for (t = 16; t < 64; t++)
    W[t] = SHA256_sigma1(W[t-2]) + W[t-7] +
    4288:	4a 01       	movw	r8, r20
    428a:	5b 01       	movw	r10, r22
    428c:	ef e0       	ldi	r30, 0x0F	; 15
    428e:	88 0c       	add	r8, r8
    4290:	99 1c       	adc	r9, r9
    4292:	aa 1c       	adc	r10, r10
    4294:	bb 1c       	adc	r11, r11
    4296:	ea 95       	dec	r30
    4298:	d1 f7       	brne	.-12     	; 0x428e <SHA224_256ProcessMessageBlock+0xe0>
    429a:	6a 01       	movw	r12, r20
    429c:	7b 01       	movw	r14, r22
    429e:	f1 e1       	ldi	r31, 0x11	; 17
    42a0:	f6 94       	lsr	r15
    42a2:	e7 94       	ror	r14
    42a4:	d7 94       	ror	r13
    42a6:	c7 94       	ror	r12
    42a8:	fa 95       	dec	r31
    42aa:	d1 f7       	brne	.-12     	; 0x42a0 <SHA224_256ProcessMessageBlock+0xf2>
    42ac:	8c 28       	or	r8, r12
    42ae:	9d 28       	or	r9, r13
    42b0:	ae 28       	or	r10, r14
    42b2:	bf 28       	or	r11, r15
    42b4:	2a 01       	movw	r4, r20
    42b6:	3b 01       	movw	r6, r22
    42b8:	ed e0       	ldi	r30, 0x0D	; 13
    42ba:	44 0c       	add	r4, r4
    42bc:	55 1c       	adc	r5, r5
    42be:	66 1c       	adc	r6, r6
    42c0:	77 1c       	adc	r7, r7
    42c2:	ea 95       	dec	r30
    42c4:	d1 f7       	brne	.-12     	; 0x42ba <SHA224_256ProcessMessageBlock+0x10c>
    42c6:	6a 01       	movw	r12, r20
    42c8:	7b 01       	movw	r14, r22
    42ca:	f3 e1       	ldi	r31, 0x13	; 19
    42cc:	f6 94       	lsr	r15
    42ce:	e7 94       	ror	r14
    42d0:	d7 94       	ror	r13
    42d2:	c7 94       	ror	r12
    42d4:	fa 95       	dec	r31
    42d6:	d1 f7       	brne	.-12     	; 0x42cc <SHA224_256ProcessMessageBlock+0x11e>
    42d8:	c4 28       	or	r12, r4
    42da:	d5 28       	or	r13, r5
    42dc:	e6 28       	or	r14, r6
    42de:	f7 28       	or	r15, r7
    42e0:	8c 24       	eor	r8, r12
    42e2:	9d 24       	eor	r9, r13
    42e4:	ae 24       	eor	r10, r14
    42e6:	bf 24       	eor	r11, r15
    42e8:	ea e0       	ldi	r30, 0x0A	; 10
    42ea:	76 95       	lsr	r23
    42ec:	67 95       	ror	r22
    42ee:	57 95       	ror	r21
    42f0:	47 95       	ror	r20
    42f2:	ea 95       	dec	r30
    42f4:	d1 f7       	brne	.-12     	; 0x42ea <SHA224_256ProcessMessageBlock+0x13c>
    42f6:	48 25       	eor	r20, r8
    42f8:	59 25       	eor	r21, r9
    42fa:	6a 25       	eor	r22, r10
    42fc:	7b 25       	eor	r23, r11
    42fe:	f9 01       	movw	r30, r18
    4300:	84 a0       	ldd	r8, Z+36	; 0x24
    4302:	95 a0       	ldd	r9, Z+37	; 0x25
    4304:	a6 a0       	ldd	r10, Z+38	; 0x26
    4306:	b7 a0       	ldd	r11, Z+39	; 0x27
    4308:	c0 80       	ld	r12, Z
    430a:	d1 80       	ldd	r13, Z+1	; 0x01
    430c:	e2 80       	ldd	r14, Z+2	; 0x02
    430e:	f3 80       	ldd	r15, Z+3	; 0x03
    4310:	8c 0c       	add	r8, r12
    4312:	9d 1c       	adc	r9, r13
    4314:	ae 1c       	adc	r10, r14
    4316:	bf 1c       	adc	r11, r15
    4318:	84 0e       	add	r8, r20
    431a:	95 1e       	adc	r9, r21
    431c:	a6 1e       	adc	r10, r22
    431e:	b7 1e       	adc	r11, r23
    4320:	2c 01       	movw	r4, r24
    4322:	3d 01       	movw	r6, r26
    4324:	f7 e0       	ldi	r31, 0x07	; 7
    4326:	76 94       	lsr	r7
    4328:	67 94       	ror	r6
    432a:	57 94       	ror	r5
    432c:	47 94       	ror	r4
    432e:	fa 95       	dec	r31
    4330:	d1 f7       	brne	.-12     	; 0x4326 <SHA224_256ProcessMessageBlock+0x178>
    4332:	ac 01       	movw	r20, r24
    4334:	bd 01       	movw	r22, r26
    4336:	29 e1       	ldi	r18, 0x19	; 25
    4338:	44 0f       	add	r20, r20
    433a:	55 1f       	adc	r21, r21
    433c:	66 1f       	adc	r22, r22
    433e:	77 1f       	adc	r23, r23
    4340:	2a 95       	dec	r18
    4342:	d1 f7       	brne	.-12     	; 0x4338 <SHA224_256ProcessMessageBlock+0x18a>
    4344:	44 2a       	or	r4, r20
    4346:	55 2a       	or	r5, r21
    4348:	66 2a       	or	r6, r22
    434a:	77 2a       	or	r7, r23
    434c:	ac 01       	movw	r20, r24
    434e:	bd 01       	movw	r22, r26
    4350:	3e e0       	ldi	r19, 0x0E	; 14
    4352:	44 0f       	add	r20, r20
    4354:	55 1f       	adc	r21, r21
    4356:	66 1f       	adc	r22, r22
    4358:	77 1f       	adc	r23, r23
    435a:	3a 95       	dec	r19
    435c:	d1 f7       	brne	.-12     	; 0x4352 <SHA224_256ProcessMessageBlock+0x1a4>
    435e:	6c 01       	movw	r12, r24
    4360:	7d 01       	movw	r14, r26
    4362:	e2 e1       	ldi	r30, 0x12	; 18
    4364:	f6 94       	lsr	r15
    4366:	e7 94       	ror	r14
    4368:	d7 94       	ror	r13
    436a:	c7 94       	ror	r12
    436c:	ea 95       	dec	r30
    436e:	d1 f7       	brne	.-12     	; 0x4364 <SHA224_256ProcessMessageBlock+0x1b6>
    4370:	c4 2a       	or	r12, r20
    4372:	d5 2a       	or	r13, r21
    4374:	e6 2a       	or	r14, r22
    4376:	f7 2a       	or	r15, r23
    4378:	4c 24       	eor	r4, r12
    437a:	5d 24       	eor	r5, r13
    437c:	6e 24       	eor	r6, r14
    437e:	7f 24       	eor	r7, r15
    4380:	f3 e0       	ldi	r31, 0x03	; 3
    4382:	b6 95       	lsr	r27
    4384:	a7 95       	ror	r26
    4386:	97 95       	ror	r25
    4388:	87 95       	ror	r24
    438a:	fa 95       	dec	r31
    438c:	d1 f7       	brne	.-12     	; 0x4382 <SHA224_256ProcessMessageBlock+0x1d4>
    438e:	48 26       	eor	r4, r24
    4390:	59 26       	eor	r5, r25
    4392:	6a 26       	eor	r6, r26
    4394:	7b 26       	eor	r7, r27
    4396:	84 0c       	add	r8, r4
    4398:	95 1c       	adc	r9, r5
    439a:	a6 1c       	adc	r10, r6
    439c:	b7 1c       	adc	r11, r7
    439e:	cf 5f       	subi	r28, 0xFF	; 255
    43a0:	de 4f       	sbci	r29, 0xFE	; 254
    43a2:	a8 81       	ld	r26, Y
    43a4:	b9 81       	ldd	r27, Y+1	; 0x01
    43a6:	c1 50       	subi	r28, 0x01	; 1
    43a8:	d1 40       	sbci	r29, 0x01	; 1
    43aa:	dc 96       	adiw	r26, 0x3c	; 60
    43ac:	8d 92       	st	X+, r8
    43ae:	9d 92       	st	X+, r9
    43b0:	ad 92       	st	X+, r10
    43b2:	bc 92       	st	X, r11
    43b4:	df 97       	sbiw	r26, 0x3f	; 63
  for (t = t4 = 0; t < 16; t++, t4 += 4)
    W[t] = (((uint32_t)context->Message_Block[t4]) << 24) |
           (((uint32_t)context->Message_Block[t4 + 1]) << 16) |
           (((uint32_t)context->Message_Block[t4 + 2]) << 8) |
           (((uint32_t)context->Message_Block[t4 + 3]));
  for (t = 16; t < 64; t++)
    43b6:	0a 17       	cp	r16, r26
    43b8:	1b 07       	cpc	r17, r27
    43ba:	09 f0       	breq	.+2      	; 0x43be <SHA224_256ProcessMessageBlock+0x210>
    43bc:	4a cf       	rjmp	.-364    	; 0x4252 <SHA224_256ProcessMessageBlock+0xa4>
    W[t] = SHA256_sigma1(W[t-2]) + W[t-7] +
        SHA256_sigma0(W[t-15]) + W[t-16];

  A = context->Intermediate_Hash[0];
    43be:	d1 01       	movw	r26, r2
    43c0:	4d 90       	ld	r4, X+
    43c2:	5d 90       	ld	r5, X+
    43c4:	6d 90       	ld	r6, X+
    43c6:	7c 90       	ld	r7, X
    43c8:	13 97       	sbiw	r26, 0x03	; 3
    43ca:	c9 5e       	subi	r28, 0xE9	; 233
    43cc:	de 4f       	sbci	r29, 0xFE	; 254
    43ce:	48 82       	st	Y, r4
    43d0:	59 82       	std	Y+1, r5	; 0x01
    43d2:	6a 82       	std	Y+2, r6	; 0x02
    43d4:	7b 82       	std	Y+3, r7	; 0x03
    43d6:	c7 51       	subi	r28, 0x17	; 23
    43d8:	d1 40       	sbci	r29, 0x01	; 1
  B = context->Intermediate_Hash[1];
    43da:	14 96       	adiw	r26, 0x04	; 4
    43dc:	4d 90       	ld	r4, X+
    43de:	5d 90       	ld	r5, X+
    43e0:	6d 90       	ld	r6, X+
    43e2:	7c 90       	ld	r7, X
    43e4:	17 97       	sbiw	r26, 0x07	; 7
    43e6:	c5 5e       	subi	r28, 0xE5	; 229
    43e8:	de 4f       	sbci	r29, 0xFE	; 254
    43ea:	48 82       	st	Y, r4
    43ec:	59 82       	std	Y+1, r5	; 0x01
    43ee:	6a 82       	std	Y+2, r6	; 0x02
    43f0:	7b 82       	std	Y+3, r7	; 0x03
    43f2:	cb 51       	subi	r28, 0x1B	; 27
    43f4:	d1 40       	sbci	r29, 0x01	; 1
  C = context->Intermediate_Hash[2];
    43f6:	18 96       	adiw	r26, 0x08	; 8
    43f8:	4d 90       	ld	r4, X+
    43fa:	5d 90       	ld	r5, X+
    43fc:	6d 90       	ld	r6, X+
    43fe:	7c 90       	ld	r7, X
    4400:	1b 97       	sbiw	r26, 0x0b	; 11
    4402:	c1 5e       	subi	r28, 0xE1	; 225
    4404:	de 4f       	sbci	r29, 0xFE	; 254
    4406:	48 82       	st	Y, r4
    4408:	59 82       	std	Y+1, r5	; 0x01
    440a:	6a 82       	std	Y+2, r6	; 0x02
    440c:	7b 82       	std	Y+3, r7	; 0x03
    440e:	cf 51       	subi	r28, 0x1F	; 31
    4410:	d1 40       	sbci	r29, 0x01	; 1
  D = context->Intermediate_Hash[3];
    4412:	1c 96       	adiw	r26, 0x0c	; 12
    4414:	4d 90       	ld	r4, X+
    4416:	5d 90       	ld	r5, X+
    4418:	6d 90       	ld	r6, X+
    441a:	7c 90       	ld	r7, X
    441c:	1f 97       	sbiw	r26, 0x0f	; 15
    441e:	cd 5d       	subi	r28, 0xDD	; 221
    4420:	de 4f       	sbci	r29, 0xFE	; 254
    4422:	48 82       	st	Y, r4
    4424:	59 82       	std	Y+1, r5	; 0x01
    4426:	6a 82       	std	Y+2, r6	; 0x02
    4428:	7b 82       	std	Y+3, r7	; 0x03
    442a:	c3 52       	subi	r28, 0x23	; 35
    442c:	d1 40       	sbci	r29, 0x01	; 1
  E = context->Intermediate_Hash[4];
    442e:	50 96       	adiw	r26, 0x10	; 16
    4430:	4d 90       	ld	r4, X+
    4432:	5d 90       	ld	r5, X+
    4434:	6d 90       	ld	r6, X+
    4436:	7c 90       	ld	r7, X
    4438:	53 97       	sbiw	r26, 0x13	; 19
    443a:	c9 5d       	subi	r28, 0xD9	; 217
    443c:	de 4f       	sbci	r29, 0xFE	; 254
    443e:	48 82       	st	Y, r4
    4440:	59 82       	std	Y+1, r5	; 0x01
    4442:	6a 82       	std	Y+2, r6	; 0x02
    4444:	7b 82       	std	Y+3, r7	; 0x03
    4446:	c7 52       	subi	r28, 0x27	; 39
    4448:	d1 40       	sbci	r29, 0x01	; 1
  F = context->Intermediate_Hash[5];
    444a:	54 96       	adiw	r26, 0x14	; 20
    444c:	4d 90       	ld	r4, X+
    444e:	5d 90       	ld	r5, X+
    4450:	6d 90       	ld	r6, X+
    4452:	7c 90       	ld	r7, X
    4454:	57 97       	sbiw	r26, 0x17	; 23
    4456:	c5 5d       	subi	r28, 0xD5	; 213
    4458:	de 4f       	sbci	r29, 0xFE	; 254
    445a:	48 82       	st	Y, r4
    445c:	59 82       	std	Y+1, r5	; 0x01
    445e:	6a 82       	std	Y+2, r6	; 0x02
    4460:	7b 82       	std	Y+3, r7	; 0x03
    4462:	cb 52       	subi	r28, 0x2B	; 43
    4464:	d1 40       	sbci	r29, 0x01	; 1
  G = context->Intermediate_Hash[6];
    4466:	58 96       	adiw	r26, 0x18	; 24
    4468:	4d 90       	ld	r4, X+
    446a:	5d 90       	ld	r5, X+
    446c:	6d 90       	ld	r6, X+
    446e:	7c 90       	ld	r7, X
    4470:	5b 97       	sbiw	r26, 0x1b	; 27
    4472:	c1 5d       	subi	r28, 0xD1	; 209
    4474:	de 4f       	sbci	r29, 0xFE	; 254
    4476:	48 82       	st	Y, r4
    4478:	59 82       	std	Y+1, r5	; 0x01
    447a:	6a 82       	std	Y+2, r6	; 0x02
    447c:	7b 82       	std	Y+3, r7	; 0x03
    447e:	cf 52       	subi	r28, 0x2F	; 47
    4480:	d1 40       	sbci	r29, 0x01	; 1
  H = context->Intermediate_Hash[7];
    4482:	5c 96       	adiw	r26, 0x1c	; 28
    4484:	4d 90       	ld	r4, X+
    4486:	5d 90       	ld	r5, X+
    4488:	6d 90       	ld	r6, X+
    448a:	7c 90       	ld	r7, X
    448c:	5f 97       	sbiw	r26, 0x1f	; 31
    448e:	cd 5c       	subi	r28, 0xCD	; 205
    4490:	de 4f       	sbci	r29, 0xFE	; 254
    4492:	48 82       	st	Y, r4
    4494:	59 82       	std	Y+1, r5	; 0x01
    4496:	6a 82       	std	Y+2, r6	; 0x02
    4498:	7b 82       	std	Y+3, r7	; 0x03
    449a:	c3 53       	subi	r28, 0x33	; 51
    449c:	d1 40       	sbci	r29, 0x01	; 1
    449e:	e4 e2       	ldi	r30, 0x24	; 36
    44a0:	f1 e0       	ldi	r31, 0x01	; 1
    44a2:	c1 5c       	subi	r28, 0xC1	; 193
    44a4:	de 4f       	sbci	r29, 0xFE	; 254
    44a6:	f9 83       	std	Y+1, r31	; 0x01
    44a8:	e8 83       	st	Y, r30
    44aa:	cf 53       	subi	r28, 0x3F	; 63
    44ac:	d1 40       	sbci	r29, 0x01	; 1
    44ae:	cf 5f       	subi	r28, 0xFF	; 255
    44b0:	de 4f       	sbci	r29, 0xFE	; 254
    44b2:	48 82       	st	Y, r4
    44b4:	59 82       	std	Y+1, r5	; 0x01
    44b6:	6a 82       	std	Y+2, r6	; 0x02
    44b8:	7b 82       	std	Y+3, r7	; 0x03
    44ba:	c1 50       	subi	r28, 0x01	; 1
    44bc:	d1 40       	sbci	r29, 0x01	; 1
  B = context->Intermediate_Hash[1];
  C = context->Intermediate_Hash[2];
  D = context->Intermediate_Hash[3];
  E = context->Intermediate_Hash[4];
  F = context->Intermediate_Hash[5];
  G = context->Intermediate_Hash[6];
    44be:	c1 5d       	subi	r28, 0xD1	; 209
    44c0:	de 4f       	sbci	r29, 0xFE	; 254
    44c2:	48 80       	ld	r4, Y
    44c4:	59 80       	ldd	r5, Y+1	; 0x01
    44c6:	6a 80       	ldd	r6, Y+2	; 0x02
    44c8:	7b 80       	ldd	r7, Y+3	; 0x03
    44ca:	cf 52       	subi	r28, 0x2F	; 47
    44cc:	d1 40       	sbci	r29, 0x01	; 1
    44ce:	cf 5e       	subi	r28, 0xEF	; 239
    44d0:	de 4f       	sbci	r29, 0xFE	; 254
    44d2:	48 82       	st	Y, r4
    44d4:	59 82       	std	Y+1, r5	; 0x01
    44d6:	6a 82       	std	Y+2, r6	; 0x02
    44d8:	7b 82       	std	Y+3, r7	; 0x03
    44da:	c1 51       	subi	r28, 0x11	; 17
    44dc:	d1 40       	sbci	r29, 0x01	; 1
  A = context->Intermediate_Hash[0];
  B = context->Intermediate_Hash[1];
  C = context->Intermediate_Hash[2];
  D = context->Intermediate_Hash[3];
  E = context->Intermediate_Hash[4];
  F = context->Intermediate_Hash[5];
    44de:	c5 5d       	subi	r28, 0xD5	; 213
    44e0:	de 4f       	sbci	r29, 0xFE	; 254
    44e2:	68 80       	ld	r6, Y
    44e4:	79 80       	ldd	r7, Y+1	; 0x01
    44e6:	8a 80       	ldd	r8, Y+2	; 0x02
    44e8:	9b 80       	ldd	r9, Y+3	; 0x03
    44ea:	cb 52       	subi	r28, 0x2B	; 43
    44ec:	d1 40       	sbci	r29, 0x01	; 1
    44ee:	c3 5f       	subi	r28, 0xF3	; 243
    44f0:	de 4f       	sbci	r29, 0xFE	; 254
    44f2:	68 82       	st	Y, r6
    44f4:	79 82       	std	Y+1, r7	; 0x01
    44f6:	8a 82       	std	Y+2, r8	; 0x02
    44f8:	9b 82       	std	Y+3, r9	; 0x03
    44fa:	cd 50       	subi	r28, 0x0D	; 13
    44fc:	d1 40       	sbci	r29, 0x01	; 1

  A = context->Intermediate_Hash[0];
  B = context->Intermediate_Hash[1];
  C = context->Intermediate_Hash[2];
  D = context->Intermediate_Hash[3];
  E = context->Intermediate_Hash[4];
    44fe:	c9 5d       	subi	r28, 0xD9	; 217
    4500:	de 4f       	sbci	r29, 0xFE	; 254
    4502:	88 81       	ld	r24, Y
    4504:	99 81       	ldd	r25, Y+1	; 0x01
    4506:	aa 81       	ldd	r26, Y+2	; 0x02
    4508:	bb 81       	ldd	r27, Y+3	; 0x03
    450a:	c7 52       	subi	r28, 0x27	; 39
    450c:	d1 40       	sbci	r29, 0x01	; 1
        SHA256_sigma0(W[t-15]) + W[t-16];

  A = context->Intermediate_Hash[0];
  B = context->Intermediate_Hash[1];
  C = context->Intermediate_Hash[2];
  D = context->Intermediate_Hash[3];
    450e:	cd 5d       	subi	r28, 0xDD	; 221
    4510:	de 4f       	sbci	r29, 0xFE	; 254
    4512:	88 80       	ld	r8, Y
    4514:	99 80       	ldd	r9, Y+1	; 0x01
    4516:	aa 80       	ldd	r10, Y+2	; 0x02
    4518:	bb 80       	ldd	r11, Y+3	; 0x03
    451a:	c3 52       	subi	r28, 0x23	; 35
    451c:	d1 40       	sbci	r29, 0x01	; 1
    451e:	c9 5c       	subi	r28, 0xC9	; 201
    4520:	de 4f       	sbci	r29, 0xFE	; 254
    4522:	88 82       	st	Y, r8
    4524:	99 82       	std	Y+1, r9	; 0x01
    4526:	aa 82       	std	Y+2, r10	; 0x02
    4528:	bb 82       	std	Y+3, r11	; 0x03
    452a:	c7 53       	subi	r28, 0x37	; 55
    452c:	d1 40       	sbci	r29, 0x01	; 1
    W[t] = SHA256_sigma1(W[t-2]) + W[t-7] +
        SHA256_sigma0(W[t-15]) + W[t-16];

  A = context->Intermediate_Hash[0];
  B = context->Intermediate_Hash[1];
  C = context->Intermediate_Hash[2];
    452e:	c1 5e       	subi	r28, 0xE1	; 225
    4530:	de 4f       	sbci	r29, 0xFE	; 254
    4532:	a8 80       	ld	r10, Y
    4534:	b9 80       	ldd	r11, Y+1	; 0x01
    4536:	ca 80       	ldd	r12, Y+2	; 0x02
    4538:	db 80       	ldd	r13, Y+3	; 0x03
    453a:	cf 51       	subi	r28, 0x1F	; 31
    453c:	d1 40       	sbci	r29, 0x01	; 1
    453e:	c7 5f       	subi	r28, 0xF7	; 247
    4540:	de 4f       	sbci	r29, 0xFE	; 254
    4542:	a8 82       	st	Y, r10
    4544:	b9 82       	std	Y+1, r11	; 0x01
    4546:	ca 82       	std	Y+2, r12	; 0x02
    4548:	db 82       	std	Y+3, r13	; 0x03
    454a:	c9 50       	subi	r28, 0x09	; 9
    454c:	d1 40       	sbci	r29, 0x01	; 1
  for (t = 16; t < 64; t++)
    W[t] = SHA256_sigma1(W[t-2]) + W[t-7] +
        SHA256_sigma0(W[t-15]) + W[t-16];

  A = context->Intermediate_Hash[0];
  B = context->Intermediate_Hash[1];
    454e:	c5 5e       	subi	r28, 0xE5	; 229
    4550:	de 4f       	sbci	r29, 0xFE	; 254
    4552:	c8 80       	ld	r12, Y
    4554:	d9 80       	ldd	r13, Y+1	; 0x01
    4556:	ea 80       	ldd	r14, Y+2	; 0x02
    4558:	fb 80       	ldd	r15, Y+3	; 0x03
    455a:	cb 51       	subi	r28, 0x1B	; 27
    455c:	d1 40       	sbci	r29, 0x01	; 1
    455e:	cb 5f       	subi	r28, 0xFB	; 251
    4560:	de 4f       	sbci	r29, 0xFE	; 254
    4562:	c8 82       	st	Y, r12
    4564:	d9 82       	std	Y+1, r13	; 0x01
    4566:	ea 82       	std	Y+2, r14	; 0x02
    4568:	fb 82       	std	Y+3, r15	; 0x03
    456a:	c5 50       	subi	r28, 0x05	; 5
    456c:	d1 40       	sbci	r29, 0x01	; 1
           (((uint32_t)context->Message_Block[t4 + 3]));
  for (t = 16; t < 64; t++)
    W[t] = SHA256_sigma1(W[t-2]) + W[t-7] +
        SHA256_sigma0(W[t-15]) + W[t-16];

  A = context->Intermediate_Hash[0];
    456e:	c9 5e       	subi	r28, 0xE9	; 233
    4570:	de 4f       	sbci	r29, 0xFE	; 254
    4572:	48 81       	ld	r20, Y
    4574:	59 81       	ldd	r21, Y+1	; 0x01
    4576:	6a 81       	ldd	r22, Y+2	; 0x02
    4578:	7b 81       	ldd	r23, Y+3	; 0x03
    457a:	c7 51       	subi	r28, 0x17	; 23
    457c:	d1 40       	sbci	r29, 0x01	; 1
  F = context->Intermediate_Hash[5];
  G = context->Intermediate_Hash[6];
  H = context->Intermediate_Hash[7];

  for (t = 0; t < 64; t++) {
    temp1 = H + SHA256_SIGMA1(E) + SHA_Ch(E,F,G) + K[t] + W[t];
    457e:	c1 5c       	subi	r28, 0xC1	; 193
    4580:	de 4f       	sbci	r29, 0xFE	; 254
    4582:	e8 81       	ld	r30, Y
    4584:	f9 81       	ldd	r31, Y+1	; 0x01
    4586:	cf 53       	subi	r28, 0x3F	; 63
    4588:	d1 40       	sbci	r29, 0x01	; 1
    458a:	61 90       	ld	r6, Z+
    458c:	71 90       	ld	r7, Z+
    458e:	81 90       	ld	r8, Z+
    4590:	91 90       	ld	r9, Z+
    4592:	c1 5c       	subi	r28, 0xC1	; 193
    4594:	de 4f       	sbci	r29, 0xFE	; 254
    4596:	f9 83       	std	Y+1, r31	; 0x01
    4598:	e8 83       	st	Y, r30
    459a:	cf 53       	subi	r28, 0x3F	; 63
    459c:	d1 40       	sbci	r29, 0x01	; 1
    459e:	c5 5c       	subi	r28, 0xC5	; 197
    45a0:	de 4f       	sbci	r29, 0xFE	; 254
    45a2:	68 82       	st	Y, r6
    45a4:	79 82       	std	Y+1, r7	; 0x01
    45a6:	8a 82       	std	Y+2, r8	; 0x02
    45a8:	9b 82       	std	Y+3, r9	; 0x03
    45aa:	cb 53       	subi	r28, 0x3B	; 59
    45ac:	d1 40       	sbci	r29, 0x01	; 1
    45ae:	cb 5e       	subi	r28, 0xEB	; 235
    45b0:	de 4f       	sbci	r29, 0xFE	; 254
    45b2:	e8 81       	ld	r30, Y
    45b4:	f9 81       	ldd	r31, Y+1	; 0x01
    45b6:	c5 51       	subi	r28, 0x15	; 21
    45b8:	d1 40       	sbci	r29, 0x01	; 1
    45ba:	01 91       	ld	r16, Z+
    45bc:	11 91       	ld	r17, Z+
    45be:	21 91       	ld	r18, Z+
    45c0:	31 91       	ld	r19, Z+
    45c2:	cb 5e       	subi	r28, 0xEB	; 235
    45c4:	de 4f       	sbci	r29, 0xFE	; 254
    45c6:	f9 83       	std	Y+1, r31	; 0x01
    45c8:	e8 83       	st	Y, r30
    45ca:	c5 51       	subi	r28, 0x15	; 21
    45cc:	d1 40       	sbci	r29, 0x01	; 1
    45ce:	4c 01       	movw	r8, r24
    45d0:	5d 01       	movw	r10, r26
    45d2:	ea e1       	ldi	r30, 0x1A	; 26
    45d4:	88 0c       	add	r8, r8
    45d6:	99 1c       	adc	r9, r9
    45d8:	aa 1c       	adc	r10, r10
    45da:	bb 1c       	adc	r11, r11
    45dc:	ea 95       	dec	r30
    45de:	d1 f7       	brne	.-12     	; 0x45d4 <SHA224_256ProcessMessageBlock+0x426>
    45e0:	6c 01       	movw	r12, r24
    45e2:	7d 01       	movw	r14, r26
    45e4:	f6 e0       	ldi	r31, 0x06	; 6
    45e6:	f6 94       	lsr	r15
    45e8:	e7 94       	ror	r14
    45ea:	d7 94       	ror	r13
    45ec:	c7 94       	ror	r12
    45ee:	fa 95       	dec	r31
    45f0:	d1 f7       	brne	.-12     	; 0x45e6 <SHA224_256ProcessMessageBlock+0x438>
    45f2:	c8 28       	or	r12, r8
    45f4:	d9 28       	or	r13, r9
    45f6:	ea 28       	or	r14, r10
    45f8:	fb 28       	or	r15, r11
    45fa:	2c 01       	movw	r4, r24
    45fc:	3d 01       	movw	r6, r26
    45fe:	e5 e1       	ldi	r30, 0x15	; 21
    4600:	44 0c       	add	r4, r4
    4602:	55 1c       	adc	r5, r5
    4604:	66 1c       	adc	r6, r6
    4606:	77 1c       	adc	r7, r7
    4608:	ea 95       	dec	r30
    460a:	d1 f7       	brne	.-12     	; 0x4600 <SHA224_256ProcessMessageBlock+0x452>
    460c:	4c 01       	movw	r8, r24
    460e:	5d 01       	movw	r10, r26
    4610:	fb e0       	ldi	r31, 0x0B	; 11
    4612:	b6 94       	lsr	r11
    4614:	a7 94       	ror	r10
    4616:	97 94       	ror	r9
    4618:	87 94       	ror	r8
    461a:	fa 95       	dec	r31
    461c:	d1 f7       	brne	.-12     	; 0x4612 <SHA224_256ProcessMessageBlock+0x464>
    461e:	84 28       	or	r8, r4
    4620:	95 28       	or	r9, r5
    4622:	a6 28       	or	r10, r6
    4624:	b7 28       	or	r11, r7
    4626:	8c 24       	eor	r8, r12
    4628:	9d 24       	eor	r9, r13
    462a:	ae 24       	eor	r10, r14
    462c:	bf 24       	eor	r11, r15
    462e:	6c 01       	movw	r12, r24
    4630:	7d 01       	movw	r14, r26
    4632:	e9 e1       	ldi	r30, 0x19	; 25
    4634:	f6 94       	lsr	r15
    4636:	e7 94       	ror	r14
    4638:	d7 94       	ror	r13
    463a:	c7 94       	ror	r12
    463c:	ea 95       	dec	r30
    463e:	d1 f7       	brne	.-12     	; 0x4634 <SHA224_256ProcessMessageBlock+0x486>
    4640:	2c 01       	movw	r4, r24
    4642:	3d 01       	movw	r6, r26
    4644:	f7 e0       	ldi	r31, 0x07	; 7
    4646:	44 0c       	add	r4, r4
    4648:	55 1c       	adc	r5, r5
    464a:	66 1c       	adc	r6, r6
    464c:	77 1c       	adc	r7, r7
    464e:	fa 95       	dec	r31
    4650:	d1 f7       	brne	.-12     	; 0x4646 <SHA224_256ProcessMessageBlock+0x498>
    4652:	c4 28       	or	r12, r4
    4654:	d5 28       	or	r13, r5
    4656:	e6 28       	or	r14, r6
    4658:	f7 28       	or	r15, r7
    465a:	c8 24       	eor	r12, r8
    465c:	d9 24       	eor	r13, r9
    465e:	ea 24       	eor	r14, r10
    4660:	fb 24       	eor	r15, r11
    4662:	c5 5c       	subi	r28, 0xC5	; 197
    4664:	de 4f       	sbci	r29, 0xFE	; 254
    4666:	48 80       	ld	r4, Y
    4668:	59 80       	ldd	r5, Y+1	; 0x01
    466a:	6a 80       	ldd	r6, Y+2	; 0x02
    466c:	7b 80       	ldd	r7, Y+3	; 0x03
    466e:	cb 53       	subi	r28, 0x3B	; 59
    4670:	d1 40       	sbci	r29, 0x01	; 1
    4672:	04 0d       	add	r16, r4
    4674:	15 1d       	adc	r17, r5
    4676:	26 1d       	adc	r18, r6
    4678:	37 1d       	adc	r19, r7
    467a:	46 01       	movw	r8, r12
    467c:	57 01       	movw	r10, r14
    467e:	80 0e       	add	r8, r16
    4680:	91 1e       	adc	r9, r17
    4682:	a2 1e       	adc	r10, r18
    4684:	b3 1e       	adc	r11, r19
    4686:	2c 01       	movw	r4, r24
    4688:	3d 01       	movw	r6, r26
    468a:	40 94       	com	r4
    468c:	50 94       	com	r5
    468e:	60 94       	com	r6
    4690:	70 94       	com	r7
    4692:	cf 5e       	subi	r28, 0xEF	; 239
    4694:	de 4f       	sbci	r29, 0xFE	; 254
    4696:	c8 80       	ld	r12, Y
    4698:	d9 80       	ldd	r13, Y+1	; 0x01
    469a:	ea 80       	ldd	r14, Y+2	; 0x02
    469c:	fb 80       	ldd	r15, Y+3	; 0x03
    469e:	c1 51       	subi	r28, 0x11	; 17
    46a0:	d1 40       	sbci	r29, 0x01	; 1
    46a2:	4c 20       	and	r4, r12
    46a4:	5d 20       	and	r5, r13
    46a6:	6e 20       	and	r6, r14
    46a8:	7f 20       	and	r7, r15
    46aa:	c3 5f       	subi	r28, 0xF3	; 243
    46ac:	de 4f       	sbci	r29, 0xFE	; 254
    46ae:	08 81       	ld	r16, Y
    46b0:	19 81       	ldd	r17, Y+1	; 0x01
    46b2:	2a 81       	ldd	r18, Y+2	; 0x02
    46b4:	3b 81       	ldd	r19, Y+3	; 0x03
    46b6:	cd 50       	subi	r28, 0x0D	; 13
    46b8:	d1 40       	sbci	r29, 0x01	; 1
    46ba:	08 23       	and	r16, r24
    46bc:	19 23       	and	r17, r25
    46be:	2a 23       	and	r18, r26
    46c0:	3b 23       	and	r19, r27
    46c2:	04 25       	eor	r16, r4
    46c4:	15 25       	eor	r17, r5
    46c6:	26 25       	eor	r18, r6
    46c8:	37 25       	eor	r19, r7
    46ca:	08 0d       	add	r16, r8
    46cc:	19 1d       	adc	r17, r9
    46ce:	2a 1d       	adc	r18, r10
    46d0:	3b 1d       	adc	r19, r11
    46d2:	cf 5f       	subi	r28, 0xFF	; 255
    46d4:	de 4f       	sbci	r29, 0xFE	; 254
    46d6:	48 80       	ld	r4, Y
    46d8:	59 80       	ldd	r5, Y+1	; 0x01
    46da:	6a 80       	ldd	r6, Y+2	; 0x02
    46dc:	7b 80       	ldd	r7, Y+3	; 0x03
    46de:	c1 50       	subi	r28, 0x01	; 1
    46e0:	d1 40       	sbci	r29, 0x01	; 1
    46e2:	04 0d       	add	r16, r4
    46e4:	15 1d       	adc	r17, r5
    46e6:	26 1d       	adc	r18, r6
    46e8:	37 1d       	adc	r19, r7
    temp2 = SHA256_SIGMA0(A) + SHA_Maj(A,B,C);
    46ea:	2a 01       	movw	r4, r20
    46ec:	3b 01       	movw	r6, r22
    46ee:	ee e1       	ldi	r30, 0x1E	; 30
    46f0:	44 0c       	add	r4, r4
    46f2:	55 1c       	adc	r5, r5
    46f4:	66 1c       	adc	r6, r6
    46f6:	77 1c       	adc	r7, r7
    46f8:	ea 95       	dec	r30
    46fa:	d1 f7       	brne	.-12     	; 0x46f0 <SHA224_256ProcessMessageBlock+0x542>
    46fc:	6a 01       	movw	r12, r20
    46fe:	7b 01       	movw	r14, r22
    4700:	f2 e0       	ldi	r31, 0x02	; 2
    4702:	f6 94       	lsr	r15
    4704:	e7 94       	ror	r14
    4706:	d7 94       	ror	r13
    4708:	c7 94       	ror	r12
    470a:	fa 95       	dec	r31
    470c:	d1 f7       	brne	.-12     	; 0x4702 <SHA224_256ProcessMessageBlock+0x554>
    470e:	c4 28       	or	r12, r4
    4710:	d5 28       	or	r13, r5
    4712:	e6 28       	or	r14, r6
    4714:	f7 28       	or	r15, r7
    4716:	4a 01       	movw	r8, r20
    4718:	5b 01       	movw	r10, r22
    471a:	e3 e1       	ldi	r30, 0x13	; 19
    471c:	88 0c       	add	r8, r8
    471e:	99 1c       	adc	r9, r9
    4720:	aa 1c       	adc	r10, r10
    4722:	bb 1c       	adc	r11, r11
    4724:	ea 95       	dec	r30
    4726:	d1 f7       	brne	.-12     	; 0x471c <SHA224_256ProcessMessageBlock+0x56e>
    4728:	2a 01       	movw	r4, r20
    472a:	3b 01       	movw	r6, r22
    472c:	fd e0       	ldi	r31, 0x0D	; 13
    472e:	76 94       	lsr	r7
    4730:	67 94       	ror	r6
    4732:	57 94       	ror	r5
    4734:	47 94       	ror	r4
    4736:	fa 95       	dec	r31
    4738:	d1 f7       	brne	.-12     	; 0x472e <SHA224_256ProcessMessageBlock+0x580>
    473a:	48 28       	or	r4, r8
    473c:	59 28       	or	r5, r9
    473e:	6a 28       	or	r6, r10
    4740:	7b 28       	or	r7, r11
    4742:	4c 24       	eor	r4, r12
    4744:	5d 24       	eor	r5, r13
    4746:	6e 24       	eor	r6, r14
    4748:	7f 24       	eor	r7, r15
    474a:	4a 01       	movw	r8, r20
    474c:	5b 01       	movw	r10, r22
    474e:	e6 e1       	ldi	r30, 0x16	; 22
    4750:	b6 94       	lsr	r11
    4752:	a7 94       	ror	r10
    4754:	97 94       	ror	r9
    4756:	87 94       	ror	r8
    4758:	ea 95       	dec	r30
    475a:	d1 f7       	brne	.-12     	; 0x4750 <SHA224_256ProcessMessageBlock+0x5a2>
    475c:	6a 01       	movw	r12, r20
    475e:	7b 01       	movw	r14, r22
    4760:	fa e0       	ldi	r31, 0x0A	; 10
    4762:	cc 0c       	add	r12, r12
    4764:	dd 1c       	adc	r13, r13
    4766:	ee 1c       	adc	r14, r14
    4768:	ff 1c       	adc	r15, r15
    476a:	fa 95       	dec	r31
    476c:	d1 f7       	brne	.-12     	; 0x4762 <SHA224_256ProcessMessageBlock+0x5b4>
    476e:	c8 28       	or	r12, r8
    4770:	d9 28       	or	r13, r9
    4772:	ea 28       	or	r14, r10
    4774:	fb 28       	or	r15, r11
    4776:	46 01       	movw	r8, r12
    4778:	57 01       	movw	r10, r14
    477a:	84 24       	eor	r8, r4
    477c:	95 24       	eor	r9, r5
    477e:	a6 24       	eor	r10, r6
    4780:	b7 24       	eor	r11, r7
    4782:	cf 5f       	subi	r28, 0xFF	; 255
    4784:	de 4f       	sbci	r29, 0xFE	; 254
    4786:	88 82       	st	Y, r8
    4788:	99 82       	std	Y+1, r9	; 0x01
    478a:	aa 82       	std	Y+2, r10	; 0x02
    478c:	bb 82       	std	Y+3, r11	; 0x03
    478e:	c1 50       	subi	r28, 0x01	; 1
    4790:	d1 40       	sbci	r29, 0x01	; 1
    4792:	c7 5f       	subi	r28, 0xF7	; 247
    4794:	de 4f       	sbci	r29, 0xFE	; 254
    4796:	88 80       	ld	r8, Y
    4798:	99 80       	ldd	r9, Y+1	; 0x01
    479a:	aa 80       	ldd	r10, Y+2	; 0x02
    479c:	bb 80       	ldd	r11, Y+3	; 0x03
    479e:	c9 50       	subi	r28, 0x09	; 9
    47a0:	d1 40       	sbci	r29, 0x01	; 1
    47a2:	cb 5f       	subi	r28, 0xFB	; 251
    47a4:	de 4f       	sbci	r29, 0xFE	; 254
    47a6:	c8 80       	ld	r12, Y
    47a8:	d9 80       	ldd	r13, Y+1	; 0x01
    47aa:	ea 80       	ldd	r14, Y+2	; 0x02
    47ac:	fb 80       	ldd	r15, Y+3	; 0x03
    47ae:	c5 50       	subi	r28, 0x05	; 5
    47b0:	d1 40       	sbci	r29, 0x01	; 1
    47b2:	8c 24       	eor	r8, r12
    47b4:	9d 24       	eor	r9, r13
    47b6:	ae 24       	eor	r10, r14
    47b8:	bf 24       	eor	r11, r15
    47ba:	84 22       	and	r8, r20
    47bc:	95 22       	and	r9, r21
    47be:	a6 22       	and	r10, r22
    47c0:	b7 22       	and	r11, r23
    47c2:	26 01       	movw	r4, r12
    47c4:	37 01       	movw	r6, r14
    47c6:	c7 5f       	subi	r28, 0xF7	; 247
    47c8:	de 4f       	sbci	r29, 0xFE	; 254
    47ca:	c8 80       	ld	r12, Y
    47cc:	d9 80       	ldd	r13, Y+1	; 0x01
    47ce:	ea 80       	ldd	r14, Y+2	; 0x02
    47d0:	fb 80       	ldd	r15, Y+3	; 0x03
    47d2:	c9 50       	subi	r28, 0x09	; 9
    47d4:	d1 40       	sbci	r29, 0x01	; 1
    47d6:	4c 20       	and	r4, r12
    47d8:	5d 20       	and	r5, r13
    47da:	6e 20       	and	r6, r14
    47dc:	7f 20       	and	r7, r15
    47de:	48 24       	eor	r4, r8
    47e0:	59 24       	eor	r5, r9
    47e2:	6a 24       	eor	r6, r10
    47e4:	7b 24       	eor	r7, r11
    47e6:	cf 5f       	subi	r28, 0xFF	; 255
    47e8:	de 4f       	sbci	r29, 0xFE	; 254
    47ea:	c8 80       	ld	r12, Y
    47ec:	d9 80       	ldd	r13, Y+1	; 0x01
    47ee:	ea 80       	ldd	r14, Y+2	; 0x02
    47f0:	fb 80       	ldd	r15, Y+3	; 0x03
    47f2:	c1 50       	subi	r28, 0x01	; 1
    47f4:	d1 40       	sbci	r29, 0x01	; 1
    47f6:	c4 0c       	add	r12, r4
    47f8:	d5 1c       	adc	r13, r5
    47fa:	e6 1c       	adc	r14, r6
    47fc:	f7 1c       	adc	r15, r7
    H = G;
    G = F;
    F = E;
    E = D + temp1;
    47fe:	c9 5c       	subi	r28, 0xC9	; 201
    4800:	de 4f       	sbci	r29, 0xFE	; 254
    4802:	88 80       	ld	r8, Y
    4804:	99 80       	ldd	r9, Y+1	; 0x01
    4806:	aa 80       	ldd	r10, Y+2	; 0x02
    4808:	bb 80       	ldd	r11, Y+3	; 0x03
    480a:	c7 53       	subi	r28, 0x37	; 55
    480c:	d1 40       	sbci	r29, 0x01	; 1
    480e:	80 0e       	add	r8, r16
    4810:	91 1e       	adc	r9, r17
    4812:	a2 1e       	adc	r10, r18
    4814:	b3 1e       	adc	r11, r19
    D = C;
    C = B;
    B = A;
    A = temp1 + temp2;
    4816:	c0 0e       	add	r12, r16
    4818:	d1 1e       	adc	r13, r17
    481a:	e2 1e       	adc	r14, r18
    481c:	f3 1e       	adc	r15, r19
    481e:	c7 5f       	subi	r28, 0xF7	; 247
    4820:	de 4f       	sbci	r29, 0xFE	; 254
    4822:	08 81       	ld	r16, Y
    4824:	19 81       	ldd	r17, Y+1	; 0x01
    4826:	2a 81       	ldd	r18, Y+2	; 0x02
    4828:	3b 81       	ldd	r19, Y+3	; 0x03
    482a:	c9 50       	subi	r28, 0x09	; 9
    482c:	d1 40       	sbci	r29, 0x01	; 1
    482e:	c9 5c       	subi	r28, 0xC9	; 201
    4830:	de 4f       	sbci	r29, 0xFE	; 254
    4832:	08 83       	st	Y, r16
    4834:	19 83       	std	Y+1, r17	; 0x01
    4836:	2a 83       	std	Y+2, r18	; 0x02
    4838:	3b 83       	std	Y+3, r19	; 0x03
    483a:	c7 53       	subi	r28, 0x37	; 55
    483c:	d1 40       	sbci	r29, 0x01	; 1
    483e:	cf 5e       	subi	r28, 0xEF	; 239
    4840:	de 4f       	sbci	r29, 0xFE	; 254
    4842:	48 80       	ld	r4, Y
    4844:	59 80       	ldd	r5, Y+1	; 0x01
    4846:	6a 80       	ldd	r6, Y+2	; 0x02
    4848:	7b 80       	ldd	r7, Y+3	; 0x03
    484a:	c1 51       	subi	r28, 0x11	; 17
    484c:	d1 40       	sbci	r29, 0x01	; 1
    484e:	cf 5f       	subi	r28, 0xFF	; 255
    4850:	de 4f       	sbci	r29, 0xFE	; 254
    4852:	48 82       	st	Y, r4
    4854:	59 82       	std	Y+1, r5	; 0x01
    4856:	6a 82       	std	Y+2, r6	; 0x02
    4858:	7b 82       	std	Y+3, r7	; 0x03
    485a:	c1 50       	subi	r28, 0x01	; 1
    485c:	d1 40       	sbci	r29, 0x01	; 1
  E = context->Intermediate_Hash[4];
  F = context->Intermediate_Hash[5];
  G = context->Intermediate_Hash[6];
  H = context->Intermediate_Hash[7];

  for (t = 0; t < 64; t++) {
    485e:	14 e2       	ldi	r17, 0x24	; 36
    4860:	61 2e       	mov	r6, r17
    4862:	12 e0       	ldi	r17, 0x02	; 2
    4864:	71 2e       	mov	r7, r17
    4866:	c1 5c       	subi	r28, 0xC1	; 193
    4868:	de 4f       	sbci	r29, 0xFE	; 254
    486a:	08 81       	ld	r16, Y
    486c:	19 81       	ldd	r17, Y+1	; 0x01
    486e:	cf 53       	subi	r28, 0x3F	; 63
    4870:	d1 40       	sbci	r29, 0x01	; 1
    4872:	60 16       	cp	r6, r16
    4874:	71 06       	cpc	r7, r17
    4876:	a9 f1       	breq	.+106    	; 0x48e2 <SHA224_256ProcessMessageBlock+0x734>
    4878:	c3 5f       	subi	r28, 0xF3	; 243
    487a:	de 4f       	sbci	r29, 0xFE	; 254
    487c:	08 81       	ld	r16, Y
    487e:	19 81       	ldd	r17, Y+1	; 0x01
    4880:	2a 81       	ldd	r18, Y+2	; 0x02
    4882:	3b 81       	ldd	r19, Y+3	; 0x03
    4884:	cd 50       	subi	r28, 0x0D	; 13
    4886:	d1 40       	sbci	r29, 0x01	; 1
    4888:	cf 5e       	subi	r28, 0xEF	; 239
    488a:	de 4f       	sbci	r29, 0xFE	; 254
    488c:	08 83       	st	Y, r16
    488e:	19 83       	std	Y+1, r17	; 0x01
    4890:	2a 83       	std	Y+2, r18	; 0x02
    4892:	3b 83       	std	Y+3, r19	; 0x03
    4894:	c1 51       	subi	r28, 0x11	; 17
    4896:	d1 40       	sbci	r29, 0x01	; 1
    4898:	c3 5f       	subi	r28, 0xF3	; 243
    489a:	de 4f       	sbci	r29, 0xFE	; 254
    489c:	88 83       	st	Y, r24
    489e:	99 83       	std	Y+1, r25	; 0x01
    48a0:	aa 83       	std	Y+2, r26	; 0x02
    48a2:	bb 83       	std	Y+3, r27	; 0x03
    48a4:	cd 50       	subi	r28, 0x0D	; 13
    48a6:	d1 40       	sbci	r29, 0x01	; 1
    temp1 = H + SHA256_SIGMA1(E) + SHA_Ch(E,F,G) + K[t] + W[t];
    temp2 = SHA256_SIGMA0(A) + SHA_Maj(A,B,C);
    H = G;
    G = F;
    F = E;
    E = D + temp1;
    48a8:	d5 01       	movw	r26, r10
    48aa:	c4 01       	movw	r24, r8
    48ac:	cb 5f       	subi	r28, 0xFB	; 251
    48ae:	de 4f       	sbci	r29, 0xFE	; 254
    48b0:	48 80       	ld	r4, Y
    48b2:	59 80       	ldd	r5, Y+1	; 0x01
    48b4:	6a 80       	ldd	r6, Y+2	; 0x02
    48b6:	7b 80       	ldd	r7, Y+3	; 0x03
    48b8:	c5 50       	subi	r28, 0x05	; 5
    48ba:	d1 40       	sbci	r29, 0x01	; 1
    48bc:	c7 5f       	subi	r28, 0xF7	; 247
    48be:	de 4f       	sbci	r29, 0xFE	; 254
    48c0:	48 82       	st	Y, r4
    48c2:	59 82       	std	Y+1, r5	; 0x01
    48c4:	6a 82       	std	Y+2, r6	; 0x02
    48c6:	7b 82       	std	Y+3, r7	; 0x03
    48c8:	c9 50       	subi	r28, 0x09	; 9
    48ca:	d1 40       	sbci	r29, 0x01	; 1
    48cc:	cb 5f       	subi	r28, 0xFB	; 251
    48ce:	de 4f       	sbci	r29, 0xFE	; 254
    48d0:	48 83       	st	Y, r20
    48d2:	59 83       	std	Y+1, r21	; 0x01
    48d4:	6a 83       	std	Y+2, r22	; 0x02
    48d6:	7b 83       	std	Y+3, r23	; 0x03
    48d8:	c5 50       	subi	r28, 0x05	; 5
    48da:	d1 40       	sbci	r29, 0x01	; 1
    D = C;
    C = B;
    B = A;
    A = temp1 + temp2;
    48dc:	b7 01       	movw	r22, r14
    48de:	a6 01       	movw	r20, r12
    48e0:	4e ce       	rjmp	.-868    	; 0x457e <SHA224_256ProcessMessageBlock+0x3d0>
  }

  context->Intermediate_Hash[0] += A;
    48e2:	c9 5e       	subi	r28, 0xE9	; 233
    48e4:	de 4f       	sbci	r29, 0xFE	; 254
    48e6:	48 80       	ld	r4, Y
    48e8:	59 80       	ldd	r5, Y+1	; 0x01
    48ea:	6a 80       	ldd	r6, Y+2	; 0x02
    48ec:	7b 80       	ldd	r7, Y+3	; 0x03
    48ee:	c7 51       	subi	r28, 0x17	; 23
    48f0:	d1 40       	sbci	r29, 0x01	; 1
    48f2:	c4 0c       	add	r12, r4
    48f4:	d5 1c       	adc	r13, r5
    48f6:	e6 1c       	adc	r14, r6
    48f8:	f7 1c       	adc	r15, r7
    48fa:	f1 01       	movw	r30, r2
    48fc:	c0 82       	st	Z, r12
    48fe:	d1 82       	std	Z+1, r13	; 0x01
    4900:	e2 82       	std	Z+2, r14	; 0x02
    4902:	f3 82       	std	Z+3, r15	; 0x03
  context->Intermediate_Hash[1] += B;
    4904:	c5 5e       	subi	r28, 0xE5	; 229
    4906:	de 4f       	sbci	r29, 0xFE	; 254
    4908:	48 80       	ld	r4, Y
    490a:	59 80       	ldd	r5, Y+1	; 0x01
    490c:	6a 80       	ldd	r6, Y+2	; 0x02
    490e:	7b 80       	ldd	r7, Y+3	; 0x03
    4910:	cb 51       	subi	r28, 0x1B	; 27
    4912:	d1 40       	sbci	r29, 0x01	; 1
    4914:	44 0d       	add	r20, r4
    4916:	55 1d       	adc	r21, r5
    4918:	66 1d       	adc	r22, r6
    491a:	77 1d       	adc	r23, r7
    491c:	44 83       	std	Z+4, r20	; 0x04
    491e:	55 83       	std	Z+5, r21	; 0x05
    4920:	66 83       	std	Z+6, r22	; 0x06
    4922:	77 83       	std	Z+7, r23	; 0x07
  context->Intermediate_Hash[2] += C;
    4924:	c1 5e       	subi	r28, 0xE1	; 225
    4926:	de 4f       	sbci	r29, 0xFE	; 254
    4928:	48 81       	ld	r20, Y
    492a:	59 81       	ldd	r21, Y+1	; 0x01
    492c:	6a 81       	ldd	r22, Y+2	; 0x02
    492e:	7b 81       	ldd	r23, Y+3	; 0x03
    4930:	cf 51       	subi	r28, 0x1F	; 31
    4932:	d1 40       	sbci	r29, 0x01	; 1
    4934:	cb 5f       	subi	r28, 0xFB	; 251
    4936:	de 4f       	sbci	r29, 0xFE	; 254
    4938:	48 80       	ld	r4, Y
    493a:	59 80       	ldd	r5, Y+1	; 0x01
    493c:	6a 80       	ldd	r6, Y+2	; 0x02
    493e:	7b 80       	ldd	r7, Y+3	; 0x03
    4940:	c5 50       	subi	r28, 0x05	; 5
    4942:	d1 40       	sbci	r29, 0x01	; 1
    4944:	44 0d       	add	r20, r4
    4946:	55 1d       	adc	r21, r5
    4948:	66 1d       	adc	r22, r6
    494a:	77 1d       	adc	r23, r7
    494c:	40 87       	std	Z+8, r20	; 0x08
    494e:	51 87       	std	Z+9, r21	; 0x09
    4950:	62 87       	std	Z+10, r22	; 0x0a
    4952:	73 87       	std	Z+11, r23	; 0x0b
  context->Intermediate_Hash[3] += D;
    4954:	cd 5d       	subi	r28, 0xDD	; 221
    4956:	de 4f       	sbci	r29, 0xFE	; 254
    4958:	48 81       	ld	r20, Y
    495a:	59 81       	ldd	r21, Y+1	; 0x01
    495c:	6a 81       	ldd	r22, Y+2	; 0x02
    495e:	7b 81       	ldd	r23, Y+3	; 0x03
    4960:	c3 52       	subi	r28, 0x23	; 35
    4962:	d1 40       	sbci	r29, 0x01	; 1
    4964:	c7 5f       	subi	r28, 0xF7	; 247
    4966:	de 4f       	sbci	r29, 0xFE	; 254
    4968:	48 80       	ld	r4, Y
    496a:	59 80       	ldd	r5, Y+1	; 0x01
    496c:	6a 80       	ldd	r6, Y+2	; 0x02
    496e:	7b 80       	ldd	r7, Y+3	; 0x03
    4970:	c9 50       	subi	r28, 0x09	; 9
    4972:	d1 40       	sbci	r29, 0x01	; 1
    4974:	44 0d       	add	r20, r4
    4976:	55 1d       	adc	r21, r5
    4978:	66 1d       	adc	r22, r6
    497a:	77 1d       	adc	r23, r7
    497c:	44 87       	std	Z+12, r20	; 0x0c
    497e:	55 87       	std	Z+13, r21	; 0x0d
    4980:	66 87       	std	Z+14, r22	; 0x0e
    4982:	77 87       	std	Z+15, r23	; 0x0f
  context->Intermediate_Hash[4] += E;
    4984:	c9 5d       	subi	r28, 0xD9	; 217
    4986:	de 4f       	sbci	r29, 0xFE	; 254
    4988:	48 81       	ld	r20, Y
    498a:	59 81       	ldd	r21, Y+1	; 0x01
    498c:	6a 81       	ldd	r22, Y+2	; 0x02
    498e:	7b 81       	ldd	r23, Y+3	; 0x03
    4990:	c7 52       	subi	r28, 0x27	; 39
    4992:	d1 40       	sbci	r29, 0x01	; 1
    4994:	48 0d       	add	r20, r8
    4996:	59 1d       	adc	r21, r9
    4998:	6a 1d       	adc	r22, r10
    499a:	7b 1d       	adc	r23, r11
    499c:	40 8b       	std	Z+16, r20	; 0x10
    499e:	51 8b       	std	Z+17, r21	; 0x11
    49a0:	62 8b       	std	Z+18, r22	; 0x12
    49a2:	73 8b       	std	Z+19, r23	; 0x13
  context->Intermediate_Hash[5] += F;
    49a4:	c5 5d       	subi	r28, 0xD5	; 213
    49a6:	de 4f       	sbci	r29, 0xFE	; 254
    49a8:	48 80       	ld	r4, Y
    49aa:	59 80       	ldd	r5, Y+1	; 0x01
    49ac:	6a 80       	ldd	r6, Y+2	; 0x02
    49ae:	7b 80       	ldd	r7, Y+3	; 0x03
    49b0:	cb 52       	subi	r28, 0x2B	; 43
    49b2:	d1 40       	sbci	r29, 0x01	; 1
    49b4:	84 0d       	add	r24, r4
    49b6:	95 1d       	adc	r25, r5
    49b8:	a6 1d       	adc	r26, r6
    49ba:	b7 1d       	adc	r27, r7
    49bc:	84 8b       	std	Z+20, r24	; 0x14
    49be:	95 8b       	std	Z+21, r25	; 0x15
    49c0:	a6 8b       	std	Z+22, r26	; 0x16
    49c2:	b7 8b       	std	Z+23, r27	; 0x17
  context->Intermediate_Hash[6] += G;
    49c4:	c1 5d       	subi	r28, 0xD1	; 209
    49c6:	de 4f       	sbci	r29, 0xFE	; 254
    49c8:	88 81       	ld	r24, Y
    49ca:	99 81       	ldd	r25, Y+1	; 0x01
    49cc:	aa 81       	ldd	r26, Y+2	; 0x02
    49ce:	bb 81       	ldd	r27, Y+3	; 0x03
    49d0:	cf 52       	subi	r28, 0x2F	; 47
    49d2:	d1 40       	sbci	r29, 0x01	; 1
    49d4:	c3 5f       	subi	r28, 0xF3	; 243
    49d6:	de 4f       	sbci	r29, 0xFE	; 254
    49d8:	48 80       	ld	r4, Y
    49da:	59 80       	ldd	r5, Y+1	; 0x01
    49dc:	6a 80       	ldd	r6, Y+2	; 0x02
    49de:	7b 80       	ldd	r7, Y+3	; 0x03
    49e0:	cd 50       	subi	r28, 0x0D	; 13
    49e2:	d1 40       	sbci	r29, 0x01	; 1
    49e4:	84 0d       	add	r24, r4
    49e6:	95 1d       	adc	r25, r5
    49e8:	a6 1d       	adc	r26, r6
    49ea:	b7 1d       	adc	r27, r7
    49ec:	80 8f       	std	Z+24, r24	; 0x18
    49ee:	91 8f       	std	Z+25, r25	; 0x19
    49f0:	a2 8f       	std	Z+26, r26	; 0x1a
    49f2:	b3 8f       	std	Z+27, r27	; 0x1b
  context->Intermediate_Hash[7] += H;
    49f4:	cd 5c       	subi	r28, 0xCD	; 205
    49f6:	de 4f       	sbci	r29, 0xFE	; 254
    49f8:	88 81       	ld	r24, Y
    49fa:	99 81       	ldd	r25, Y+1	; 0x01
    49fc:	aa 81       	ldd	r26, Y+2	; 0x02
    49fe:	bb 81       	ldd	r27, Y+3	; 0x03
    4a00:	c3 53       	subi	r28, 0x33	; 51
    4a02:	d1 40       	sbci	r29, 0x01	; 1
    4a04:	cf 5e       	subi	r28, 0xEF	; 239
    4a06:	de 4f       	sbci	r29, 0xFE	; 254
    4a08:	48 80       	ld	r4, Y
    4a0a:	59 80       	ldd	r5, Y+1	; 0x01
    4a0c:	6a 80       	ldd	r6, Y+2	; 0x02
    4a0e:	7b 80       	ldd	r7, Y+3	; 0x03
    4a10:	c1 51       	subi	r28, 0x11	; 17
    4a12:	d1 40       	sbci	r29, 0x01	; 1
    4a14:	84 0d       	add	r24, r4
    4a16:	95 1d       	adc	r25, r5
    4a18:	a6 1d       	adc	r26, r6
    4a1a:	b7 1d       	adc	r27, r7
    4a1c:	84 8f       	std	Z+28, r24	; 0x1c
    4a1e:	95 8f       	std	Z+29, r25	; 0x1d
    4a20:	a6 8f       	std	Z+30, r26	; 0x1e
    4a22:	b7 8f       	std	Z+31, r27	; 0x1f

  context->Message_Block_Index = 0;
    4a24:	11 a6       	std	Z+41, r1	; 0x29
    4a26:	10 a6       	std	Z+40, r1	; 0x28
}
    4a28:	c0 5c       	subi	r28, 0xC0	; 192
    4a2a:	de 4f       	sbci	r29, 0xFE	; 254
    4a2c:	0f b6       	in	r0, 0x3f	; 63
    4a2e:	f8 94       	cli
    4a30:	de bf       	out	0x3e, r29	; 62
    4a32:	0f be       	out	0x3f, r0	; 63
    4a34:	cd bf       	out	0x3d, r28	; 61
    4a36:	df 91       	pop	r29
    4a38:	cf 91       	pop	r28
    4a3a:	1f 91       	pop	r17
    4a3c:	0f 91       	pop	r16
    4a3e:	ff 90       	pop	r15
    4a40:	ef 90       	pop	r14
    4a42:	df 90       	pop	r13
    4a44:	cf 90       	pop	r12
    4a46:	bf 90       	pop	r11
    4a48:	af 90       	pop	r10
    4a4a:	9f 90       	pop	r9
    4a4c:	8f 90       	pop	r8
    4a4e:	7f 90       	pop	r7
    4a50:	6f 90       	pop	r6
    4a52:	5f 90       	pop	r5
    4a54:	4f 90       	pop	r4
    4a56:	3f 90       	pop	r3
    4a58:	2f 90       	pop	r2
    4a5a:	08 95       	ret

00004a5c <SHA256Reset>:
 *
 * Returns:
 *   sha Error Code.
 */
int SHA256Reset(SHA256Context *context)
{
    4a5c:	fc 01       	movw	r30, r24
 * Returns:
 *   sha Error Code.
 */
static int SHA224_256Reset(SHA256Context *context, uint32_t *H0)
{
  if (!context) return shaNull;
    4a5e:	89 2b       	or	r24, r25
    4a60:	09 f4       	brne	.+2      	; 0x4a64 <SHA256Reset+0x8>
    4a62:	76 c0       	rjmp	.+236    	; 0x4b50 <SHA256Reset+0xf4>

  context->Length_High = context->Length_Low = 0;
    4a64:	14 a2       	std	Z+36, r1	; 0x24
    4a66:	15 a2       	std	Z+37, r1	; 0x25
    4a68:	16 a2       	std	Z+38, r1	; 0x26
    4a6a:	17 a2       	std	Z+39, r1	; 0x27
    4a6c:	10 a2       	std	Z+32, r1	; 0x20
    4a6e:	11 a2       	std	Z+33, r1	; 0x21
    4a70:	12 a2       	std	Z+34, r1	; 0x22
    4a72:	13 a2       	std	Z+35, r1	; 0x23
  context->Message_Block_Index  = 0;
    4a74:	11 a6       	std	Z+41, r1	; 0x29
    4a76:	10 a6       	std	Z+40, r1	; 0x28

  context->Intermediate_Hash[0] = H0[0];
    4a78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4a7c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4a80:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    4a84:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    4a88:	80 83       	st	Z, r24
    4a8a:	91 83       	std	Z+1, r25	; 0x01
    4a8c:	a2 83       	std	Z+2, r26	; 0x02
    4a8e:	b3 83       	std	Z+3, r27	; 0x03
  context->Intermediate_Hash[1] = H0[1];
    4a90:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    4a94:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    4a98:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    4a9c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    4aa0:	84 83       	std	Z+4, r24	; 0x04
    4aa2:	95 83       	std	Z+5, r25	; 0x05
    4aa4:	a6 83       	std	Z+6, r26	; 0x06
    4aa6:	b7 83       	std	Z+7, r27	; 0x07
  context->Intermediate_Hash[2] = H0[2];
    4aa8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    4aac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
    4ab0:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
    4ab4:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
    4ab8:	80 87       	std	Z+8, r24	; 0x08
    4aba:	91 87       	std	Z+9, r25	; 0x09
    4abc:	a2 87       	std	Z+10, r26	; 0x0a
    4abe:	b3 87       	std	Z+11, r27	; 0x0b
  context->Intermediate_Hash[3] = H0[3];
    4ac0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__DATA_REGION_ORIGIN__+0xc>
    4ac4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__DATA_REGION_ORIGIN__+0xd>
    4ac8:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    4acc:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
    4ad0:	84 87       	std	Z+12, r24	; 0x0c
    4ad2:	95 87       	std	Z+13, r25	; 0x0d
    4ad4:	a6 87       	std	Z+14, r26	; 0x0e
    4ad6:	b7 87       	std	Z+15, r27	; 0x0f
  context->Intermediate_Hash[4] = H0[4];
    4ad8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__DATA_REGION_ORIGIN__+0x10>
    4adc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__DATA_REGION_ORIGIN__+0x11>
    4ae0:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__DATA_REGION_ORIGIN__+0x12>
    4ae4:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__DATA_REGION_ORIGIN__+0x13>
    4ae8:	80 8b       	std	Z+16, r24	; 0x10
    4aea:	91 8b       	std	Z+17, r25	; 0x11
    4aec:	a2 8b       	std	Z+18, r26	; 0x12
    4aee:	b3 8b       	std	Z+19, r27	; 0x13
  context->Intermediate_Hash[5] = H0[5];
    4af0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__DATA_REGION_ORIGIN__+0x14>
    4af4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__DATA_REGION_ORIGIN__+0x15>
    4af8:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__DATA_REGION_ORIGIN__+0x16>
    4afc:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__DATA_REGION_ORIGIN__+0x17>
    4b00:	84 8b       	std	Z+20, r24	; 0x14
    4b02:	95 8b       	std	Z+21, r25	; 0x15
    4b04:	a6 8b       	std	Z+22, r26	; 0x16
    4b06:	b7 8b       	std	Z+23, r27	; 0x17
  context->Intermediate_Hash[6] = H0[6];
    4b08:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__DATA_REGION_ORIGIN__+0x18>
    4b0c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__DATA_REGION_ORIGIN__+0x19>
    4b10:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__DATA_REGION_ORIGIN__+0x1a>
    4b14:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__DATA_REGION_ORIGIN__+0x1b>
    4b18:	80 8f       	std	Z+24, r24	; 0x18
    4b1a:	91 8f       	std	Z+25, r25	; 0x19
    4b1c:	a2 8f       	std	Z+26, r26	; 0x1a
    4b1e:	b3 8f       	std	Z+27, r27	; 0x1b
  context->Intermediate_Hash[7] = H0[7];
    4b20:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__DATA_REGION_ORIGIN__+0x1c>
    4b24:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__DATA_REGION_ORIGIN__+0x1d>
    4b28:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <__DATA_REGION_ORIGIN__+0x1e>
    4b2c:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <__DATA_REGION_ORIGIN__+0x1f>
    4b30:	84 8f       	std	Z+28, r24	; 0x1c
    4b32:	95 8f       	std	Z+29, r25	; 0x1d
    4b34:	a6 8f       	std	Z+30, r26	; 0x1e
    4b36:	b7 8f       	std	Z+31, r27	; 0x1f

  context->Computed  = 0;
    4b38:	df 01       	movw	r26, r30
    4b3a:	a6 59       	subi	r26, 0x96	; 150
    4b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b3e:	1d 92       	st	X+, r1
    4b40:	1c 92       	st	X, r1
  context->Corrupted = shaSuccess;
    4b42:	e4 59       	subi	r30, 0x94	; 148
    4b44:	ff 4f       	sbci	r31, 0xFF	; 255
    4b46:	11 82       	std	Z+1, r1	; 0x01
    4b48:	10 82       	st	Z, r1

  return shaSuccess;
    4b4a:	80 e0       	ldi	r24, 0x00	; 0
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	08 95       	ret
 * Returns:
 *   sha Error Code.
 */
static int SHA224_256Reset(SHA256Context *context, uint32_t *H0)
{
  if (!context) return shaNull;
    4b50:	81 e0       	ldi	r24, 0x01	; 1
    4b52:	90 e0       	ldi	r25, 0x00	; 0
 *   sha Error Code.
 */
int SHA256Reset(SHA256Context *context)
{
  return SHA224_256Reset(context, SHA256_H0);
}
    4b54:	08 95       	ret

00004b56 <SHA256Input>:
 * Returns:
 *   sha Error Code.
 */
int SHA256Input(SHA256Context *context, const uint8_t *message_array,
    unsigned int length)
{
    4b56:	cf 92       	push	r12
    4b58:	df 92       	push	r13
    4b5a:	ef 92       	push	r14
    4b5c:	ff 92       	push	r15
    4b5e:	0f 93       	push	r16
    4b60:	1f 93       	push	r17
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
  if (!context) return shaNull;
    4b66:	00 97       	sbiw	r24, 0x00	; 0
    4b68:	09 f4       	brne	.+2      	; 0x4b6c <SHA256Input+0x16>
    4b6a:	72 c0       	rjmp	.+228    	; 0x4c50 <SHA256Input+0xfa>
  if (!length) return shaSuccess;
    4b6c:	41 15       	cp	r20, r1
    4b6e:	51 05       	cpc	r21, r1
    4b70:	09 f4       	brne	.+2      	; 0x4b74 <SHA256Input+0x1e>
    4b72:	6b c0       	rjmp	.+214    	; 0x4c4a <SHA256Input+0xf4>
  if (!message_array) return shaNull;
    4b74:	61 15       	cp	r22, r1
    4b76:	71 05       	cpc	r23, r1
    4b78:	09 f4       	brne	.+2      	; 0x4b7c <SHA256Input+0x26>
    4b7a:	6a c0       	rjmp	.+212    	; 0x4c50 <SHA256Input+0xfa>
  if (context->Computed) return context->Corrupted = shaStateError;
    4b7c:	fc 01       	movw	r30, r24
    4b7e:	e6 59       	subi	r30, 0x96	; 150
    4b80:	ff 4f       	sbci	r31, 0xFF	; 255
    4b82:	20 81       	ld	r18, Z
    4b84:	31 81       	ldd	r19, Z+1	; 0x01
    4b86:	32 96       	adiw	r30, 0x02	; 2
    4b88:	6f 01       	movw	r12, r30
    4b8a:	23 2b       	or	r18, r19
    4b8c:	39 f0       	breq	.+14     	; 0x4b9c <SHA256Input+0x46>
    4b8e:	83 e0       	ldi	r24, 0x03	; 3
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	91 83       	std	Z+1, r25	; 0x01
    4b94:	80 83       	st	Z, r24
    4b96:	23 e0       	ldi	r18, 0x03	; 3
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	5c c0       	rjmp	.+184    	; 0x4c54 <SHA256Input+0xfe>
  if (context->Corrupted) return context->Corrupted;
    4b9c:	20 81       	ld	r18, Z
    4b9e:	31 81       	ldd	r19, Z+1	; 0x01
    4ba0:	21 15       	cp	r18, r1
    4ba2:	31 05       	cpc	r19, r1
    4ba4:	09 f0       	breq	.+2      	; 0x4ba8 <SHA256Input+0x52>
    4ba6:	56 c0       	rjmp	.+172    	; 0x4c54 <SHA256Input+0xfe>
    4ba8:	ec 01       	movw	r28, r24
    4baa:	8b 01       	movw	r16, r22
    4bac:	7b 01       	movw	r14, r22
    4bae:	e4 0e       	add	r14, r20
    4bb0:	f5 1e       	adc	r15, r21

  while (length--) {
    4bb2:	0e 15       	cp	r16, r14
    4bb4:	1f 05       	cpc	r17, r15
    4bb6:	09 f4       	brne	.+2      	; 0x4bba <SHA256Input+0x64>
    4bb8:	44 c0       	rjmp	.+136    	; 0x4c42 <SHA256Input+0xec>
    context->Message_Block[context->Message_Block_Index++] =
    4bba:	88 a5       	ldd	r24, Y+40	; 0x28
    4bbc:	99 a5       	ldd	r25, Y+41	; 0x29
    4bbe:	9c 01       	movw	r18, r24
    4bc0:	2f 5f       	subi	r18, 0xFF	; 255
    4bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc4:	39 a7       	std	Y+41, r19	; 0x29
    4bc6:	28 a7       	std	Y+40, r18	; 0x28
            *message_array;
    4bc8:	f8 01       	movw	r30, r16
    4bca:	21 91       	ld	r18, Z+
    4bcc:	8f 01       	movw	r16, r30
  if (!message_array) return shaNull;
  if (context->Computed) return context->Corrupted = shaStateError;
  if (context->Corrupted) return context->Corrupted;

  while (length--) {
    context->Message_Block[context->Message_Block_Index++] =
    4bce:	fe 01       	movw	r30, r28
    4bd0:	e8 0f       	add	r30, r24
    4bd2:	f9 1f       	adc	r31, r25
    4bd4:	22 a7       	std	Z+42, r18	; 0x2a
            *message_array;

    if ((SHA224_256AddLength(context, 8) == shaSuccess) &&
    4bd6:	4c a1       	ldd	r20, Y+36	; 0x24
    4bd8:	5d a1       	ldd	r21, Y+37	; 0x25
    4bda:	6e a1       	ldd	r22, Y+38	; 0x26
    4bdc:	7f a1       	ldd	r23, Y+39	; 0x27
    4bde:	db 01       	movw	r26, r22
    4be0:	ca 01       	movw	r24, r20
    4be2:	08 96       	adiw	r24, 0x08	; 8
    4be4:	a1 1d       	adc	r26, r1
    4be6:	b1 1d       	adc	r27, r1
    4be8:	8c a3       	std	Y+36, r24	; 0x24
    4bea:	9d a3       	std	Y+37, r25	; 0x25
    4bec:	ae a3       	std	Y+38, r26	; 0x26
    4bee:	bf a3       	std	Y+39, r27	; 0x27
    4bf0:	84 17       	cp	r24, r20
    4bf2:	95 07       	cpc	r25, r21
    4bf4:	a6 07       	cpc	r26, r22
    4bf6:	b7 07       	cpc	r27, r23
    4bf8:	20 f0       	brcs	.+8      	; 0x4c02 <SHA256Input+0xac>
    4bfa:	f6 01       	movw	r30, r12
    4bfc:	80 81       	ld	r24, Z
    4bfe:	91 81       	ldd	r25, Z+1	; 0x01
    4c00:	11 c0       	rjmp	.+34     	; 0x4c24 <SHA256Input+0xce>
    4c02:	88 a1       	ldd	r24, Y+32	; 0x20
    4c04:	99 a1       	ldd	r25, Y+33	; 0x21
    4c06:	aa a1       	ldd	r26, Y+34	; 0x22
    4c08:	bb a1       	ldd	r27, Y+35	; 0x23
    4c0a:	01 96       	adiw	r24, 0x01	; 1
    4c0c:	a1 1d       	adc	r26, r1
    4c0e:	b1 1d       	adc	r27, r1
    4c10:	88 a3       	std	Y+32, r24	; 0x20
    4c12:	99 a3       	std	Y+33, r25	; 0x21
    4c14:	aa a3       	std	Y+34, r26	; 0x22
    4c16:	bb a3       	std	Y+35, r27	; 0x23
    4c18:	89 2b       	or	r24, r25
    4c1a:	8a 2b       	or	r24, r26
    4c1c:	8b 2b       	or	r24, r27
    4c1e:	69 f7       	brne	.-38     	; 0x4bfa <SHA256Input+0xa4>
    4c20:	82 e0       	ldi	r24, 0x02	; 2
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	f6 01       	movw	r30, r12
    4c26:	91 83       	std	Z+1, r25	; 0x01
    4c28:	80 83       	st	Z, r24
    4c2a:	89 2b       	or	r24, r25
    4c2c:	11 f6       	brne	.-124    	; 0x4bb2 <SHA256Input+0x5c>
    4c2e:	88 a5       	ldd	r24, Y+40	; 0x28
    4c30:	99 a5       	ldd	r25, Y+41	; 0x29
    4c32:	80 34       	cpi	r24, 0x40	; 64
    4c34:	91 05       	cpc	r25, r1
    4c36:	09 f0       	breq	.+2      	; 0x4c3a <SHA256Input+0xe4>
    4c38:	bc cf       	rjmp	.-136    	; 0x4bb2 <SHA256Input+0x5c>
      (context->Message_Block_Index == SHA256_Message_Block_Size))
      SHA224_256ProcessMessageBlock(context);
    4c3a:	ce 01       	movw	r24, r28
    4c3c:	0e 94 d7 20 	call	0x41ae	; 0x41ae <SHA224_256ProcessMessageBlock>
    4c40:	b8 cf       	rjmp	.-144    	; 0x4bb2 <SHA256Input+0x5c>

    message_array++;
  }

  return context->Corrupted;
    4c42:	f6 01       	movw	r30, r12
    4c44:	20 81       	ld	r18, Z
    4c46:	31 81       	ldd	r19, Z+1	; 0x01
    4c48:	05 c0       	rjmp	.+10     	; 0x4c54 <SHA256Input+0xfe>
 */
int SHA256Input(SHA256Context *context, const uint8_t *message_array,
    unsigned int length)
{
  if (!context) return shaNull;
  if (!length) return shaSuccess;
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	02 c0       	rjmp	.+4      	; 0x4c54 <SHA256Input+0xfe>
 *   sha Error Code.
 */
int SHA256Input(SHA256Context *context, const uint8_t *message_array,
    unsigned int length)
{
  if (!context) return shaNull;
    4c50:	21 e0       	ldi	r18, 0x01	; 1
    4c52:	30 e0       	ldi	r19, 0x00	; 0
    message_array++;
  }

  return context->Corrupted;

}
    4c54:	c9 01       	movw	r24, r18
    4c56:	df 91       	pop	r29
    4c58:	cf 91       	pop	r28
    4c5a:	1f 91       	pop	r17
    4c5c:	0f 91       	pop	r16
    4c5e:	ff 90       	pop	r15
    4c60:	ef 90       	pop	r14
    4c62:	df 90       	pop	r13
    4c64:	cf 90       	pop	r12
    4c66:	08 95       	ret

00004c68 <SHA256Result>:
 * Returns:
 *   sha Error Code.
 */
int SHA256Result(SHA256Context *context,
                 uint8_t Message_Digest[SHA256HashSize])
{
    4c68:	cf 92       	push	r12
    4c6a:	df 92       	push	r13
    4c6c:	ef 92       	push	r14
    4c6e:	ff 92       	push	r15
    4c70:	0f 93       	push	r16
    4c72:	1f 93       	push	r17
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
static int SHA224_256ResultN(SHA256Context *context,
    uint8_t Message_Digest[ ], int HashSize)
{
  int i;

  if (!context) return shaNull;
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	09 f4       	brne	.+2      	; 0x4c7e <SHA256Result+0x16>
    4c7c:	9d c0       	rjmp	.+314    	; 0x4db8 <SHA256Result+0x150>
  if (!Message_Digest) return shaNull;
    4c7e:	61 15       	cp	r22, r1
    4c80:	71 05       	cpc	r23, r1
    4c82:	09 f4       	brne	.+2      	; 0x4c86 <SHA256Result+0x1e>
    4c84:	99 c0       	rjmp	.+306    	; 0x4db8 <SHA256Result+0x150>
  if (context->Corrupted) return context->Corrupted;
    4c86:	fc 01       	movw	r30, r24
    4c88:	e4 59       	subi	r30, 0x94	; 148
    4c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8c:	e0 80       	ld	r14, Z
    4c8e:	f1 80       	ldd	r15, Z+1	; 0x01
    4c90:	e1 14       	cp	r14, r1
    4c92:	f1 04       	cpc	r15, r1
    4c94:	09 f0       	breq	.+2      	; 0x4c98 <SHA256Result+0x30>
    4c96:	93 c0       	rjmp	.+294    	; 0x4dbe <SHA256Result+0x156>
    4c98:	8b 01       	movw	r16, r22
    4c9a:	ec 01       	movw	r28, r24

  if (!context->Computed)
    4c9c:	6c 01       	movw	r12, r24
    4c9e:	8a e6       	ldi	r24, 0x6A	; 106
    4ca0:	c8 0e       	add	r12, r24
    4ca2:	d1 1c       	adc	r13, r1
    4ca4:	f6 01       	movw	r30, r12
    4ca6:	80 81       	ld	r24, Z
    4ca8:	91 81       	ldd	r25, Z+1	; 0x01
    4caa:	89 2b       	or	r24, r25
    4cac:	09 f0       	breq	.+2      	; 0x4cb0 <SHA256Result+0x48>
    4cae:	62 c0       	rjmp	.+196    	; 0x4d74 <SHA256Result+0x10c>
   * Check to see if the current message block is too small to hold
   * the initial padding bits and length.  If so, we will pad the
   * block, process it, and then continue padding into a second
   * block.
   */
  if (context->Message_Block_Index >= (SHA256_Message_Block_Size-8)) {
    4cb0:	88 a5       	ldd	r24, Y+40	; 0x28
    4cb2:	99 a5       	ldd	r25, Y+41	; 0x29
    4cb4:	9c 01       	movw	r18, r24
    4cb6:	2f 5f       	subi	r18, 0xFF	; 255
    4cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cba:	fe 01       	movw	r30, r28
    4cbc:	e8 0f       	add	r30, r24
    4cbe:	f9 1f       	adc	r31, r25
    context->Message_Block[context->Message_Block_Index++] = Pad_Byte;
    4cc0:	39 a7       	std	Y+41, r19	; 0x29
    4cc2:	28 a7       	std	Y+40, r18	; 0x28
   * Check to see if the current message block is too small to hold
   * the initial padding bits and length.  If so, we will pad the
   * block, process it, and then continue padding into a second
   * block.
   */
  if (context->Message_Block_Index >= (SHA256_Message_Block_Size-8)) {
    4cc4:	c8 97       	sbiw	r24, 0x38	; 56
    4cc6:	ac f0       	brlt	.+42     	; 0x4cf2 <SHA256Result+0x8a>
    context->Message_Block[context->Message_Block_Index++] = Pad_Byte;
    4cc8:	80 e8       	ldi	r24, 0x80	; 128
    4cca:	82 a7       	std	Z+42, r24	; 0x2a
    while (context->Message_Block_Index < SHA256_Message_Block_Size)
    4ccc:	88 a5       	ldd	r24, Y+40	; 0x28
    4cce:	99 a5       	ldd	r25, Y+41	; 0x29
    4cd0:	80 34       	cpi	r24, 0x40	; 64
    4cd2:	91 05       	cpc	r25, r1
    4cd4:	54 f4       	brge	.+20     	; 0x4cea <SHA256Result+0x82>
      context->Message_Block[context->Message_Block_Index++] = 0;
    4cd6:	9c 01       	movw	r18, r24
    4cd8:	2f 5f       	subi	r18, 0xFF	; 255
    4cda:	3f 4f       	sbci	r19, 0xFF	; 255
    4cdc:	39 a7       	std	Y+41, r19	; 0x29
    4cde:	28 a7       	std	Y+40, r18	; 0x28
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	e8 0f       	add	r30, r24
    4ce4:	f9 1f       	adc	r31, r25
    4ce6:	12 a6       	std	Z+42, r1	; 0x2a
    4ce8:	f1 cf       	rjmp	.-30     	; 0x4ccc <SHA256Result+0x64>
    SHA224_256ProcessMessageBlock(context);
    4cea:	ce 01       	movw	r24, r28
    4cec:	0e 94 d7 20 	call	0x41ae	; 0x41ae <SHA224_256ProcessMessageBlock>
    4cf0:	02 c0       	rjmp	.+4      	; 0x4cf6 <SHA256Result+0x8e>
  } else
    context->Message_Block[context->Message_Block_Index++] = Pad_Byte;
    4cf2:	80 e8       	ldi	r24, 0x80	; 128
    4cf4:	82 a7       	std	Z+42, r24	; 0x2a

  while (context->Message_Block_Index < (SHA256_Message_Block_Size-8))
    4cf6:	88 a5       	ldd	r24, Y+40	; 0x28
    4cf8:	99 a5       	ldd	r25, Y+41	; 0x29
    4cfa:	88 33       	cpi	r24, 0x38	; 56
    4cfc:	91 05       	cpc	r25, r1
    4cfe:	54 f4       	brge	.+20     	; 0x4d14 <SHA256Result+0xac>
    context->Message_Block[context->Message_Block_Index++] = 0;
    4d00:	9c 01       	movw	r18, r24
    4d02:	2f 5f       	subi	r18, 0xFF	; 255
    4d04:	3f 4f       	sbci	r19, 0xFF	; 255
    4d06:	39 a7       	std	Y+41, r19	; 0x29
    4d08:	28 a7       	std	Y+40, r18	; 0x28
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	e8 0f       	add	r30, r24
    4d0e:	f9 1f       	adc	r31, r25
    4d10:	12 a6       	std	Z+42, r1	; 0x2a
    4d12:	f1 cf       	rjmp	.-30     	; 0x4cf6 <SHA256Result+0x8e>

  /*
   * Store the message length as the last 8 octets
   */
  context->Message_Block[56] = (uint8_t)(context->Length_High >> 24);
    4d14:	88 a1       	ldd	r24, Y+32	; 0x20
    4d16:	99 a1       	ldd	r25, Y+33	; 0x21
    4d18:	2a a1       	ldd	r18, Y+34	; 0x22
    4d1a:	3b a1       	ldd	r19, Y+35	; 0x23
    4d1c:	fe 01       	movw	r30, r28
    4d1e:	ee 59       	subi	r30, 0x9E	; 158
    4d20:	ff 4f       	sbci	r31, 0xFF	; 255
    4d22:	30 83       	st	Z, r19
  context->Message_Block[57] = (uint8_t)(context->Length_High >> 16);
    4d24:	31 96       	adiw	r30, 0x01	; 1
    4d26:	20 83       	st	Z, r18
  context->Message_Block[58] = (uint8_t)(context->Length_High >> 8);
    4d28:	31 96       	adiw	r30, 0x01	; 1
    4d2a:	90 83       	st	Z, r25
  context->Message_Block[59] = (uint8_t)(context->Length_High);
    4d2c:	31 96       	adiw	r30, 0x01	; 1
    4d2e:	80 83       	st	Z, r24
  context->Message_Block[60] = (uint8_t)(context->Length_Low >> 24);
    4d30:	8c a1       	ldd	r24, Y+36	; 0x24
    4d32:	9d a1       	ldd	r25, Y+37	; 0x25
    4d34:	2e a1       	ldd	r18, Y+38	; 0x26
    4d36:	3f a1       	ldd	r19, Y+39	; 0x27
    4d38:	31 96       	adiw	r30, 0x01	; 1
    4d3a:	30 83       	st	Z, r19
  context->Message_Block[61] = (uint8_t)(context->Length_Low >> 16);
    4d3c:	31 96       	adiw	r30, 0x01	; 1
    4d3e:	20 83       	st	Z, r18
  context->Message_Block[62] = (uint8_t)(context->Length_Low >> 8);
    4d40:	31 96       	adiw	r30, 0x01	; 1
    4d42:	90 83       	st	Z, r25
  context->Message_Block[63] = (uint8_t)(context->Length_Low);
    4d44:	31 96       	adiw	r30, 0x01	; 1
    4d46:	80 83       	st	Z, r24

  SHA224_256ProcessMessageBlock(context);
    4d48:	ce 01       	movw	r24, r28
    4d4a:	0e 94 d7 20 	call	0x41ae	; 0x41ae <SHA224_256ProcessMessageBlock>
    4d4e:	fe 01       	movw	r30, r28
    4d50:	ba 96       	adiw	r30, 0x2a	; 42
{
  int i;
  SHA224_256PadMessage(context, Pad_Byte);
  /* message may be sensitive, so clear it out */
  for (i = 0; i < SHA256_Message_Block_Size; ++i)
    context->Message_Block[i] = 0;
    4d52:	11 92       	st	Z+, r1
    uint8_t Pad_Byte)
{
  int i;
  SHA224_256PadMessage(context, Pad_Byte);
  /* message may be sensitive, so clear it out */
  for (i = 0; i < SHA256_Message_Block_Size; ++i)
    4d54:	ce 16       	cp	r12, r30
    4d56:	df 06       	cpc	r13, r31
    4d58:	e1 f7       	brne	.-8      	; 0x4d52 <SHA256Result+0xea>
    context->Message_Block[i] = 0;
  context->Length_High = 0;     /* and clear length */
    4d5a:	18 a2       	std	Y+32, r1	; 0x20
    4d5c:	19 a2       	std	Y+33, r1	; 0x21
    4d5e:	1a a2       	std	Y+34, r1	; 0x22
    4d60:	1b a2       	std	Y+35, r1	; 0x23
  context->Length_Low = 0;
    4d62:	1c a2       	std	Y+36, r1	; 0x24
    4d64:	1d a2       	std	Y+37, r1	; 0x25
    4d66:	1e a2       	std	Y+38, r1	; 0x26
    4d68:	1f a2       	std	Y+39, r1	; 0x27
  context->Computed = 1;
    4d6a:	81 e0       	ldi	r24, 0x01	; 1
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	f6 01       	movw	r30, r12
    4d70:	91 83       	std	Z+1, r25	; 0x01
    4d72:	80 83       	st	Z, r24
    4d74:	f8 01       	movw	r30, r16
 * Returns:
 *   sha Error Code.
 */
int SHA256Result(SHA256Context *context,
                 uint8_t Message_Digest[SHA256HashSize])
{
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	90 e0       	ldi	r25, 0x00	; 0
  if (!context->Computed)
    SHA224_256Finalize(context, 0x80);

  for (i = 0; i < HashSize; ++i)
    Message_Digest[i] = (uint8_t)
      (context->Intermediate_Hash[i>>2] >> 8 * ( 3 - ( i & 0x03 ) ));
    4d7a:	dc 01       	movw	r26, r24
    4d7c:	ac 7f       	andi	r26, 0xFC	; 252
    4d7e:	ac 0f       	add	r26, r28
    4d80:	bd 1f       	adc	r27, r29

  if (!context->Computed)
    SHA224_256Finalize(context, 0x80);

  for (i = 0; i < HashSize; ++i)
    Message_Digest[i] = (uint8_t)
    4d82:	9c 01       	movw	r18, r24
    4d84:	20 95       	com	r18
    4d86:	30 95       	com	r19
    4d88:	23 70       	andi	r18, 0x03	; 3
    4d8a:	33 27       	eor	r19, r19
    4d8c:	43 e0       	ldi	r20, 0x03	; 3
    4d8e:	22 0f       	add	r18, r18
    4d90:	33 1f       	adc	r19, r19
    4d92:	4a 95       	dec	r20
    4d94:	e1 f7       	brne	.-8      	; 0x4d8e <SHA256Result+0x126>
    4d96:	4d 91       	ld	r20, X+
    4d98:	5d 91       	ld	r21, X+
    4d9a:	6d 91       	ld	r22, X+
    4d9c:	7c 91       	ld	r23, X
    4d9e:	04 c0       	rjmp	.+8      	; 0x4da8 <SHA256Result+0x140>
    4da0:	76 95       	lsr	r23
    4da2:	67 95       	ror	r22
    4da4:	57 95       	ror	r21
    4da6:	47 95       	ror	r20
    4da8:	2a 95       	dec	r18
    4daa:	d2 f7       	brpl	.-12     	; 0x4da0 <SHA256Result+0x138>
    4dac:	41 93       	st	Z+, r20
  if (context->Corrupted) return context->Corrupted;

  if (!context->Computed)
    SHA224_256Finalize(context, 0x80);

  for (i = 0; i < HashSize; ++i)
    4dae:	01 96       	adiw	r24, 0x01	; 1
    4db0:	80 32       	cpi	r24, 0x20	; 32
    4db2:	91 05       	cpc	r25, r1
    4db4:	11 f7       	brne	.-60     	; 0x4d7a <SHA256Result+0x112>
    4db6:	03 c0       	rjmp	.+6      	; 0x4dbe <SHA256Result+0x156>
static int SHA224_256ResultN(SHA256Context *context,
    uint8_t Message_Digest[ ], int HashSize)
{
  int i;

  if (!context) return shaNull;
    4db8:	ee 24       	eor	r14, r14
    4dba:	e3 94       	inc	r14
    4dbc:	f1 2c       	mov	r15, r1
 */
int SHA256Result(SHA256Context *context,
                 uint8_t Message_Digest[SHA256HashSize])
{
  return SHA224_256ResultN(context, Message_Digest, SHA256HashSize);
}
    4dbe:	c7 01       	movw	r24, r14
    4dc0:	df 91       	pop	r29
    4dc2:	cf 91       	pop	r28
    4dc4:	1f 91       	pop	r17
    4dc6:	0f 91       	pop	r16
    4dc8:	ff 90       	pop	r15
    4dca:	ef 90       	pop	r14
    4dcc:	df 90       	pop	r13
    4dce:	cf 90       	pop	r12
    4dd0:	08 95       	ret

00004dd2 <usart_init>:
#include "usart.h"
#include <stdio.h>
#include <stdlib.h>

void usart_init(uint32_t ubrr)
{
    4dd2:	0f 93       	push	r16
    4dd4:	1f 93       	push	r17
    /** Set baud rate*/
    UBRR0H = (unsigned char)(ubrr >> 8);
    4dd6:	07 2f       	mov	r16, r23
    4dd8:	18 2f       	mov	r17, r24
    4dda:	29 2f       	mov	r18, r25
    4ddc:	33 27       	eor	r19, r19
    4dde:	00 93 c5 00 	sts	0x00C5, r16	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)ubrr;
    4de2:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    /** Set double speed mode */
    UCSR0A = (1 << U2X0);
    4de6:	82 e0       	ldi	r24, 0x02	; 2
    4de8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

    /** Set frame format: 8data, 2stop bit */
    //UCSR0C = (1 << USBS0) | (3 << UCSZ00);

    /** Set frame format: 8data, 1stop bit */
    UCSR0C = (3 << UCSZ00);
    4dec:	86 e0       	ldi	r24, 0x06	; 6
    4dee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

    /** Enable receiver and transmitter */
    UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    4df2:	88 e1       	ldi	r24, 0x18	; 24
    4df4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
}
    4df8:	1f 91       	pop	r17
    4dfa:	0f 91       	pop	r16
    4dfc:	08 95       	ret

00004dfe <usart_tx_ch>:

void usart_tx_ch(unsigned char data)
{
    /* Wait for empty transmit buffer */
    while (!(UCSR0A & (1 << UDRE0)))
    4dfe:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    4e02:	95 ff       	sbrs	r25, 5
    4e04:	fc cf       	rjmp	.-8      	; 0x4dfe <usart_tx_ch>
        ;

    /* Put data into buffer, sends the data */
    UDR0 = data;
    4e06:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    4e0a:	08 95       	ret

00004e0c <usart_rx_ch>:
}

unsigned char usart_rx_ch(void)
{
    /* Wait for data to be received */
    while (!(UCSR0A & (1 << RXC0)))
    4e0c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    4e10:	87 ff       	sbrs	r24, 7
    4e12:	fc cf       	rjmp	.-8      	; 0x4e0c <usart_rx_ch>
        ;

    /* Get and return received data from buffer */
    return UDR0;
    4e14:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
    4e18:	08 95       	ret

00004e1a <usart_tx_hex>:

void usart_tx_hex(uint8_t val)
{
    4e1a:	cf 93       	push	r28
    // extract upper and lower nibbles from input value
    uint8_t upperNibble = (val & 0xF0) >> 4;
    4e1c:	28 2f       	mov	r18, r24
    4e1e:	22 95       	swap	r18
    4e20:	2f 70       	andi	r18, 0x0F	; 15
    uint8_t lowerNibble = val & 0x0F;
    4e22:	98 2f       	mov	r25, r24
    4e24:	9f 70       	andi	r25, 0x0F	; 15

    // convert nibble to its ASCII hex equivalent
    upperNibble += upperNibble > 9 ? 'A' - 10 : '0';
    4e26:	2a 30       	cpi	r18, 0x0A	; 10
    4e28:	10 f4       	brcc	.+4      	; 0x4e2e <usart_tx_hex+0x14>
    4e2a:	80 e3       	ldi	r24, 0x30	; 48
    4e2c:	01 c0       	rjmp	.+2      	; 0x4e30 <usart_tx_hex+0x16>
    4e2e:	87 e3       	ldi	r24, 0x37	; 55
    4e30:	82 0f       	add	r24, r18
    lowerNibble += lowerNibble > 9 ? 'A' - 10 : '0';
    4e32:	9a 30       	cpi	r25, 0x0A	; 10
    4e34:	10 f4       	brcc	.+4      	; 0x4e3a <usart_tx_hex+0x20>
    4e36:	c0 e3       	ldi	r28, 0x30	; 48
    4e38:	01 c0       	rjmp	.+2      	; 0x4e3c <usart_tx_hex+0x22>
    4e3a:	c7 e3       	ldi	r28, 0x37	; 55
    4e3c:	c9 0f       	add	r28, r25

    // print the characters
    usart_tx_ch(upperNibble);
    4e3e:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <usart_tx_ch>
    usart_tx_ch(lowerNibble);
    4e42:	8c 2f       	mov	r24, r28
}
    4e44:	cf 91       	pop	r28
    upperNibble += upperNibble > 9 ? 'A' - 10 : '0';
    lowerNibble += lowerNibble > 9 ? 'A' - 10 : '0';

    // print the characters
    usart_tx_ch(upperNibble);
    usart_tx_ch(lowerNibble);
    4e46:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <usart_tx_ch>

00004e4a <usart_tx_string>:
}

void usart_tx_string(char* s)
{
    4e4a:	cf 93       	push	r28
    4e4c:	df 93       	push	r29
    4e4e:	ec 01       	movw	r28, r24
    uint16_t i = 0U;
    while(s[i] != '\0')
    4e50:	89 91       	ld	r24, Y+
    4e52:	88 23       	and	r24, r24
    4e54:	19 f0       	breq	.+6      	; 0x4e5c <usart_tx_string+0x12>
    {
        usart_tx_ch(s[i]);
    4e56:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <usart_tx_ch>
    4e5a:	fa cf       	rjmp	.-12     	; 0x4e50 <usart_tx_string+0x6>
        i++;
    }
}
    4e5c:	df 91       	pop	r29
    4e5e:	cf 91       	pop	r28
    4e60:	08 95       	ret

00004e62 <usart_tx_buffer>:

void usart_tx_buffer(uint8_t* b, uint16_t len)
{
    4e62:	0f 93       	push	r16
    4e64:	1f 93       	push	r17
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	ec 01       	movw	r28, r24
    4e6c:	8c 01       	movw	r16, r24
    4e6e:	06 0f       	add	r16, r22
    4e70:	17 1f       	adc	r17, r23
    for (uint16_t i = 0U; i < len; i++)
    4e72:	c0 17       	cp	r28, r16
    4e74:	d1 07       	cpc	r29, r17
    4e76:	21 f0       	breq	.+8      	; 0x4e80 <usart_tx_buffer+0x1e>
    {
        usart_tx_hex(b[i]);
    4e78:	89 91       	ld	r24, Y+
    4e7a:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <usart_tx_hex>
    4e7e:	f9 cf       	rjmp	.-14     	; 0x4e72 <usart_tx_buffer+0x10>
    }
    usart_tx_ch('\n');
    4e80:	8a e0       	ldi	r24, 0x0A	; 10
    4e82:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <usart_tx_ch>
    usart_tx_ch('\r');
    4e86:	8d e0       	ldi	r24, 0x0D	; 13
}
    4e88:	df 91       	pop	r29
    4e8a:	cf 91       	pop	r28
    4e8c:	1f 91       	pop	r17
    4e8e:	0f 91       	pop	r16
    for (uint16_t i = 0U; i < len; i++)
    {
        usart_tx_hex(b[i]);
    }
    usart_tx_ch('\n');
    usart_tx_ch('\r');
    4e90:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <usart_tx_ch>

00004e94 <usart_rx_buffer>:
}

void usart_rx_buffer(uint8_t* b, uint16_t len)
{
    4e94:	4f 92       	push	r4
    4e96:	5f 92       	push	r5
    4e98:	6f 92       	push	r6
    4e9a:	7f 92       	push	r7
    4e9c:	8f 92       	push	r8
    4e9e:	9f 92       	push	r9
    4ea0:	af 92       	push	r10
    4ea2:	bf 92       	push	r11
    4ea4:	cf 92       	push	r12
    4ea6:	df 92       	push	r13
    4ea8:	ef 92       	push	r14
    4eaa:	ff 92       	push	r15
    4eac:	0f 93       	push	r16
    4eae:	1f 93       	push	r17
    4eb0:	cf 93       	push	r28
    4eb2:	df 93       	push	r29
    4eb4:	00 d0       	rcall	.+0      	; 0x4eb6 <usart_rx_buffer+0x22>
    4eb6:	1f 92       	push	r1
    4eb8:	cd b7       	in	r28, 0x3d	; 61
    4eba:	de b7       	in	r29, 0x3e	; 62
    4ebc:	2c 01       	movw	r4, r24
    4ebe:	7b 01       	movw	r14, r22
    }
    for (int i = 0; i < len; i++) {
        char hex[3] = {input[i*2], input[i*2+1], '\0'};
        b[i] = (uint8_t) strtol(hex, NULL, 16);
    }
    4ec0:	6d b6       	in	r6, 0x3d	; 61
    4ec2:	7e b6       	in	r7, 0x3e	; 62
    usart_tx_ch('\r');
}

void usart_rx_buffer(uint8_t* b, uint16_t len)
{
    char input[len*2];
    4ec4:	5b 01       	movw	r10, r22
    4ec6:	aa 0c       	add	r10, r10
    4ec8:	bb 1c       	adc	r11, r11
    4eca:	8d b7       	in	r24, 0x3d	; 61
    4ecc:	9e b7       	in	r25, 0x3e	; 62
    4ece:	8a 19       	sub	r24, r10
    4ed0:	9b 09       	sbc	r25, r11
    4ed2:	0f b6       	in	r0, 0x3f	; 63
    4ed4:	f8 94       	cli
    4ed6:	9e bf       	out	0x3e, r25	; 62
    4ed8:	0f be       	out	0x3f, r0	; 63
    4eda:	8d bf       	out	0x3d, r24	; 61
    4edc:	0d b7       	in	r16, 0x3d	; 61
    4ede:	1e b7       	in	r17, 0x3e	; 62
    4ee0:	0f 5f       	subi	r16, 0xFF	; 255
    4ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    for (int i = 0U; i < len*2; i++)
    4ee4:	c1 2c       	mov	r12, r1
    4ee6:	d1 2c       	mov	r13, r1
    {
        unsigned char byte=usart_rx_ch();
        sprintf(&input[i], "%c", byte);
    4ee8:	98 eb       	ldi	r25, 0xB8	; 184
    4eea:	89 2e       	mov	r8, r25
    4eec:	93 e0       	ldi	r25, 0x03	; 3
    4eee:	99 2e       	mov	r9, r25
}

void usart_rx_buffer(uint8_t* b, uint16_t len)
{
    char input[len*2];
    for (int i = 0U; i < len*2; i++)
    4ef0:	ca 14       	cp	r12, r10
    4ef2:	db 04       	cpc	r13, r11
    4ef4:	b9 f0       	breq	.+46     	; 0x4f24 <usart_rx_buffer+0x90>
    {
        unsigned char byte=usart_rx_ch();
    4ef6:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <usart_rx_ch>
        sprintf(&input[i], "%c", byte);
    4efa:	1f 92       	push	r1
    4efc:	8f 93       	push	r24
    4efe:	9f 92       	push	r9
    4f00:	8f 92       	push	r8
    4f02:	c8 01       	movw	r24, r16
    4f04:	8c 0d       	add	r24, r12
    4f06:	9d 1d       	adc	r25, r13
    4f08:	9f 93       	push	r25
    4f0a:	8f 93       	push	r24
    4f0c:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <sprintf>
}

void usart_rx_buffer(uint8_t* b, uint16_t len)
{
    char input[len*2];
    for (int i = 0U; i < len*2; i++)
    4f10:	9f ef       	ldi	r25, 0xFF	; 255
    4f12:	c9 1a       	sub	r12, r25
    4f14:	d9 0a       	sbc	r13, r25
    4f16:	0f 90       	pop	r0
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	0f 90       	pop	r0
    4f1e:	0f 90       	pop	r0
    4f20:	0f 90       	pop	r0
    4f22:	e6 cf       	rjmp	.-52     	; 0x4ef0 <usart_rx_buffer+0x5c>
    4f24:	62 01       	movw	r12, r4
    4f26:	e4 0c       	add	r14, r4
    4f28:	f5 1c       	adc	r15, r5
    {
        unsigned char byte=usart_rx_ch();
        sprintf(&input[i], "%c", byte);
    }
    for (int i = 0; i < len; i++) {
    4f2a:	ce 14       	cp	r12, r14
    4f2c:	df 04       	cpc	r13, r15
    4f2e:	a1 f0       	breq	.+40     	; 0x4f58 <usart_rx_buffer+0xc4>
        char hex[3] = {input[i*2], input[i*2+1], '\0'};
    4f30:	f8 01       	movw	r30, r16
    4f32:	80 81       	ld	r24, Z
    4f34:	89 83       	std	Y+1, r24	; 0x01
    4f36:	81 81       	ldd	r24, Z+1	; 0x01
    4f38:	8a 83       	std	Y+2, r24	; 0x02
    4f3a:	1b 82       	std	Y+3, r1	; 0x03
        b[i] = (uint8_t) strtol(hex, NULL, 16);
    4f3c:	40 e1       	ldi	r20, 0x10	; 16
    4f3e:	50 e0       	ldi	r21, 0x00	; 0
    4f40:	60 e0       	ldi	r22, 0x00	; 0
    4f42:	70 e0       	ldi	r23, 0x00	; 0
    4f44:	ce 01       	movw	r24, r28
    4f46:	01 96       	adiw	r24, 0x01	; 1
    4f48:	0e 94 22 35 	call	0x6a44	; 0x6a44 <strtol>
    4f4c:	f6 01       	movw	r30, r12
    4f4e:	61 93       	st	Z+, r22
    4f50:	6f 01       	movw	r12, r30
    4f52:	0e 5f       	subi	r16, 0xFE	; 254
    4f54:	1f 4f       	sbci	r17, 0xFF	; 255
    4f56:	e9 cf       	rjmp	.-46     	; 0x4f2a <usart_rx_buffer+0x96>
    }
    4f58:	0f b6       	in	r0, 0x3f	; 63
    4f5a:	f8 94       	cli
    4f5c:	7e be       	out	0x3e, r7	; 62
    4f5e:	0f be       	out	0x3f, r0	; 63
    4f60:	6d be       	out	0x3d, r6	; 61
    4f62:	0f 90       	pop	r0
    4f64:	0f 90       	pop	r0
    4f66:	0f 90       	pop	r0
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	1f 91       	pop	r17
    4f6e:	0f 91       	pop	r16
    4f70:	ff 90       	pop	r15
    4f72:	ef 90       	pop	r14
    4f74:	df 90       	pop	r13
    4f76:	cf 90       	pop	r12
    4f78:	bf 90       	pop	r11
    4f7a:	af 90       	pop	r10
    4f7c:	9f 90       	pop	r9
    4f7e:	8f 90       	pop	r8
    4f80:	7f 90       	pop	r7
    4f82:	6f 90       	pop	r6
    4f84:	5f 90       	pop	r5
    4f86:	4f 90       	pop	r4
    4f88:	08 95       	ret

00004f8a <USHAReset>:
 *      sha Error Code.
 *
 */
int USHAReset(USHAContext *context, enum SHAversion whichSha)
{
  if (!context) return shaNull;
    4f8a:	00 97       	sbiw	r24, 0x00	; 0
    4f8c:	31 f0       	breq	.+12     	; 0x4f9a <USHAReset+0x10>
  context->whichSha = whichSha;
    4f8e:	fc 01       	movw	r30, r24
    4f90:	61 93       	st	Z+, r22
    4f92:	71 93       	st	Z+, r23
    4f94:	cf 01       	movw	r24, r30
  //switch (whichSha) {
    //case SHA1:   return SHA1Reset((SHA1Context*)&context->ctx);
    //case SHA224: return SHA224Reset((SHA224Context*)&context->ctx);
    //case SHA256: 
    return SHA256Reset((SHA256Context*)&context->ctx);
    4f96:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <SHA256Reset>
    //case SHA384: return SHA384Reset((SHA384Context*)&context->ctx);
    //case SHA512: return SHA512Reset((SHA512Context*)&context->ctx);
    //default: return shaBadParam;
  //}
}
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	08 95       	ret

00004fa0 <USHAInput>:
 *
 */
int USHAInput(USHAContext *context,
              const uint8_t *bytes, unsigned int bytecount)
{
  if (!context) return shaNull;
    4fa0:	00 97       	sbiw	r24, 0x00	; 0
    4fa2:	19 f0       	breq	.+6      	; 0x4faa <USHAInput+0xa>
  //switch (context->whichSha) {
    //case SHA1:return SHA1Input((SHA1Context*)&context->ctx, bytes,bytecount);
    //case SHA224:return SHA224Input((SHA224Context*)&context->ctx, bytes,bytecount);
    //case SHA256:
    return SHA256Input((SHA256Context*)&context->ctx, bytes,bytecount);
    4fa4:	02 96       	adiw	r24, 0x02	; 2
    4fa6:	0c 94 ab 25 	jmp	0x4b56	; 0x4b56 <SHA256Input>
    //case SHA384:return SHA384Input((SHA384Context*)&context->ctx, bytes,bytecount);
    //case SHA512:return SHA512Input((SHA512Context*)&context->ctx, bytes,bytecount);
    //default: return shaBadParam;
  //}
}
    4faa:	81 e0       	ldi	r24, 0x01	; 1
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	08 95       	ret

00004fb0 <USHAResult>:
 *
 */
int USHAResult(USHAContext *context,
               uint8_t Message_Digest[USHAMaxHashSize])
{
  if (!context) return shaNull;
    4fb0:	00 97       	sbiw	r24, 0x00	; 0
    4fb2:	19 f0       	breq	.+6      	; 0x4fba <USHAResult+0xa>
  //switch (context->whichSha) {
    //case SHA1:return SHA1Result((SHA1Context*)&context->ctx, Message_Digest);
    //case SHA224:return SHA224Result((SHA224Context*)&context->ctx,Message_Digest);
    //case SHA256:
    return SHA256Result((SHA256Context*)&context->ctx,Message_Digest);
    4fb4:	02 96       	adiw	r24, 0x02	; 2
    4fb6:	0c 94 34 26 	jmp	0x4c68	; 0x4c68 <SHA256Result>
    //case SHA384:return SHA384Result((SHA384Context*)&context->ctx,Message_Digest);
    //case SHA512: return SHA512Result((SHA512Context*)&context->ctx,Message_Digest);
    //default: return shaBadParam;
  //}
}
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	08 95       	ret

00004fc0 <USHABlockSize>:
    return SHA256_Message_Block_Size;
    //case SHA384: return SHA384_Message_Block_Size;
    //default:
    //case SHA512: return SHA512_Message_Block_Size;
  //}
}
    4fc0:	80 e4       	ldi	r24, 0x40	; 64
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	08 95       	ret

00004fc6 <USHAHashSize>:
    return SHA256HashSize;
    //case SHA384: return SHA384HashSize;
    //default:
    //case SHA512: return SHA512HashSize;
  //}
}
    4fc6:	80 e2       	ldi	r24, 0x20	; 32
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	08 95       	ret

00004fcc <USHAHashSizeBits>:
    return SHA256HashSizeBits;
    //case SHA384: return SHA384HashSizeBits;
    //default:
    //case SHA512: return SHA512HashSizeBits;
  //}
}
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	91 e0       	ldi	r25, 0x01	; 1
    4fd0:	08 95       	ret

00004fd2 <USHAHashName>:
    return "SHA256";
    //case SHA384: return "SHA384";
    //default:
    //case SHA512: return "SHA512";
  //}
}
    4fd2:	8b eb       	ldi	r24, 0xBB	; 187
    4fd4:	93 e0       	ldi	r25, 0x03	; 3
    4fd6:	08 95       	ret

00004fd8 <gen>:
#include <stdio.h>
void gen(uint8_t block[],int size){
    4fd8:	cf 92       	push	r12
    4fda:	df 92       	push	r13
    4fdc:	ef 92       	push	r14
    4fde:	ff 92       	push	r15
    4fe0:	0f 93       	push	r16
    4fe2:	1f 93       	push	r17
    4fe4:	cf 93       	push	r28
    4fe6:	df 93       	push	r29
    4fe8:	8c 01       	movw	r16, r24
    4fea:	7b 01       	movw	r14, r22
    for (int i = 0; i < size; i++) {
    4fec:	ec 01       	movw	r28, r24
        block[i] = rand() % 256;
    4fee:	c1 2c       	mov	r12, r1
    4ff0:	dd 24       	eor	r13, r13
    4ff2:	d3 94       	inc	r13
#include <stdio.h>
void gen(uint8_t block[],int size){
    for (int i = 0; i < size; i++) {
    4ff4:	ce 01       	movw	r24, r28
    4ff6:	80 1b       	sub	r24, r16
    4ff8:	91 0b       	sbc	r25, r17
    4ffa:	8e 15       	cp	r24, r14
    4ffc:	9f 05       	cpc	r25, r15
    4ffe:	3c f4       	brge	.+14     	; 0x500e <gen+0x36>
        block[i] = rand() % 256;
    5000:	0e 94 12 35 	call	0x6a24	; 0x6a24 <rand>
    5004:	b6 01       	movw	r22, r12
    5006:	0e 94 9e 34 	call	0x693c	; 0x693c <__divmodhi4>
    500a:	89 93       	st	Y+, r24
    500c:	f3 cf       	rjmp	.-26     	; 0x4ff4 <gen+0x1c>
    }
    500e:	df 91       	pop	r29
    5010:	cf 91       	pop	r28
    5012:	1f 91       	pop	r17
    5014:	0f 91       	pop	r16
    5016:	ff 90       	pop	r15
    5018:	ef 90       	pop	r14
    501a:	df 90       	pop	r13
    501c:	cf 90       	pop	r12
    501e:	08 95       	ret

00005020 <encode>:
 * input -> input byte vector
 * length -> input byte length
 * m -> the second parameter of reed muller implementation
 */
void encode(uint8_t *input, int16_t *result)
{
    5020:	af 92       	push	r10
    5022:	bf 92       	push	r11
    5024:	cf 92       	push	r12
    5026:	df 92       	push	r13
    5028:	ef 92       	push	r14
    502a:	ff 92       	push	r15
    502c:	0f 93       	push	r16
    502e:	1f 93       	push	r17
    5030:	cf 93       	push	r28
    5032:	df 93       	push	r29
    5034:	cd b7       	in	r28, 0x3d	; 61
    5036:	de b7       	in	r29, 0x3e	; 62
    5038:	6f 97       	sbiw	r28, 0x1f	; 31
    503a:	0f b6       	in	r0, 0x3f	; 63
    503c:	f8 94       	cli
    503e:	de bf       	out	0x3e, r29	; 62
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	cd bf       	out	0x3d, r28	; 61
    5044:	7b 01       	movw	r14, r22

    uint32_t generator_column = (1U << M);

    // Input vector (byte) is trasformed into a bit matrix
    // (each bit element occupies one array field (8 bit)
    uint8_t input_vector[LENGTH + M] = {0U}; //malloc
    5046:	6e 01       	movw	r12, r28
    5048:	21 e1       	ldi	r18, 0x11	; 17
    504a:	c2 0e       	add	r12, r18
    504c:	d1 1c       	adc	r13, r1
    504e:	2f e0       	ldi	r18, 0x0F	; 15
    5050:	f6 01       	movw	r30, r12
    5052:	11 92       	st	Z+, r1
    5054:	2a 95       	dec	r18
    5056:	e9 f7       	brne	.-6      	; 0x5052 <encode+0x32>
    for (uint8_t i = 0U; i < BYTE_LENGTH; i++)
        HexToBin(input[i], input_vector + i * 8);
    5058:	fc 01       	movw	r30, r24
    505a:	80 81       	ld	r24, Z
    505c:	b6 01       	movw	r22, r12
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <HexToBin>
    5064:	87 01       	movw	r16, r14
    5066:	e1 2c       	mov	r14, r1
    5068:	f1 2c       	mov	r15, r1
    506a:	fe 01       	movw	r30, r28
    506c:	31 96       	adiw	r30, 0x01	; 1
    506e:	5f 01       	movw	r10, r30
        for ( i = 0U; i < generator_column; i++)
        {
            //Single column of generation matrix creation/allocation.
            int16_t generator_vector[M + 1];
            for (int16_t k = 0; k < M + 1; k++)
                generator_vector[k] = 0; // i do the static calloc by myself.
    5070:	11 92       	st	Z+, r1
    5072:	11 92       	st	Z+, r1
    {
        for ( i = 0U; i < generator_column; i++)
        {
            //Single column of generation matrix creation/allocation.
            int16_t generator_vector[M + 1];
            for (int16_t k = 0; k < M + 1; k++)
    5074:	ce 16       	cp	r12, r30
    5076:	df 06       	cpc	r13, r31
    5078:	d9 f7       	brne	.-10     	; 0x5070 <encode+0x50>
                generator_vector[k] = 0; // i do the static calloc by myself.

            //This function create automatically a right generation matrix column as bit vector
            GenMatrix_column(i, generator_vector, M);
    507a:	47 e0       	ldi	r20, 0x07	; 7
    507c:	50 e0       	ldi	r21, 0x00	; 0
    507e:	b5 01       	movw	r22, r10
    5080:	c7 01       	movw	r24, r14
    5082:	0e 94 86 2a 	call	0x550c	; 0x550c <GenMatrix_column>

            result[pos_r + i] = columnresult(input_vector + pos_i, generator_vector, M + 1); //one result element calculation
    5086:	48 e0       	ldi	r20, 0x08	; 8
    5088:	50 e0       	ldi	r21, 0x00	; 0
    508a:	b5 01       	movw	r22, r10
    508c:	c6 01       	movw	r24, r12
    508e:	0e 94 aa 2a 	call	0x5554	; 0x5554 <columnresult>
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	f8 01       	movw	r30, r16
    5096:	81 93       	st	Z+, r24
    5098:	91 93       	st	Z+, r25
    509a:	8f 01       	movw	r16, r30
    //Starting che calculation cycle
    pos_i = 0;
    pos_r = 0;
    for (uint8_t j = 0U; j < num_blocks; j++)
    {
        for ( i = 0U; i < generator_column; i++)
    509c:	ff ef       	ldi	r31, 0xFF	; 255
    509e:	ef 1a       	sub	r14, r31
    50a0:	ff 0a       	sbc	r15, r31
    50a2:	20 e8       	ldi	r18, 0x80	; 128
    50a4:	e2 16       	cp	r14, r18
    50a6:	f1 04       	cpc	r15, r1
    50a8:	01 f7       	brne	.-64     	; 0x506a <encode+0x4a>

        //Pointer update for next cycle.
        pos_r = pos_r + i;
        pos_i = pos_i + (M + 1);
    }
}
    50aa:	6f 96       	adiw	r28, 0x1f	; 31
    50ac:	0f b6       	in	r0, 0x3f	; 63
    50ae:	f8 94       	cli
    50b0:	de bf       	out	0x3e, r29	; 62
    50b2:	0f be       	out	0x3f, r0	; 63
    50b4:	cd bf       	out	0x3d, r28	; 61
    50b6:	df 91       	pop	r29
    50b8:	cf 91       	pop	r28
    50ba:	1f 91       	pop	r17
    50bc:	0f 91       	pop	r16
    50be:	ff 90       	pop	r15
    50c0:	ef 90       	pop	r14
    50c2:	df 90       	pop	r13
    50c4:	cf 90       	pop	r12
    50c6:	bf 90       	pop	r11
    50c8:	af 90       	pop	r10
    50ca:	08 95       	ret

000050cc <hadamard>:
        pos_r = pos_r + M + 1;
    }
}

void hadamard(int16_t* h)
{
    50cc:	2f 92       	push	r2
    50ce:	3f 92       	push	r3
    50d0:	4f 92       	push	r4
    50d2:	5f 92       	push	r5
    50d4:	6f 92       	push	r6
    50d6:	7f 92       	push	r7
    50d8:	8f 92       	push	r8
    50da:	9f 92       	push	r9
    50dc:	af 92       	push	r10
    50de:	bf 92       	push	r11
    50e0:	cf 92       	push	r12
    50e2:	df 92       	push	r13
    50e4:	ef 92       	push	r14
    50e6:	ff 92       	push	r15
    50e8:	0f 93       	push	r16
    50ea:	1f 93       	push	r17
    50ec:	cf 93       	push	r28
    50ee:	df 93       	push	r29
    50f0:	5c 01       	movw	r10, r24
    uint16_t ii, xx, yy;

    h[0] = 1;
    50f2:	81 e0       	ldi	r24, 0x01	; 1
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	d5 01       	movw	r26, r10
    50f8:	8d 93       	st	X+, r24
    50fa:	9c 93       	st	X, r25
    50fc:	f7 e0       	ldi	r31, 0x07	; 7
    50fe:	8f 2e       	mov	r8, r31
    5100:	91 2c       	mov	r9, r1

    for (ii = 2; ii <= H_SIZE; ii *= 2)
    5102:	22 e0       	ldi	r18, 0x02	; 2
    5104:	30 e0       	ldi	r19, 0x00	; 0
                {
                    h[xx*H_SIZE + yy] = -1;
                }
                else
                {
                    h[xx*H_SIZE + yy] = 1;
    5106:	66 24       	eor	r6, r6
    5108:	63 94       	inc	r6
    510a:	71 2c       	mov	r7, r1
    h[0] = 1;

    for (ii = 2; ii <= H_SIZE; ii *= 2)
    {
        //Top right quadrant.
        for (xx = 0; xx < (ii / 2); xx++)
    510c:	c9 01       	movw	r24, r18
    510e:	96 95       	lsr	r25
    5110:	87 95       	ror	r24
    5112:	ac 01       	movw	r20, r24
    5114:	44 0f       	add	r20, r20
    5116:	55 1f       	adc	r21, r21
    5118:	44 24       	eor	r4, r4
    511a:	55 24       	eor	r5, r5
    511c:	44 1a       	sub	r4, r20
    511e:	55 0a       	sbc	r5, r21
    5120:	60 e0       	ldi	r22, 0x00	; 0
    5122:	70 e0       	ldi	r23, 0x00	; 0
    5124:	a0 e0       	ldi	r26, 0x00	; 0
    5126:	b0 e0       	ldi	r27, 0x00	; 0
    5128:	fa 01       	movw	r30, r20
    512a:	e6 1b       	sub	r30, r22
    512c:	f7 0b       	sbc	r31, r23
    512e:	6f 01       	movw	r12, r30
    5130:	ca 0c       	add	r12, r10
    5132:	db 1c       	adc	r13, r11
    5134:	72 01       	movw	r14, r4
    5136:	e6 1a       	sub	r14, r22
    5138:	f7 0a       	sbc	r15, r23
        pos_r = pos_r + M + 1;
    }
}

void hadamard(int16_t* h)
{
    513a:	ec 01       	movw	r28, r24
    for (ii = 2; ii <= H_SIZE; ii *= 2)
    {
        //Top right quadrant.
        for (xx = 0; xx < (ii / 2); xx++)
        {
            for (yy = (ii / 2); yy < ii; yy++)
    513c:	c2 17       	cp	r28, r18
    513e:	d3 07       	cpc	r29, r19
    5140:	70 f4       	brcc	.+28     	; 0x515e <hadamard+0x92>
            {
                h[xx*H_SIZE + yy] = h[xx*H_SIZE + (yy - (ii / 2))];
    5142:	86 01       	movw	r16, r12
    5144:	06 0f       	add	r16, r22
    5146:	17 1f       	adc	r17, r23
    5148:	0e 0d       	add	r16, r14
    514a:	1f 1d       	adc	r17, r15
    514c:	f8 01       	movw	r30, r16
    514e:	00 81       	ld	r16, Z
    5150:	11 81       	ldd	r17, Z+1	; 0x01
    5152:	f6 01       	movw	r30, r12
    5154:	01 93       	st	Z+, r16
    5156:	11 93       	st	Z+, r17
    5158:	6f 01       	movw	r12, r30
    for (ii = 2; ii <= H_SIZE; ii *= 2)
    {
        //Top right quadrant.
        for (xx = 0; xx < (ii / 2); xx++)
        {
            for (yy = (ii / 2); yy < ii; yy++)
    515a:	21 96       	adiw	r28, 0x01	; 1
    515c:	ef cf       	rjmp	.-34     	; 0x513c <hadamard+0x70>
    h[0] = 1;

    for (ii = 2; ii <= H_SIZE; ii *= 2)
    {
        //Top right quadrant.
        for (xx = 0; xx < (ii / 2); xx++)
    515e:	11 96       	adiw	r26, 0x01	; 1
    5160:	7a 95       	dec	r23
    5162:	8a 17       	cp	r24, r26
    5164:	9b 07       	cpc	r25, r27
    5166:	01 f7       	brne	.-64     	; 0x5128 <hadamard+0x5c>
    5168:	15 01       	movw	r2, r10
    516a:	18 2f       	mov	r17, r24
    516c:	00 27       	eor	r16, r16
    516e:	c0 e0       	ldi	r28, 0x00	; 0
    5170:	d0 e0       	ldi	r29, 0x00	; 0
    5172:	f1 01       	movw	r30, r2
    5174:	bc 01       	movw	r22, r24
            }
        }
        //Bottom left quadrant.
        for (yy = 0; yy < (ii / 2); yy++)
        {
            for (xx = (ii / 2); xx < ii; xx++)
    5176:	62 17       	cp	r22, r18
    5178:	73 07       	cpc	r23, r19
    517a:	60 f4       	brcc	.+24     	; 0x5194 <hadamard+0xc8>
            {
                h[xx*H_SIZE + yy] = h[(xx - (ii / 2))*H_SIZE + yy];
    517c:	c0 80       	ld	r12, Z
    517e:	d1 80       	ldd	r13, Z+1	; 0x01
    5180:	7f 01       	movw	r14, r30
    5182:	e0 0e       	add	r14, r16
    5184:	f1 1e       	adc	r15, r17
    5186:	d7 01       	movw	r26, r14
    5188:	cd 92       	st	X+, r12
    518a:	dc 92       	st	X, r13
            }
        }
        //Bottom left quadrant.
        for (yy = 0; yy < (ii / 2); yy++)
        {
            for (xx = (ii / 2); xx < ii; xx++)
    518c:	6f 5f       	subi	r22, 0xFF	; 255
    518e:	7f 4f       	sbci	r23, 0xFF	; 255
    5190:	f3 95       	inc	r31
    5192:	f1 cf       	rjmp	.-30     	; 0x5176 <hadamard+0xaa>
            {
                h[xx*H_SIZE + yy] = h[xx*H_SIZE + (yy - (ii / 2))];
            }
        }
        //Bottom left quadrant.
        for (yy = 0; yy < (ii / 2); yy++)
    5194:	21 96       	adiw	r28, 0x01	; 1
    5196:	b2 e0       	ldi	r27, 0x02	; 2
    5198:	2b 0e       	add	r2, r27
    519a:	31 1c       	adc	r3, r1
    519c:	8c 17       	cp	r24, r28
    519e:	9d 07       	cpc	r25, r29
    51a0:	41 f7       	brne	.-48     	; 0x5172 <hadamard+0xa6>
    51a2:	04 0f       	add	r16, r20
    51a4:	15 1f       	adc	r17, r21
    51a6:	c0 e0       	ldi	r28, 0x00	; 0
    51a8:	c8 9f       	mul	r28, r24
    51aa:	70 01       	movw	r14, r0
    51ac:	c9 9f       	mul	r28, r25
    51ae:	f0 0c       	add	r15, r0
    51b0:	f8 1a       	sub	r15, r24
    51b2:	11 24       	eor	r1, r1
    51b4:	dc 01       	movw	r26, r24
    51b6:	40 e0       	ldi	r20, 0x00	; 0
    51b8:	50 e0       	ldi	r21, 0x00	; 0
            {
                h[xx*H_SIZE + yy] = h[(xx - (ii / 2))*H_SIZE + yy];
            }
        }
        //Bottom right quadrant, inverse of other quadrants.
        for (xx = (ii / 2); xx < ii; xx++)
    51ba:	a2 17       	cp	r26, r18
    51bc:	b3 07       	cpc	r27, r19
    51be:	48 f5       	brcc	.+82     	; 0x5212 <hadamard+0x146>
    51c0:	fa 01       	movw	r30, r20
    51c2:	e0 0f       	add	r30, r16
    51c4:	f1 1f       	adc	r31, r17
    51c6:	ea 0d       	add	r30, r10
    51c8:	fb 1d       	adc	r31, r11
    51ca:	67 01       	movw	r12, r14
    51cc:	c4 1a       	sub	r12, r20
    51ce:	d5 0a       	sbc	r13, r21
    51d0:	1a 01       	movw	r2, r20
    51d2:	24 0c       	add	r2, r4
    51d4:	35 1c       	adc	r3, r5
    51d6:	bc 01       	movw	r22, r24
        {
            for (yy = (ii / 2); yy < ii; yy++)
    51d8:	62 17       	cp	r22, r18
    51da:	73 07       	cpc	r23, r19
    51dc:	b8 f4       	brcc	.+46     	; 0x520c <hadamard+0x140>
            {
                h[xx*H_SIZE + yy] = h[(xx - (ii / 2))*H_SIZE + (yy - (ii / 2))];
    51de:	ef 01       	movw	r28, r30
    51e0:	cc 0d       	add	r28, r12
    51e2:	dd 1d       	adc	r29, r13
    51e4:	c2 0d       	add	r28, r2
    51e6:	d3 1d       	adc	r29, r3
    51e8:	09 90       	ld	r0, Y+
    51ea:	d8 81       	ld	r29, Y
    51ec:	c0 2d       	mov	r28, r0
    51ee:	d1 83       	std	Z+1, r29	; 0x01
    51f0:	c0 83       	st	Z, r28
                if (h[xx*H_SIZE + yy] == 1)
    51f2:	21 97       	sbiw	r28, 0x01	; 1
    51f4:	29 f4       	brne	.+10     	; 0x5200 <hadamard+0x134>
                {
                    h[xx*H_SIZE + yy] = -1;
    51f6:	cf ef       	ldi	r28, 0xFF	; 255
    51f8:	df ef       	ldi	r29, 0xFF	; 255
    51fa:	d1 83       	std	Z+1, r29	; 0x01
    51fc:	c0 83       	st	Z, r28
    51fe:	02 c0       	rjmp	.+4      	; 0x5204 <hadamard+0x138>
                }
                else
                {
                    h[xx*H_SIZE + yy] = 1;
    5200:	71 82       	std	Z+1, r7	; 0x01
    5202:	60 82       	st	Z, r6
            }
        }
        //Bottom right quadrant, inverse of other quadrants.
        for (xx = (ii / 2); xx < ii; xx++)
        {
            for (yy = (ii / 2); yy < ii; yy++)
    5204:	6f 5f       	subi	r22, 0xFF	; 255
    5206:	7f 4f       	sbci	r23, 0xFF	; 255
    5208:	32 96       	adiw	r30, 0x02	; 2
    520a:	e6 cf       	rjmp	.-52     	; 0x51d8 <hadamard+0x10c>
            {
                h[xx*H_SIZE + yy] = h[(xx - (ii / 2))*H_SIZE + yy];
            }
        }
        //Bottom right quadrant, inverse of other quadrants.
        for (xx = (ii / 2); xx < ii; xx++)
    520c:	11 96       	adiw	r26, 0x01	; 1
    520e:	53 95       	inc	r21
    5210:	d4 cf       	rjmp	.-88     	; 0x51ba <hadamard+0xee>
{
    uint16_t ii, xx, yy;

    h[0] = 1;

    for (ii = 2; ii <= H_SIZE; ii *= 2)
    5212:	22 0f       	add	r18, r18
    5214:	33 1f       	adc	r19, r19
    5216:	d1 e0       	ldi	r29, 0x01	; 1
    5218:	8d 1a       	sub	r8, r29
    521a:	91 08       	sbc	r9, r1
    521c:	09 f0       	breq	.+2      	; 0x5220 <hadamard+0x154>
    521e:	76 cf       	rjmp	.-276    	; 0x510c <hadamard+0x40>
                    h[xx*H_SIZE + yy] = 1;
                }
            }
        }
    }
}
    5220:	df 91       	pop	r29
    5222:	cf 91       	pop	r28
    5224:	1f 91       	pop	r17
    5226:	0f 91       	pop	r16
    5228:	ff 90       	pop	r15
    522a:	ef 90       	pop	r14
    522c:	df 90       	pop	r13
    522e:	cf 90       	pop	r12
    5230:	bf 90       	pop	r11
    5232:	af 90       	pop	r10
    5234:	9f 90       	pop	r9
    5236:	8f 90       	pop	r8
    5238:	7f 90       	pop	r7
    523a:	6f 90       	pop	r6
    523c:	5f 90       	pop	r5
    523e:	4f 90       	pop	r4
    5240:	3f 90       	pop	r3
    5242:	2f 90       	pop	r2
    5244:	08 95       	ret

00005246 <dotproduct>:

void dotproduct(int16_t *result, int16_t *v, int16_t* u, int16_t n)
{
    5246:	8f 92       	push	r8
    5248:	9f 92       	push	r9
    524a:	af 92       	push	r10
    524c:	bf 92       	push	r11
    524e:	cf 92       	push	r12
    5250:	df 92       	push	r13
    5252:	ef 92       	push	r14
    5254:	ff 92       	push	r15
    5256:	0f 93       	push	r16
    5258:	1f 93       	push	r17
    525a:	cf 93       	push	r28
    525c:	df 93       	push	r29
    525e:	fa 01       	movw	r30, r20
    5260:	dc 01       	movw	r26, r24
    for (uint16_t i = 0U; i < n; i++)
    5262:	80 e0       	ldi	r24, 0x00	; 0
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	82 17       	cp	r24, r18
    5268:	93 07       	cpc	r25, r19
    526a:	39 f1       	breq	.+78     	; 0x52ba <dotproduct+0x74>
    {
        result[i] = 0;
    526c:	11 96       	adiw	r26, 0x01	; 1
    526e:	1c 92       	st	X, r1
    5270:	1e 92       	st	-X, r1
    5272:	4b 01       	movw	r8, r22
    5274:	7f 01       	movw	r14, r30
        for (uint16_t j = 0U; j < n; j++)
    5276:	40 e0       	ldi	r20, 0x00	; 0
    5278:	50 e0       	ldi	r21, 0x00	; 0
        {
            result[i] += v[j] * u[i*H_SIZE + j];
    527a:	e4 01       	movw	r28, r8
    527c:	a9 90       	ld	r10, Y+
    527e:	b9 90       	ld	r11, Y+
    5280:	4e 01       	movw	r8, r28
    5282:	e7 01       	movw	r28, r14
    5284:	c9 90       	ld	r12, Y+
    5286:	d9 90       	ld	r13, Y+
    5288:	7e 01       	movw	r14, r28
    528a:	ac 9c       	mul	r10, r12
    528c:	80 01       	movw	r16, r0
    528e:	ad 9c       	mul	r10, r13
    5290:	10 0d       	add	r17, r0
    5292:	bc 9c       	mul	r11, r12
    5294:	10 0d       	add	r17, r0
    5296:	11 24       	eor	r1, r1
    5298:	cd 90       	ld	r12, X+
    529a:	dc 90       	ld	r13, X
    529c:	11 97       	sbiw	r26, 0x01	; 1
    529e:	0c 0d       	add	r16, r12
    52a0:	1d 1d       	adc	r17, r13
    52a2:	11 96       	adiw	r26, 0x01	; 1
    52a4:	1c 93       	st	X, r17
    52a6:	0e 93       	st	-X, r16
void dotproduct(int16_t *result, int16_t *v, int16_t* u, int16_t n)
{
    for (uint16_t i = 0U; i < n; i++)
    {
        result[i] = 0;
        for (uint16_t j = 0U; j < n; j++)
    52a8:	4f 5f       	subi	r20, 0xFF	; 255
    52aa:	5f 4f       	sbci	r21, 0xFF	; 255
    52ac:	42 17       	cp	r20, r18
    52ae:	53 07       	cpc	r21, r19
    52b0:	21 f7       	brne	.-56     	; 0x527a <dotproduct+0x34>
    }
}

void dotproduct(int16_t *result, int16_t *v, int16_t* u, int16_t n)
{
    for (uint16_t i = 0U; i < n; i++)
    52b2:	01 96       	adiw	r24, 0x01	; 1
    52b4:	f3 95       	inc	r31
    52b6:	12 96       	adiw	r26, 0x02	; 2
    52b8:	d6 cf       	rjmp	.-84     	; 0x5266 <dotproduct+0x20>
        for (uint16_t j = 0U; j < n; j++)
        {
            result[i] += v[j] * u[i*H_SIZE + j];
        }
    }
}
    52ba:	df 91       	pop	r29
    52bc:	cf 91       	pop	r28
    52be:	1f 91       	pop	r17
    52c0:	0f 91       	pop	r16
    52c2:	ff 90       	pop	r15
    52c4:	ef 90       	pop	r14
    52c6:	df 90       	pop	r13
    52c8:	cf 90       	pop	r12
    52ca:	bf 90       	pop	r11
    52cc:	af 90       	pop	r10
    52ce:	9f 90       	pop	r9
    52d0:	8f 90       	pop	r8
    52d2:	08 95       	ret

000052d4 <hadamard_dotproduct>:

void hadamard_dotproduct(int16_t *result, int16_t *v, int16_t n)
{
    52d4:	bf 92       	push	r11
    52d6:	cf 92       	push	r12
    52d8:	df 92       	push	r13
    52da:	ef 92       	push	r14
    52dc:	ff 92       	push	r15
    52de:	0f 93       	push	r16
    52e0:	1f 93       	push	r17
    52e2:	cf 93       	push	r28
    52e4:	df 93       	push	r29
    52e6:	b6 2e       	mov	r11, r22
    52e8:	dc 01       	movw	r26, r24
    for (uint16_t i = 0U; i < n; i++)
    52ea:	20 e0       	ldi	r18, 0x00	; 0
    52ec:	30 e0       	ldi	r19, 0x00	; 0
    52ee:	24 17       	cp	r18, r20
    52f0:	35 07       	cpc	r19, r21
    52f2:	09 f4       	brne	.+2      	; 0x52f6 <hadamard_dotproduct+0x22>
    52f4:	46 c0       	rjmp	.+140    	; 0x5382 <hadamard_dotproduct+0xae>
    {
        result[i] = 0;
    52f6:	11 96       	adiw	r26, 0x01	; 1
    52f8:	1c 92       	st	X, r1
    52fa:	1e 92       	st	-X, r1
    52fc:	cb 2d       	mov	r28, r11
    52fe:	d7 2f       	mov	r29, r23
        for (uint16_t j = 0U; j < n; j++)
    5300:	80 e0       	ldi	r24, 0x00	; 0
    5302:	90 e0       	ldi	r25, 0x00	; 0
        {
            result[i] += v[j] * HADAMARD_READ(i,j);
    5304:	79 01       	movw	r14, r18
    5306:	e4 e0       	ldi	r30, 0x04	; 4
    5308:	ee 0c       	add	r14, r14
    530a:	ff 1c       	adc	r15, r15
    530c:	ea 95       	dec	r30
    530e:	e1 f7       	brne	.-8      	; 0x5308 <hadamard_dotproduct+0x34>
    5310:	09 91       	ld	r16, Y+
    5312:	19 91       	ld	r17, Y+
    5314:	fc 01       	movw	r30, r24
    5316:	63 e0       	ldi	r22, 0x03	; 3
    5318:	f6 95       	lsr	r31
    531a:	e7 95       	ror	r30
    531c:	6a 95       	dec	r22
    531e:	e1 f7       	brne	.-8      	; 0x5318 <hadamard_dotproduct+0x44>
    5320:	ee 0d       	add	r30, r14
    5322:	ff 1d       	adc	r31, r15
    5324:	e8 56       	subi	r30, 0x68	; 104
    5326:	fe 4c       	sbci	r31, 0xCE	; 206
    5328:	e4 91       	lpm	r30, Z
    532a:	f0 e0       	ldi	r31, 0x00	; 0
    532c:	6c 01       	movw	r12, r24
    532e:	c0 94       	com	r12
    5330:	d0 94       	com	r13
    5332:	67 e0       	ldi	r22, 0x07	; 7
    5334:	c6 22       	and	r12, r22
    5336:	dd 24       	eor	r13, r13
    5338:	02 c0       	rjmp	.+4      	; 0x533e <hadamard_dotproduct+0x6a>
    533a:	f5 95       	asr	r31
    533c:	e7 95       	ror	r30
    533e:	ca 94       	dec	r12
    5340:	e2 f7       	brpl	.-8      	; 0x533a <hadamard_dotproduct+0x66>
    5342:	e0 ff       	sbrs	r30, 0
    5344:	04 c0       	rjmp	.+8      	; 0x534e <hadamard_dotproduct+0x7a>
    5346:	cc 24       	eor	r12, r12
    5348:	c3 94       	inc	r12
    534a:	d1 2c       	mov	r13, r1
    534c:	03 c0       	rjmp	.+6      	; 0x5354 <hadamard_dotproduct+0x80>
    534e:	cc 24       	eor	r12, r12
    5350:	ca 94       	dec	r12
    5352:	dc 2c       	mov	r13, r12
    5354:	c0 9e       	mul	r12, r16
    5356:	f0 01       	movw	r30, r0
    5358:	c1 9e       	mul	r12, r17
    535a:	f0 0d       	add	r31, r0
    535c:	d0 9e       	mul	r13, r16
    535e:	f0 0d       	add	r31, r0
    5360:	11 24       	eor	r1, r1
    5362:	0d 91       	ld	r16, X+
    5364:	1c 91       	ld	r17, X
    5366:	11 97       	sbiw	r26, 0x01	; 1
    5368:	e0 0f       	add	r30, r16
    536a:	f1 1f       	adc	r31, r17
    536c:	11 96       	adiw	r26, 0x01	; 1
    536e:	fc 93       	st	X, r31
    5370:	ee 93       	st	-X, r30
void hadamard_dotproduct(int16_t *result, int16_t *v, int16_t n)
{
    for (uint16_t i = 0U; i < n; i++)
    {
        result[i] = 0;
        for (uint16_t j = 0U; j < n; j++)
    5372:	01 96       	adiw	r24, 0x01	; 1
    5374:	48 17       	cp	r20, r24
    5376:	59 07       	cpc	r21, r25
    5378:	59 f6       	brne	.-106    	; 0x5310 <hadamard_dotproduct+0x3c>
    }
}

void hadamard_dotproduct(int16_t *result, int16_t *v, int16_t n)
{
    for (uint16_t i = 0U; i < n; i++)
    537a:	2f 5f       	subi	r18, 0xFF	; 255
    537c:	3f 4f       	sbci	r19, 0xFF	; 255
    537e:	12 96       	adiw	r26, 0x02	; 2
    5380:	b6 cf       	rjmp	.-148    	; 0x52ee <hadamard_dotproduct+0x1a>
        for (uint16_t j = 0U; j < n; j++)
        {
            result[i] += v[j] * HADAMARD_READ(i,j);
        }
    }
}
    5382:	df 91       	pop	r29
    5384:	cf 91       	pop	r28
    5386:	1f 91       	pop	r17
    5388:	0f 91       	pop	r16
    538a:	ff 90       	pop	r15
    538c:	ef 90       	pop	r14
    538e:	df 90       	pop	r13
    5390:	cf 90       	pop	r12
    5392:	bf 90       	pop	r11
    5394:	08 95       	ret

00005396 <hadamard_transform>:

void hadamard_transform(int16_t * v, uint16_t n)
{
	for(uint16_t i = 0U; i < n; i++)
    5396:	20 e0       	ldi	r18, 0x00	; 0
    5398:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(v[i] == 0)
		{
			v[i] = -1;
    539a:	4f ef       	ldi	r20, 0xFF	; 255
    539c:	5f ef       	ldi	r21, 0xFF	; 255
    }
}

void hadamard_transform(int16_t * v, uint16_t n)
{
	for(uint16_t i = 0U; i < n; i++)
    539e:	26 17       	cp	r18, r22
    53a0:	37 07       	cpc	r19, r23
    53a2:	61 f0       	breq	.+24     	; 0x53bc <hadamard_transform+0x26>
	{
		if(v[i] == 0)
    53a4:	dc 01       	movw	r26, r24
    53a6:	ed 91       	ld	r30, X+
    53a8:	fc 91       	ld	r31, X
    53aa:	11 97       	sbiw	r26, 0x01	; 1
    53ac:	ef 2b       	or	r30, r31
    53ae:	11 f4       	brne	.+4      	; 0x53b4 <hadamard_transform+0x1e>
		{
			v[i] = -1;
    53b0:	4d 93       	st	X+, r20
    53b2:	5c 93       	st	X, r21
    }
}

void hadamard_transform(int16_t * v, uint16_t n)
{
	for(uint16_t i = 0U; i < n; i++)
    53b4:	2f 5f       	subi	r18, 0xFF	; 255
    53b6:	3f 4f       	sbci	r19, 0xFF	; 255
    53b8:	02 96       	adiw	r24, 0x02	; 2
    53ba:	f1 cf       	rjmp	.-30     	; 0x539e <hadamard_transform+0x8>
		if(v[i] == 0)
		{
			v[i] = -1;
		}
	}
    53bc:	08 95       	ret

000053be <decode>:
        pos_i = pos_i + (M + 1);
    }
}

void decode(int16_t *input_vector, uint8_t *result)
{
    53be:	cf 92       	push	r12
    53c0:	df 92       	push	r13
    53c2:	ef 92       	push	r14
    53c4:	ff 92       	push	r15
    53c6:	0f 93       	push	r16
    53c8:	1f 93       	push	r17
    53ca:	cf 93       	push	r28
    53cc:	df 93       	push	r29
    53ce:	cd b7       	in	r28, 0x3d	; 61
    53d0:	de b7       	in	r29, 0x3e	; 62
    53d2:	c2 51       	subi	r28, 0x12	; 18
    53d4:	d1 40       	sbci	r29, 0x01	; 1
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	f8 94       	cli
    53da:	de bf       	out	0x3e, r29	; 62
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	cd bf       	out	0x3d, r28	; 61
    53e0:	8c 01       	movw	r16, r24
    53e2:	7b 01       	movw	r14, r22

    /* Input byte vector transformation, a very necessary bad operation. One bit occupies 8bit-field of the array.
       The first step is memory allocation, the second the transformation. */

    //Vector transfor
    hadamard_transform(input_vector, RESULT_LENGTH);
    53e4:	60 e8       	ldi	r22, 0x80	; 128
    53e6:	70 e0       	ldi	r23, 0x00	; 0
    53e8:	0e 94 cb 29 	call	0x5396	; 0x5396 <hadamard_transform>
    int16_t max;
    int16_t index;

    for (uint16_t i = 0U; i < num_blocks; i++)
    {
        max = 0;
    53ec:	cf 5e       	subi	r28, 0xEF	; 239
    53ee:	de 4f       	sbci	r29, 0xFE	; 254
    53f0:	19 82       	std	Y+1, r1	; 0x01
    53f2:	18 82       	st	Y, r1
    53f4:	c1 51       	subi	r28, 0x11	; 17
    53f6:	d1 40       	sbci	r29, 0x01	; 1
        int16_t partial_vector[H_SIZE];

        // partial_vector viene inizializzate nella dotproduct
        hadamard_dotproduct(partial_vector, input_vector + pos_i, H_SIZE);
    53f8:	40 e8       	ldi	r20, 0x80	; 128
    53fa:	50 e0       	ldi	r21, 0x00	; 0
    53fc:	b8 01       	movw	r22, r16
    53fe:	ce 01       	movw	r24, r28
    5400:	01 96       	adiw	r24, 0x01	; 1
    5402:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <hadamard_dotproduct>

        //Dot product max value and relative index evaluation
        max_array(partial_vector, &max, &index, H_SIZE);
    5406:	20 e8       	ldi	r18, 0x80	; 128
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	ae 01       	movw	r20, r28
    540c:	41 5f       	subi	r20, 0xF1	; 241
    540e:	5e 4f       	sbci	r21, 0xFE	; 254
    5410:	be 01       	movw	r22, r28
    5412:	6f 5e       	subi	r22, 0xEF	; 239
    5414:	7e 4f       	sbci	r23, 0xFE	; 254
    5416:	ce 01       	movw	r24, r28
    5418:	01 96       	adiw	r24, 0x01	; 1
    541a:	0e 94 c1 2a 	call	0x5582	; 0x5582 <max_array>
    541e:	8e 01       	movw	r16, r28
    5420:	0f 5f       	subi	r16, 0xFF	; 255
    5422:	1e 4f       	sbci	r17, 0xFE	; 254
    5424:	68 01       	movw	r12, r16
    5426:	8e e0       	ldi	r24, 0x0E	; 14
    5428:	c8 0e       	add	r12, r24
    542a:	d1 1c       	adc	r13, r1
    542c:	f8 01       	movw	r30, r16

        //Buffer memory allocation. This vector stores binary value (into integer vect\or) at the moment.
        int16_t buffer[M];
        for (int16_t k = 0; k < M; k++)
            buffer[k] = 0;
    542e:	11 92       	st	Z+, r1
    5430:	11 92       	st	Z+, r1
        //Dot product max value and relative index evaluation
        max_array(partial_vector, &max, &index, H_SIZE);

        //Buffer memory allocation. This vector stores binary value (into integer vect\or) at the moment.
        int16_t buffer[M];
        for (int16_t k = 0; k < M; k++)
    5432:	ec 15       	cp	r30, r12
    5434:	fd 05       	cpc	r31, r13
    5436:	d9 f7       	brne	.-10     	; 0x542e <decode+0x70>
            buffer[k] = 0;

        //Index 8bit-binary vector transformation
        IntToBin(index, buffer, M);
    5438:	47 e0       	ldi	r20, 0x07	; 7
    543a:	50 e0       	ldi	r21, 0x00	; 0
    543c:	b8 01       	movw	r22, r16
    543e:	c1 5f       	subi	r28, 0xF1	; 241
    5440:	de 4f       	sbci	r29, 0xFE	; 254
    5442:	88 81       	ld	r24, Y
    5444:	99 81       	ldd	r25, Y+1	; 0x01
    5446:	cf 50       	subi	r28, 0x0F	; 15
    5448:	d1 40       	sbci	r29, 0x01	; 1
    544a:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <IntToBin>
    544e:	f7 01       	movw	r30, r14
    5450:	31 96       	adiw	r30, 0x01	; 1

        //Result value estimation and storing
        for (int16_t k = 0, j = pos_r + 1; k < M; k++, j++)
            result[j] = buffer[k];
    5452:	d8 01       	movw	r26, r16
    5454:	8c 91       	ld	r24, X
    5456:	0e 5f       	subi	r16, 0xFE	; 254
    5458:	1f 4f       	sbci	r17, 0xFF	; 255
    545a:	81 93       	st	Z+, r24

        //Index 8bit-binary vector transformation
        IntToBin(index, buffer, M);

        //Result value estimation and storing
        for (int16_t k = 0, j = pos_r + 1; k < M; k++, j++)
    545c:	c0 16       	cp	r12, r16
    545e:	d1 06       	cpc	r13, r17
    5460:	c1 f7       	brne	.-16     	; 0x5452 <decode+0x94>
            result[j] = buffer[k];
        if (max > 0)
    5462:	cf 5e       	subi	r28, 0xEF	; 239
    5464:	de 4f       	sbci	r29, 0xFE	; 254
    5466:	88 81       	ld	r24, Y
    5468:	99 81       	ldd	r25, Y+1	; 0x01
    546a:	c1 51       	subi	r28, 0x11	; 17
    546c:	d1 40       	sbci	r29, 0x01	; 1
    546e:	18 16       	cp	r1, r24
    5470:	19 06       	cpc	r1, r25
    5472:	24 f4       	brge	.+8      	; 0x547c <decode+0xbe>
            result[pos_r] = 1;
    5474:	81 e0       	ldi	r24, 0x01	; 1
    5476:	f7 01       	movw	r30, r14
    5478:	80 83       	st	Z, r24
    547a:	02 c0       	rjmp	.+4      	; 0x5480 <decode+0xc2>
        else
            result[pos_r] = 0;
    547c:	d7 01       	movw	r26, r14
    547e:	1c 92       	st	X, r1

        //Pointer update for the next cycle
        pos_i = pos_i + H_SIZE;
        pos_r = pos_r + M + 1;
    }
}
    5480:	ce 5e       	subi	r28, 0xEE	; 238
    5482:	de 4f       	sbci	r29, 0xFE	; 254
    5484:	0f b6       	in	r0, 0x3f	; 63
    5486:	f8 94       	cli
    5488:	de bf       	out	0x3e, r29	; 62
    548a:	0f be       	out	0x3f, r0	; 63
    548c:	cd bf       	out	0x3d, r28	; 61
    548e:	df 91       	pop	r29
    5490:	cf 91       	pop	r28
    5492:	1f 91       	pop	r17
    5494:	0f 91       	pop	r16
    5496:	ff 90       	pop	r15
    5498:	ef 90       	pop	r14
    549a:	df 90       	pop	r13
    549c:	cf 90       	pop	r12
    549e:	08 95       	ret

000054a0 <HexToBin>:
 *      Author: domenicoamelino
 */
#include "utilities.h"

void HexToBin(int16_t hex_number,uint8_t* bit_number)
{
    54a0:	cf 93       	push	r28
    54a2:	df 93       	push	r29
    54a4:	dc 01       	movw	r26, r24
    54a6:	fb 01       	movw	r30, r22
    54a8:	38 96       	adiw	r30, 0x08	; 8
    int16_t max = 128;
    54aa:	20 e8       	ldi	r18, 0x80	; 128
    54ac:	30 e0       	ldi	r19, 0x00	; 0
    for(int16_t i = 0 ; i <8 ; i++){
        bit_number [i] = (hex_number & max ) ? 1 : 0;
    54ae:	91 e0       	ldi	r25, 0x01	; 1
    54b0:	ad 01       	movw	r20, r26
    54b2:	42 23       	and	r20, r18
    54b4:	53 23       	and	r21, r19
    54b6:	45 2b       	or	r20, r21
    54b8:	09 f4       	brne	.+2      	; 0x54bc <HexToBin+0x1c>
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	eb 01       	movw	r28, r22
    54be:	99 93       	st	Y+, r25
    54c0:	be 01       	movw	r22, r28
        max >>=1;
    54c2:	35 95       	asr	r19
    54c4:	27 95       	ror	r18
#include "utilities.h"

void HexToBin(int16_t hex_number,uint8_t* bit_number)
{
    int16_t max = 128;
    for(int16_t i = 0 ; i <8 ; i++){
    54c6:	ce 17       	cp	r28, r30
    54c8:	df 07       	cpc	r29, r31
    54ca:	89 f7       	brne	.-30     	; 0x54ae <HexToBin+0xe>
        bit_number [i] = (hex_number & max ) ? 1 : 0;
        max >>=1;
    }
}
    54cc:	df 91       	pop	r29
    54ce:	cf 91       	pop	r28
    54d0:	08 95       	ret

000054d2 <IntToBin>:

void IntToBin(int16_t val, int16_t* binary_number, uint16_t size)
{
    54d2:	cf 93       	push	r28
    54d4:	df 93       	push	r29
    54d6:	9c 01       	movw	r18, r24
    54d8:	44 0f       	add	r20, r20
    54da:	55 1f       	adc	r21, r21
    54dc:	fb 01       	movw	r30, r22
    54de:	e4 0f       	add	r30, r20
    54e0:	f5 1f       	adc	r31, r21
    uint16_t j = size - 1;
    while(val!=0)
    {
        binary_number[j]= val % 2;
    54e2:	c2 e0       	ldi	r28, 0x02	; 2
    54e4:	d0 e0       	ldi	r29, 0x00	; 0
}

void IntToBin(int16_t val, int16_t* binary_number, uint16_t size)
{
    uint16_t j = size - 1;
    while(val!=0)
    54e6:	21 15       	cp	r18, r1
    54e8:	31 05       	cpc	r19, r1
    54ea:	69 f0       	breq	.+26     	; 0x5506 <IntToBin+0x34>
    {
        binary_number[j]= val % 2;
    54ec:	c9 01       	movw	r24, r18
    54ee:	be 01       	movw	r22, r28
    54f0:	0e 94 9e 34 	call	0x693c	; 0x693c <__divmodhi4>
    54f4:	92 93       	st	-Z, r25
    54f6:	82 93       	st	-Z, r24
        val = val / 2;
    54f8:	37 ff       	sbrs	r19, 7
    54fa:	02 c0       	rjmp	.+4      	; 0x5500 <IntToBin+0x2e>
    54fc:	2f 5f       	subi	r18, 0xFF	; 255
    54fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5500:	35 95       	asr	r19
    5502:	27 95       	ror	r18
    5504:	f0 cf       	rjmp	.-32     	; 0x54e6 <IntToBin+0x14>
        j--;
    }
}
    5506:	df 91       	pop	r29
    5508:	cf 91       	pop	r28
    550a:	08 95       	ret

0000550c <GenMatrix_column>:

void GenMatrix_column(int16_t val, int16_t* binary_number, int16_t m)
{
    binary_number[0] = 1;
    550c:	fb 01       	movw	r30, r22
    550e:	21 e0       	ldi	r18, 0x01	; 1
    5510:	30 e0       	ldi	r19, 0x00	; 0
    5512:	21 93       	st	Z+, r18
    5514:	31 93       	st	Z+, r19
    IntToBin(val,binary_number+1,m);
    5516:	bf 01       	movw	r22, r30
    5518:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <IntToBin>

0000551c <HexToBin_int>:
}

void HexToBin_int(uint8_t hex_number,int16_t* bit_number)
{
    551c:	cf 93       	push	r28
    551e:	df 93       	push	r29
    5520:	db 01       	movw	r26, r22
    5522:	50 96       	adiw	r26, 0x10	; 16
    int16_t max = 128;
    5524:	20 e8       	ldi	r18, 0x80	; 128
    5526:	30 e0       	ldi	r19, 0x00	; 0
    for(int16_t i = 0 ; i < 8 ; i++){
        bit_number [i] = (hex_number & max ) ? 1 : 0;
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	e1 e0       	ldi	r30, 0x01	; 1
    552c:	f0 e0       	ldi	r31, 0x00	; 0
    552e:	ac 01       	movw	r20, r24
    5530:	42 23       	and	r20, r18
    5532:	53 23       	and	r21, r19
    5534:	45 2b       	or	r20, r21
    5536:	11 f4       	brne	.+4      	; 0x553c <HexToBin_int+0x20>
    5538:	e0 e0       	ldi	r30, 0x00	; 0
    553a:	f0 e0       	ldi	r31, 0x00	; 0
    553c:	eb 01       	movw	r28, r22
    553e:	e9 93       	st	Y+, r30
    5540:	f9 93       	st	Y+, r31
    5542:	be 01       	movw	r22, r28
        max >>=1;
    5544:	35 95       	asr	r19
    5546:	27 95       	ror	r18
}

void HexToBin_int(uint8_t hex_number,int16_t* bit_number)
{
    int16_t max = 128;
    for(int16_t i = 0 ; i < 8 ; i++){
    5548:	ca 17       	cp	r28, r26
    554a:	db 07       	cpc	r29, r27
    554c:	71 f7       	brne	.-36     	; 0x552a <HexToBin_int+0xe>
    }
    //printf("Valore del vettore intero index ");
    //for(int16_t i=0;i<m;i++) printf("%d",bit_number[i]);
    //printf("\n");

}
    554e:	df 91       	pop	r29
    5550:	cf 91       	pop	r28
    5552:	08 95       	ret

00005554 <columnresult>:

uint8_t columnresult(uint8_t* v, int16_t* u, int16_t n)
{
    5554:	cf 93       	push	r28
    5556:	df 93       	push	r29
    5558:	ec 01       	movw	r28, r24
    555a:	fb 01       	movw	r30, r22
    uint8_t sum = 0;
    for (int16_t i = 0; i < n; i++) sum += v[i]&u[i];
    555c:	dc 01       	movw	r26, r24

}

uint8_t columnresult(uint8_t* v, int16_t* u, int16_t n)
{
    uint8_t sum = 0;
    555e:	90 e0       	ldi	r25, 0x00	; 0
    for (int16_t i = 0; i < n; i++) sum += v[i]&u[i];
    5560:	9d 01       	movw	r18, r26
    5562:	2c 1b       	sub	r18, r28
    5564:	3d 0b       	sbc	r19, r29
    5566:	24 17       	cp	r18, r20
    5568:	35 07       	cpc	r19, r21
    556a:	34 f4       	brge	.+12     	; 0x5578 <columnresult+0x24>
    556c:	8d 91       	ld	r24, X+
    556e:	20 81       	ld	r18, Z
    5570:	32 96       	adiw	r30, 0x02	; 2
    5572:	28 23       	and	r18, r24
    5574:	92 0f       	add	r25, r18
    5576:	f4 cf       	rjmp	.-24     	; 0x5560 <columnresult+0xc>

    sum = sum % 2; // se è pari dà zero.
    // restituisce sempre 1 o 0
    return sum;
}
    5578:	89 2f       	mov	r24, r25
    557a:	81 70       	andi	r24, 0x01	; 1
    557c:	df 91       	pop	r29
    557e:	cf 91       	pop	r28
    5580:	08 95       	ret

00005582 <max_array>:

void max_array(int16_t* partial_vector, int16_t* max, int16_t* index, int16_t h_size)
{
    5582:	ef 92       	push	r14
    5584:	ff 92       	push	r15
    5586:	0f 93       	push	r16
    5588:	1f 93       	push	r17
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    for (int16_t k = 0; k < h_size; k++)
    558e:	e1 2c       	mov	r14, r1
    5590:	f1 2c       	mov	r15, r1
    5592:	e2 16       	cp	r14, r18
    5594:	f3 06       	cpc	r15, r19
    5596:	04 f5       	brge	.+64     	; 0x55d8 <max_array+0x56>
    {
        // printf("Valore %d indice %d Max attuale %d \n ",partial_vector[k],k,*max);
        int16_t value = ABS(partial_vector[k]);
    5598:	ec 01       	movw	r28, r24
    559a:	a9 91       	ld	r26, Y+
    559c:	b9 91       	ld	r27, Y+
    559e:	ce 01       	movw	r24, r28
        int16_t abs_max = ABS(*max);
        if (value > abs_max)
    55a0:	8d 01       	movw	r16, r26
    55a2:	b7 ff       	sbrs	r27, 7
    55a4:	04 c0       	rjmp	.+8      	; 0x55ae <max_array+0x2c>
    55a6:	00 27       	eor	r16, r16
    55a8:	11 27       	eor	r17, r17
    55aa:	0a 1b       	sub	r16, r26
    55ac:	1b 0b       	sbc	r17, r27
    55ae:	fb 01       	movw	r30, r22
    55b0:	c0 81       	ld	r28, Z
    55b2:	d1 81       	ldd	r29, Z+1	; 0x01
    55b4:	d7 ff       	sbrs	r29, 7
    55b6:	03 c0       	rjmp	.+6      	; 0x55be <max_array+0x3c>
    55b8:	d1 95       	neg	r29
    55ba:	c1 95       	neg	r28
    55bc:	d1 09       	sbc	r29, r1
    55be:	c0 17       	cp	r28, r16
    55c0:	d1 07       	cpc	r29, r17
    55c2:	34 f4       	brge	.+12     	; 0x55d0 <max_array+0x4e>
        {
           //printf("%d \n",k);
           *max = partial_vector[k];
    55c4:	eb 01       	movw	r28, r22
    55c6:	b9 83       	std	Y+1, r27	; 0x01
    55c8:	a8 83       	st	Y, r26
           *index = k;
    55ca:	fa 01       	movw	r30, r20
    55cc:	f1 82       	std	Z+1, r15	; 0x01
    55ce:	e0 82       	st	Z, r14
    return sum;
}

void max_array(int16_t* partial_vector, int16_t* max, int16_t* index, int16_t h_size)
{
    for (int16_t k = 0; k < h_size; k++)
    55d0:	ff ef       	ldi	r31, 0xFF	; 255
    55d2:	ef 1a       	sub	r14, r31
    55d4:	ff 0a       	sbc	r15, r31
    55d6:	dd cf       	rjmp	.-70     	; 0x5592 <max_array+0x10>
        //  printf("Nuovo massimo-> %d con indice--> %d \n",*max,*index);
        }

    }
    //printf("Sto ritornando il valore max %d \n",*max);
}
    55d8:	df 91       	pop	r29
    55da:	cf 91       	pop	r28
    55dc:	1f 91       	pop	r17
    55de:	0f 91       	pop	r16
    55e0:	ff 90       	pop	r15
    55e2:	ef 90       	pop	r14
    55e4:	08 95       	ret

000055e6 <BinToHex>:




uint8_t BinToHex(uint8_t* bit)
{
    55e6:	fc 01       	movw	r30, r24
    int16_t c = bit[0]<<7 | bit[1]<<6 | bit[2]<<5 | bit[3]<<4| bit[4]<<3 | bit[5]<<2 | bit[6]<<1 | bit[7];
    return c;
    55e8:	80 81       	ld	r24, Z
    55ea:	40 e8       	ldi	r20, 0x80	; 128
    55ec:	84 9f       	mul	r24, r20
    55ee:	90 01       	movw	r18, r0
    55f0:	11 24       	eor	r1, r1
    55f2:	91 81       	ldd	r25, Z+1	; 0x01
    55f4:	40 e4       	ldi	r20, 0x40	; 64
    55f6:	94 9f       	mul	r25, r20
    55f8:	c0 01       	movw	r24, r0
    55fa:	11 24       	eor	r1, r1
    55fc:	82 2b       	or	r24, r18
    55fe:	93 2b       	or	r25, r19
    5600:	27 81       	ldd	r18, Z+7	; 0x07
    5602:	82 2b       	or	r24, r18
    5604:	22 81       	ldd	r18, Z+2	; 0x02
    5606:	40 e2       	ldi	r20, 0x20	; 32
    5608:	24 9f       	mul	r18, r20
    560a:	90 01       	movw	r18, r0
    560c:	11 24       	eor	r1, r1
    560e:	28 2b       	or	r18, r24
    5610:	39 2b       	or	r19, r25
    5612:	43 81       	ldd	r20, Z+3	; 0x03
    5614:	80 e1       	ldi	r24, 0x10	; 16
    5616:	48 9f       	mul	r20, r24
    5618:	a0 01       	movw	r20, r0
    561a:	11 24       	eor	r1, r1
    561c:	24 2b       	or	r18, r20
    561e:	35 2b       	or	r19, r21
    5620:	44 81       	ldd	r20, Z+4	; 0x04
    5622:	98 e0       	ldi	r25, 0x08	; 8
    5624:	49 9f       	mul	r20, r25
    5626:	a0 01       	movw	r20, r0
    5628:	11 24       	eor	r1, r1
    562a:	24 2b       	or	r18, r20
    562c:	35 2b       	or	r19, r21
    562e:	45 81       	ldd	r20, Z+5	; 0x05
    5630:	84 e0       	ldi	r24, 0x04	; 4
    5632:	48 9f       	mul	r20, r24
    5634:	a0 01       	movw	r20, r0
    5636:	11 24       	eor	r1, r1
    5638:	24 2b       	or	r18, r20
    563a:	35 2b       	or	r19, r21
    563c:	86 81       	ldd	r24, Z+6	; 0x06
    563e:	88 0f       	add	r24, r24
}
    5640:	82 2b       	or	r24, r18
    5642:	08 95       	ret

00005644 <cw_to_byte>:

uint8_t cw_to_byte(int16_t* c)
{
    5644:	fc 01       	movw	r30, r24
    5646:	27 e0       	ldi	r18, 0x07	; 7
    5648:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t b = 0U;
    564a:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t x = 0;
    for(uint8_t i = 0U; i < 8U; i++)
    {
        x = (c[i] == 1) ? 1U : 0U;
    564c:	61 91       	ld	r22, Z+
    564e:	71 91       	ld	r23, Z+
        b = b | (x << (7-i));
    5650:	41 e0       	ldi	r20, 0x01	; 1
    5652:	50 e0       	ldi	r21, 0x00	; 0
    5654:	61 30       	cpi	r22, 0x01	; 1
    5656:	71 05       	cpc	r23, r1
    5658:	11 f0       	breq	.+4      	; 0x565e <cw_to_byte+0x1a>
    565a:	40 e0       	ldi	r20, 0x00	; 0
    565c:	50 e0       	ldi	r21, 0x00	; 0
    565e:	02 2e       	mov	r0, r18
    5660:	01 c0       	rjmp	.+2      	; 0x5664 <cw_to_byte+0x20>
    5662:	44 0f       	add	r20, r20
    5664:	0a 94       	dec	r0
    5666:	ea f7       	brpl	.-6      	; 0x5662 <cw_to_byte+0x1e>
    5668:	84 2b       	or	r24, r20
    566a:	21 50       	subi	r18, 0x01	; 1
    566c:	31 09       	sbc	r19, r1
    566e:	70 f7       	brcc	.-36     	; 0x564c <cw_to_byte+0x8>
    }
    return b;
    5670:	08 95       	ret

00005672 <dm_hash>:
#include <stdio.h>
#include "pc_utils.h"
#endif // PLAT_ARDUINO

void dm_hash(uint8_t* puf, uint8_t* next_state)
{
    5672:	8f 92       	push	r8
    5674:	9f 92       	push	r9
    5676:	af 92       	push	r10
    5678:	bf 92       	push	r11
    567a:	cf 92       	push	r12
    567c:	df 92       	push	r13
    567e:	ef 92       	push	r14
    5680:	ff 92       	push	r15
    5682:	0f 93       	push	r16
    5684:	1f 93       	push	r17
    5686:	cf 93       	push	r28
    5688:	df 93       	push	r29
    568a:	cd b7       	in	r28, 0x3d	; 61
    568c:	de b7       	in	r29, 0x3e	; 62
    568e:	60 97       	sbiw	r28, 0x10	; 16
    5690:	0f b6       	in	r0, 0x3f	; 63
    5692:	f8 94       	cli
    5694:	de bf       	out	0x3e, r29	; 62
    5696:	0f be       	out	0x3f, r0	; 63
    5698:	cd bf       	out	0x3d, r28	; 61
    569a:	6c 01       	movw	r12, r24
    569c:	96 2e       	mov	r9, r22
    569e:	87 2e       	mov	r8, r23
    uint8_t state[FE_KEY_SIZE] = {0U};
    56a0:	ce 01       	movw	r24, r28
    56a2:	01 96       	adiw	r24, 0x01	; 1
    56a4:	7c 01       	movw	r14, r24
    56a6:	80 e1       	ldi	r24, 0x10	; 16
    56a8:	f7 01       	movw	r30, r14
    56aa:	11 92       	st	Z+, r1
    56ac:	8a 95       	dec	r24
    56ae:	e9 f7       	brne	.-6      	; 0x56aa <dm_hash+0x38>
    56b0:	e6 2f       	mov	r30, r22
    56b2:	f7 2f       	mov	r31, r23
    56b4:	d7 01       	movw	r26, r14

    // prepara lo stato iniziale
    for(uint8_t i = 0U; i < FE_KEY_SIZE; i++)
    56b6:	80 e0       	ldi	r24, 0x00	; 0
    {
        state[i] = i;
    56b8:	8d 93       	st	X+, r24
        next_state[i] = i;
    56ba:	81 93       	st	Z+, r24
void dm_hash(uint8_t* puf, uint8_t* next_state)
{
    uint8_t state[FE_KEY_SIZE] = {0U};

    // prepara lo stato iniziale
    for(uint8_t i = 0U; i < FE_KEY_SIZE; i++)
    56bc:	8f 5f       	subi	r24, 0xFF	; 255
    56be:	80 31       	cpi	r24, 0x10	; 16
    56c0:	d9 f7       	brne	.-10     	; 0x56b8 <dm_hash+0x46>
    56c2:	00 e0       	ldi	r16, 0x00	; 0
    56c4:	10 e0       	ldi	r17, 0x00	; 0
    56c6:	5e 01       	movw	r10, r28
    56c8:	f1 e1       	ldi	r31, 0x11	; 17
    56ca:	af 0e       	add	r10, r31
    56cc:	b1 1c       	adc	r11, r1
        print_buffer(&puf[i * FE_KEY_SIZE], FE_KEY_SIZE);
#endif
#endif // PLAT_ARDUINO

        // BEGIN_ENCRYPTION();
        Decrypt(next_state, &puf[i * FE_KEY_SIZE]);
    56ce:	b6 01       	movw	r22, r12
    56d0:	60 0f       	add	r22, r16
    56d2:	71 1f       	adc	r23, r17
    56d4:	89 2d       	mov	r24, r9
    56d6:	98 2d       	mov	r25, r8
    56d8:	0e 94 92 2b 	call	0x5724	; 0x5724 <Decrypt>
    56dc:	d7 01       	movw	r26, r14
    56de:	e9 2d       	mov	r30, r9
    56e0:	f8 2d       	mov	r31, r8
        // END_ENCRYPTION();

        for(uint8_t j = 0U; j < FE_KEY_SIZE; j++)
        {
            next_state[j] = state[j] ^ next_state[j];
    56e2:	9c 91       	ld	r25, X
    56e4:	80 81       	ld	r24, Z
    56e6:	89 27       	eor	r24, r25
    56e8:	81 93       	st	Z+, r24
            state[j] = next_state[j];
    56ea:	8d 93       	st	X+, r24

        // BEGIN_ENCRYPTION();
        Decrypt(next_state, &puf[i * FE_KEY_SIZE]);
        // END_ENCRYPTION();

        for(uint8_t j = 0U; j < FE_KEY_SIZE; j++)
    56ec:	aa 15       	cp	r26, r10
    56ee:	bb 05       	cpc	r27, r11
    56f0:	c1 f7       	brne	.-16     	; 0x56e2 <dm_hash+0x70>
    56f2:	00 5f       	subi	r16, 0xF0	; 240
    56f4:	1f 4f       	sbci	r17, 0xFF	; 255


    // schema di Davies–Meyer
    // eseguo il cifrario in cascata usando come chiave un blocco
    // diverso della puf (128 bit ciascuno)
    for(uint16_t i = 0U; i < CS_LEN_BYTE; i++)
    56f6:	00 33       	cpi	r16, 0x30	; 48
    56f8:	81 e0       	ldi	r24, 0x01	; 1
    56fa:	18 07       	cpc	r17, r24
    56fc:	41 f7       	brne	.-48     	; 0x56ce <dm_hash+0x5c>
        {
            next_state[j] = state[j] ^ next_state[j];
            state[j] = next_state[j];
        }
    }
    56fe:	60 96       	adiw	r28, 0x10	; 16
    5700:	0f b6       	in	r0, 0x3f	; 63
    5702:	f8 94       	cli
    5704:	de bf       	out	0x3e, r29	; 62
    5706:	0f be       	out	0x3f, r0	; 63
    5708:	cd bf       	out	0x3d, r28	; 61
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	1f 91       	pop	r17
    5710:	0f 91       	pop	r16
    5712:	ff 90       	pop	r15
    5714:	ef 90       	pop	r14
    5716:	df 90       	pop	r13
    5718:	cf 90       	pop	r12
    571a:	bf 90       	pop	r11
    571c:	af 90       	pop	r10
    571e:	9f 90       	pop	r9
    5720:	8f 90       	pop	r8
    5722:	08 95       	ret

00005724 <Decrypt>:
#ifndef AVR_CLOBBERED_REGISTERS
void __attribute__((naked)) Decrypt(uint8_t *block, uint8_t *roundKeys)
#else
void Decrypt(uint8_t *block, uint8_t *roundKeys)
#endif
{
    5724:	3f 92       	push	r3
    5726:	4f 92       	push	r4
    5728:	5f 92       	push	r5
    572a:	6f 92       	push	r6
    572c:	7f 92       	push	r7
    572e:	8f 92       	push	r8
    5730:	9f 92       	push	r9
    5732:	af 92       	push	r10
    5734:	bf 92       	push	r11
    5736:	cf 92       	push	r12
    5738:	df 92       	push	r13
    573a:	ef 92       	push	r14
    573c:	ff 92       	push	r15
    573e:	0f 93       	push	r16
    5740:	1f 93       	push	r17
    /*  
     * r4-r19: state
     * r3: key
     * r20, r21: temp registers
     */
    asm(
    5742:	dc 01       	movw	r26, r24
    5744:	4d 90       	ld	r4, X+
    5746:	5d 90       	ld	r5, X+
    5748:	6d 90       	ld	r6, X+
    574a:	7d 90       	ld	r7, X+
    574c:	8d 90       	ld	r8, X+
    574e:	9d 90       	ld	r9, X+
    5750:	ad 90       	ld	r10, X+
    5752:	bd 90       	ld	r11, X+
    5754:	cd 90       	ld	r12, X+
    5756:	dd 90       	ld	r13, X+
    5758:	ed 90       	ld	r14, X+
    575a:	fd 90       	ld	r15, X+
    575c:	0d 91       	ld	r16, X+
    575e:	1d 91       	ld	r17, X+
    5760:	2d 91       	ld	r18, X+
    5762:	3c 91       	ld	r19, X
    5764:	fb 01       	movw	r30, r22
    5766:	31 90       	ld	r3, Z+
    5768:	43 24       	eor	r4, r3
    576a:	31 90       	ld	r3, Z+
    576c:	53 24       	eor	r5, r3
    576e:	31 90       	ld	r3, Z+
    5770:	63 24       	eor	r6, r3
    5772:	31 90       	ld	r3, Z+
    5774:	73 24       	eor	r7, r3
    5776:	31 90       	ld	r3, Z+
    5778:	83 24       	eor	r8, r3
    577a:	31 90       	ld	r3, Z+
    577c:	93 24       	eor	r9, r3
    577e:	31 90       	ld	r3, Z+
    5780:	a3 24       	eor	r10, r3
    5782:	31 90       	ld	r3, Z+
    5784:	b3 24       	eor	r11, r3
    5786:	31 90       	ld	r3, Z+
    5788:	c3 24       	eor	r12, r3
    578a:	31 90       	ld	r3, Z+
    578c:	d3 24       	eor	r13, r3
    578e:	31 90       	ld	r3, Z+
    5790:	e3 24       	eor	r14, r3
    5792:	31 90       	ld	r3, Z+
    5794:	f3 24       	eor	r15, r3
    5796:	31 90       	ld	r3, Z+
    5798:	03 25       	eor	r16, r3
    579a:	31 90       	ld	r3, Z+
    579c:	13 25       	eor	r17, r3
    579e:	31 90       	ld	r3, Z+
    57a0:	23 25       	eor	r18, r3
    57a2:	30 80       	ld	r3, Z
    57a4:	33 25       	eor	r19, r3
    57a6:	a6 01       	movw	r20, r12
    57a8:	67 01       	movw	r12, r14
    57aa:	7a 01       	movw	r14, r20
    57ac:	8c 24       	eor	r8, r12
    57ae:	9d 24       	eor	r9, r13
    57b0:	ae 24       	eor	r10, r14
    57b2:	bf 24       	eor	r11, r15
    57b4:	48 2d       	mov	r20, r8
    57b6:	89 2c       	mov	r8, r9
    57b8:	9a 2c       	mov	r9, r10
    57ba:	ab 2c       	mov	r10, r11
    57bc:	b4 2e       	mov	r11, r20
    57be:	88 0c       	add	r8, r8
    57c0:	99 1c       	adc	r9, r9
    57c2:	aa 1c       	adc	r10, r10
    57c4:	bb 1c       	adc	r11, r11
    57c6:	81 1c       	adc	r8, r1
    57c8:	c8 18       	sub	r12, r8
    57ca:	d9 08       	sbc	r13, r9
    57cc:	ea 08       	sbc	r14, r10
    57ce:	fb 08       	sbc	r15, r11
    57d0:	04 25       	eor	r16, r4
    57d2:	15 25       	eor	r17, r5
    57d4:	26 25       	eor	r18, r6
    57d6:	37 25       	eor	r19, r7
    57d8:	a8 01       	movw	r20, r16
    57da:	89 01       	movw	r16, r18
    57dc:	9a 01       	movw	r18, r20
    57de:	00 0f       	add	r16, r16
    57e0:	11 1f       	adc	r17, r17
    57e2:	22 1f       	adc	r18, r18
    57e4:	33 1f       	adc	r19, r19
    57e6:	01 1d       	adc	r16, r1
    57e8:	00 0f       	add	r16, r16
    57ea:	11 1f       	adc	r17, r17
    57ec:	22 1f       	adc	r18, r18
    57ee:	33 1f       	adc	r19, r19
    57f0:	01 1d       	adc	r16, r1
    57f2:	00 0f       	add	r16, r16
    57f4:	11 1f       	adc	r17, r17
    57f6:	22 1f       	adc	r18, r18
    57f8:	33 1f       	adc	r19, r19
    57fa:	01 1d       	adc	r16, r1
    57fc:	40 1a       	sub	r4, r16
    57fe:	51 0a       	sbc	r5, r17
    5800:	62 0a       	sbc	r6, r18
    5802:	73 0a       	sbc	r7, r19
    5804:	0c 25       	eor	r16, r12
    5806:	1d 25       	eor	r17, r13
    5808:	2e 25       	eor	r18, r14
    580a:	3f 25       	eor	r19, r15
    580c:	40 2f       	mov	r20, r16
    580e:	01 2f       	mov	r16, r17
    5810:	12 2f       	mov	r17, r18
    5812:	23 2f       	mov	r18, r19
    5814:	34 2f       	mov	r19, r20
    5816:	c0 1a       	sub	r12, r16
    5818:	d1 0a       	sbc	r13, r17
    581a:	e2 0a       	sbc	r14, r18
    581c:	f3 0a       	sbc	r15, r19
    581e:	a2 01       	movw	r20, r4
    5820:	23 01       	movw	r4, r6
    5822:	3a 01       	movw	r6, r20
    5824:	84 24       	eor	r8, r4
    5826:	95 24       	eor	r9, r5
    5828:	a6 24       	eor	r10, r6
    582a:	b7 24       	eor	r11, r7
    582c:	48 2d       	mov	r20, r8
    582e:	89 2c       	mov	r8, r9
    5830:	9a 2c       	mov	r9, r10
    5832:	ab 2c       	mov	r10, r11
    5834:	b4 2e       	mov	r11, r20
    5836:	88 0c       	add	r8, r8
    5838:	99 1c       	adc	r9, r9
    583a:	aa 1c       	adc	r10, r10
    583c:	bb 1c       	adc	r11, r11
    583e:	81 1c       	adc	r8, r1
    5840:	88 0c       	add	r8, r8
    5842:	99 1c       	adc	r9, r9
    5844:	aa 1c       	adc	r10, r10
    5846:	bb 1c       	adc	r11, r11
    5848:	81 1c       	adc	r8, r1
    584a:	88 0c       	add	r8, r8
    584c:	99 1c       	adc	r9, r9
    584e:	aa 1c       	adc	r10, r10
    5850:	bb 1c       	adc	r11, r11
    5852:	81 1c       	adc	r8, r1
    5854:	48 18       	sub	r4, r8
    5856:	59 08       	sbc	r5, r9
    5858:	6a 08       	sbc	r6, r10
    585a:	7b 08       	sbc	r7, r11
    585c:	a6 01       	movw	r20, r12
    585e:	67 01       	movw	r12, r14
    5860:	7a 01       	movw	r14, r20
    5862:	8c 24       	eor	r8, r12
    5864:	9d 24       	eor	r9, r13
    5866:	ae 24       	eor	r10, r14
    5868:	bf 24       	eor	r11, r15
    586a:	48 2d       	mov	r20, r8
    586c:	89 2c       	mov	r8, r9
    586e:	9a 2c       	mov	r9, r10
    5870:	ab 2c       	mov	r10, r11
    5872:	b4 2e       	mov	r11, r20
    5874:	88 0c       	add	r8, r8
    5876:	99 1c       	adc	r9, r9
    5878:	aa 1c       	adc	r10, r10
    587a:	bb 1c       	adc	r11, r11
    587c:	81 1c       	adc	r8, r1
    587e:	c8 18       	sub	r12, r8
    5880:	d9 08       	sbc	r13, r9
    5882:	ea 08       	sbc	r14, r10
    5884:	fb 08       	sbc	r15, r11
    5886:	04 25       	eor	r16, r4
    5888:	15 25       	eor	r17, r5
    588a:	26 25       	eor	r18, r6
    588c:	37 25       	eor	r19, r7
    588e:	a8 01       	movw	r20, r16
    5890:	89 01       	movw	r16, r18
    5892:	9a 01       	movw	r18, r20
    5894:	00 0f       	add	r16, r16
    5896:	11 1f       	adc	r17, r17
    5898:	22 1f       	adc	r18, r18
    589a:	33 1f       	adc	r19, r19
    589c:	01 1d       	adc	r16, r1
    589e:	00 0f       	add	r16, r16
    58a0:	11 1f       	adc	r17, r17
    58a2:	22 1f       	adc	r18, r18
    58a4:	33 1f       	adc	r19, r19
    58a6:	01 1d       	adc	r16, r1
    58a8:	00 0f       	add	r16, r16
    58aa:	11 1f       	adc	r17, r17
    58ac:	22 1f       	adc	r18, r18
    58ae:	33 1f       	adc	r19, r19
    58b0:	01 1d       	adc	r16, r1
    58b2:	40 1a       	sub	r4, r16
    58b4:	51 0a       	sbc	r5, r17
    58b6:	62 0a       	sbc	r6, r18
    58b8:	73 0a       	sbc	r7, r19
    58ba:	0c 25       	eor	r16, r12
    58bc:	1d 25       	eor	r17, r13
    58be:	2e 25       	eor	r18, r14
    58c0:	3f 25       	eor	r19, r15
    58c2:	40 2f       	mov	r20, r16
    58c4:	01 2f       	mov	r16, r17
    58c6:	12 2f       	mov	r17, r18
    58c8:	23 2f       	mov	r18, r19
    58ca:	34 2f       	mov	r19, r20
    58cc:	c0 1a       	sub	r12, r16
    58ce:	d1 0a       	sbc	r13, r17
    58d0:	e2 0a       	sbc	r14, r18
    58d2:	f3 0a       	sbc	r15, r19
    58d4:	a2 01       	movw	r20, r4
    58d6:	23 01       	movw	r4, r6
    58d8:	3a 01       	movw	r6, r20
    58da:	84 24       	eor	r8, r4
    58dc:	95 24       	eor	r9, r5
    58de:	a6 24       	eor	r10, r6
    58e0:	b7 24       	eor	r11, r7
    58e2:	48 2d       	mov	r20, r8
    58e4:	89 2c       	mov	r8, r9
    58e6:	9a 2c       	mov	r9, r10
    58e8:	ab 2c       	mov	r10, r11
    58ea:	b4 2e       	mov	r11, r20
    58ec:	88 0c       	add	r8, r8
    58ee:	99 1c       	adc	r9, r9
    58f0:	aa 1c       	adc	r10, r10
    58f2:	bb 1c       	adc	r11, r11
    58f4:	81 1c       	adc	r8, r1
    58f6:	88 0c       	add	r8, r8
    58f8:	99 1c       	adc	r9, r9
    58fa:	aa 1c       	adc	r10, r10
    58fc:	bb 1c       	adc	r11, r11
    58fe:	81 1c       	adc	r8, r1
    5900:	88 0c       	add	r8, r8
    5902:	99 1c       	adc	r9, r9
    5904:	aa 1c       	adc	r10, r10
    5906:	bb 1c       	adc	r11, r11
    5908:	81 1c       	adc	r8, r1
    590a:	48 18       	sub	r4, r8
    590c:	59 08       	sbc	r5, r9
    590e:	6a 08       	sbc	r6, r10
    5910:	7b 08       	sbc	r7, r11
    5912:	a6 01       	movw	r20, r12
    5914:	67 01       	movw	r12, r14
    5916:	7a 01       	movw	r14, r20
    5918:	8c 24       	eor	r8, r12
    591a:	9d 24       	eor	r9, r13
    591c:	ae 24       	eor	r10, r14
    591e:	bf 24       	eor	r11, r15
    5920:	48 2d       	mov	r20, r8
    5922:	89 2c       	mov	r8, r9
    5924:	9a 2c       	mov	r9, r10
    5926:	ab 2c       	mov	r10, r11
    5928:	b4 2e       	mov	r11, r20
    592a:	88 0c       	add	r8, r8
    592c:	99 1c       	adc	r9, r9
    592e:	aa 1c       	adc	r10, r10
    5930:	bb 1c       	adc	r11, r11
    5932:	81 1c       	adc	r8, r1
    5934:	c8 18       	sub	r12, r8
    5936:	d9 08       	sbc	r13, r9
    5938:	ea 08       	sbc	r14, r10
    593a:	fb 08       	sbc	r15, r11
    593c:	04 25       	eor	r16, r4
    593e:	15 25       	eor	r17, r5
    5940:	26 25       	eor	r18, r6
    5942:	37 25       	eor	r19, r7
    5944:	a8 01       	movw	r20, r16
    5946:	89 01       	movw	r16, r18
    5948:	9a 01       	movw	r18, r20
    594a:	00 0f       	add	r16, r16
    594c:	11 1f       	adc	r17, r17
    594e:	22 1f       	adc	r18, r18
    5950:	33 1f       	adc	r19, r19
    5952:	01 1d       	adc	r16, r1
    5954:	00 0f       	add	r16, r16
    5956:	11 1f       	adc	r17, r17
    5958:	22 1f       	adc	r18, r18
    595a:	33 1f       	adc	r19, r19
    595c:	01 1d       	adc	r16, r1
    595e:	00 0f       	add	r16, r16
    5960:	11 1f       	adc	r17, r17
    5962:	22 1f       	adc	r18, r18
    5964:	33 1f       	adc	r19, r19
    5966:	01 1d       	adc	r16, r1
    5968:	40 1a       	sub	r4, r16
    596a:	51 0a       	sbc	r5, r17
    596c:	62 0a       	sbc	r6, r18
    596e:	73 0a       	sbc	r7, r19
    5970:	0c 25       	eor	r16, r12
    5972:	1d 25       	eor	r17, r13
    5974:	2e 25       	eor	r18, r14
    5976:	3f 25       	eor	r19, r15
    5978:	40 2f       	mov	r20, r16
    597a:	01 2f       	mov	r16, r17
    597c:	12 2f       	mov	r17, r18
    597e:	23 2f       	mov	r18, r19
    5980:	34 2f       	mov	r19, r20
    5982:	c0 1a       	sub	r12, r16
    5984:	d1 0a       	sbc	r13, r17
    5986:	e2 0a       	sbc	r14, r18
    5988:	f3 0a       	sbc	r15, r19
    598a:	a2 01       	movw	r20, r4
    598c:	23 01       	movw	r4, r6
    598e:	3a 01       	movw	r6, r20
    5990:	84 24       	eor	r8, r4
    5992:	95 24       	eor	r9, r5
    5994:	a6 24       	eor	r10, r6
    5996:	b7 24       	eor	r11, r7
    5998:	48 2d       	mov	r20, r8
    599a:	89 2c       	mov	r8, r9
    599c:	9a 2c       	mov	r9, r10
    599e:	ab 2c       	mov	r10, r11
    59a0:	b4 2e       	mov	r11, r20
    59a2:	88 0c       	add	r8, r8
    59a4:	99 1c       	adc	r9, r9
    59a6:	aa 1c       	adc	r10, r10
    59a8:	bb 1c       	adc	r11, r11
    59aa:	81 1c       	adc	r8, r1
    59ac:	88 0c       	add	r8, r8
    59ae:	99 1c       	adc	r9, r9
    59b0:	aa 1c       	adc	r10, r10
    59b2:	bb 1c       	adc	r11, r11
    59b4:	81 1c       	adc	r8, r1
    59b6:	88 0c       	add	r8, r8
    59b8:	99 1c       	adc	r9, r9
    59ba:	aa 1c       	adc	r10, r10
    59bc:	bb 1c       	adc	r11, r11
    59be:	81 1c       	adc	r8, r1
    59c0:	48 18       	sub	r4, r8
    59c2:	59 08       	sbc	r5, r9
    59c4:	6a 08       	sbc	r6, r10
    59c6:	7b 08       	sbc	r7, r11
    59c8:	a6 01       	movw	r20, r12
    59ca:	67 01       	movw	r12, r14
    59cc:	7a 01       	movw	r14, r20
    59ce:	8c 24       	eor	r8, r12
    59d0:	9d 24       	eor	r9, r13
    59d2:	ae 24       	eor	r10, r14
    59d4:	bf 24       	eor	r11, r15
    59d6:	48 2d       	mov	r20, r8
    59d8:	89 2c       	mov	r8, r9
    59da:	9a 2c       	mov	r9, r10
    59dc:	ab 2c       	mov	r10, r11
    59de:	b4 2e       	mov	r11, r20
    59e0:	88 0c       	add	r8, r8
    59e2:	99 1c       	adc	r9, r9
    59e4:	aa 1c       	adc	r10, r10
    59e6:	bb 1c       	adc	r11, r11
    59e8:	81 1c       	adc	r8, r1
    59ea:	c8 18       	sub	r12, r8
    59ec:	d9 08       	sbc	r13, r9
    59ee:	ea 08       	sbc	r14, r10
    59f0:	fb 08       	sbc	r15, r11
    59f2:	04 25       	eor	r16, r4
    59f4:	15 25       	eor	r17, r5
    59f6:	26 25       	eor	r18, r6
    59f8:	37 25       	eor	r19, r7
    59fa:	a8 01       	movw	r20, r16
    59fc:	89 01       	movw	r16, r18
    59fe:	9a 01       	movw	r18, r20
    5a00:	00 0f       	add	r16, r16
    5a02:	11 1f       	adc	r17, r17
    5a04:	22 1f       	adc	r18, r18
    5a06:	33 1f       	adc	r19, r19
    5a08:	01 1d       	adc	r16, r1
    5a0a:	00 0f       	add	r16, r16
    5a0c:	11 1f       	adc	r17, r17
    5a0e:	22 1f       	adc	r18, r18
    5a10:	33 1f       	adc	r19, r19
    5a12:	01 1d       	adc	r16, r1
    5a14:	00 0f       	add	r16, r16
    5a16:	11 1f       	adc	r17, r17
    5a18:	22 1f       	adc	r18, r18
    5a1a:	33 1f       	adc	r19, r19
    5a1c:	01 1d       	adc	r16, r1
    5a1e:	40 1a       	sub	r4, r16
    5a20:	51 0a       	sbc	r5, r17
    5a22:	62 0a       	sbc	r6, r18
    5a24:	73 0a       	sbc	r7, r19
    5a26:	0c 25       	eor	r16, r12
    5a28:	1d 25       	eor	r17, r13
    5a2a:	2e 25       	eor	r18, r14
    5a2c:	3f 25       	eor	r19, r15
    5a2e:	40 2f       	mov	r20, r16
    5a30:	01 2f       	mov	r16, r17
    5a32:	12 2f       	mov	r17, r18
    5a34:	23 2f       	mov	r18, r19
    5a36:	34 2f       	mov	r19, r20
    5a38:	c0 1a       	sub	r12, r16
    5a3a:	d1 0a       	sbc	r13, r17
    5a3c:	e2 0a       	sbc	r14, r18
    5a3e:	f3 0a       	sbc	r15, r19
    5a40:	a2 01       	movw	r20, r4
    5a42:	23 01       	movw	r4, r6
    5a44:	3a 01       	movw	r6, r20
    5a46:	84 24       	eor	r8, r4
    5a48:	95 24       	eor	r9, r5
    5a4a:	a6 24       	eor	r10, r6
    5a4c:	b7 24       	eor	r11, r7
    5a4e:	48 2d       	mov	r20, r8
    5a50:	89 2c       	mov	r8, r9
    5a52:	9a 2c       	mov	r9, r10
    5a54:	ab 2c       	mov	r10, r11
    5a56:	b4 2e       	mov	r11, r20
    5a58:	88 0c       	add	r8, r8
    5a5a:	99 1c       	adc	r9, r9
    5a5c:	aa 1c       	adc	r10, r10
    5a5e:	bb 1c       	adc	r11, r11
    5a60:	81 1c       	adc	r8, r1
    5a62:	88 0c       	add	r8, r8
    5a64:	99 1c       	adc	r9, r9
    5a66:	aa 1c       	adc	r10, r10
    5a68:	bb 1c       	adc	r11, r11
    5a6a:	81 1c       	adc	r8, r1
    5a6c:	88 0c       	add	r8, r8
    5a6e:	99 1c       	adc	r9, r9
    5a70:	aa 1c       	adc	r10, r10
    5a72:	bb 1c       	adc	r11, r11
    5a74:	81 1c       	adc	r8, r1
    5a76:	48 18       	sub	r4, r8
    5a78:	59 08       	sbc	r5, r9
    5a7a:	6a 08       	sbc	r6, r10
    5a7c:	7b 08       	sbc	r7, r11
    5a7e:	a6 01       	movw	r20, r12
    5a80:	67 01       	movw	r12, r14
    5a82:	7a 01       	movw	r14, r20
    5a84:	8c 24       	eor	r8, r12
    5a86:	9d 24       	eor	r9, r13
    5a88:	ae 24       	eor	r10, r14
    5a8a:	bf 24       	eor	r11, r15
    5a8c:	48 2d       	mov	r20, r8
    5a8e:	89 2c       	mov	r8, r9
    5a90:	9a 2c       	mov	r9, r10
    5a92:	ab 2c       	mov	r10, r11
    5a94:	b4 2e       	mov	r11, r20
    5a96:	88 0c       	add	r8, r8
    5a98:	99 1c       	adc	r9, r9
    5a9a:	aa 1c       	adc	r10, r10
    5a9c:	bb 1c       	adc	r11, r11
    5a9e:	81 1c       	adc	r8, r1
    5aa0:	c8 18       	sub	r12, r8
    5aa2:	d9 08       	sbc	r13, r9
    5aa4:	ea 08       	sbc	r14, r10
    5aa6:	fb 08       	sbc	r15, r11
    5aa8:	04 25       	eor	r16, r4
    5aaa:	15 25       	eor	r17, r5
    5aac:	26 25       	eor	r18, r6
    5aae:	37 25       	eor	r19, r7
    5ab0:	a8 01       	movw	r20, r16
    5ab2:	89 01       	movw	r16, r18
    5ab4:	9a 01       	movw	r18, r20
    5ab6:	00 0f       	add	r16, r16
    5ab8:	11 1f       	adc	r17, r17
    5aba:	22 1f       	adc	r18, r18
    5abc:	33 1f       	adc	r19, r19
    5abe:	01 1d       	adc	r16, r1
    5ac0:	00 0f       	add	r16, r16
    5ac2:	11 1f       	adc	r17, r17
    5ac4:	22 1f       	adc	r18, r18
    5ac6:	33 1f       	adc	r19, r19
    5ac8:	01 1d       	adc	r16, r1
    5aca:	00 0f       	add	r16, r16
    5acc:	11 1f       	adc	r17, r17
    5ace:	22 1f       	adc	r18, r18
    5ad0:	33 1f       	adc	r19, r19
    5ad2:	01 1d       	adc	r16, r1
    5ad4:	40 1a       	sub	r4, r16
    5ad6:	51 0a       	sbc	r5, r17
    5ad8:	62 0a       	sbc	r6, r18
    5ada:	73 0a       	sbc	r7, r19
    5adc:	0c 25       	eor	r16, r12
    5ade:	1d 25       	eor	r17, r13
    5ae0:	2e 25       	eor	r18, r14
    5ae2:	3f 25       	eor	r19, r15
    5ae4:	40 2f       	mov	r20, r16
    5ae6:	01 2f       	mov	r16, r17
    5ae8:	12 2f       	mov	r17, r18
    5aea:	23 2f       	mov	r18, r19
    5aec:	34 2f       	mov	r19, r20
    5aee:	c0 1a       	sub	r12, r16
    5af0:	d1 0a       	sbc	r13, r17
    5af2:	e2 0a       	sbc	r14, r18
    5af4:	f3 0a       	sbc	r15, r19
    5af6:	a2 01       	movw	r20, r4
    5af8:	23 01       	movw	r4, r6
    5afa:	3a 01       	movw	r6, r20
    5afc:	84 24       	eor	r8, r4
    5afe:	95 24       	eor	r9, r5
    5b00:	a6 24       	eor	r10, r6
    5b02:	b7 24       	eor	r11, r7
    5b04:	48 2d       	mov	r20, r8
    5b06:	89 2c       	mov	r8, r9
    5b08:	9a 2c       	mov	r9, r10
    5b0a:	ab 2c       	mov	r10, r11
    5b0c:	b4 2e       	mov	r11, r20
    5b0e:	88 0c       	add	r8, r8
    5b10:	99 1c       	adc	r9, r9
    5b12:	aa 1c       	adc	r10, r10
    5b14:	bb 1c       	adc	r11, r11
    5b16:	81 1c       	adc	r8, r1
    5b18:	88 0c       	add	r8, r8
    5b1a:	99 1c       	adc	r9, r9
    5b1c:	aa 1c       	adc	r10, r10
    5b1e:	bb 1c       	adc	r11, r11
    5b20:	81 1c       	adc	r8, r1
    5b22:	88 0c       	add	r8, r8
    5b24:	99 1c       	adc	r9, r9
    5b26:	aa 1c       	adc	r10, r10
    5b28:	bb 1c       	adc	r11, r11
    5b2a:	81 1c       	adc	r8, r1
    5b2c:	48 18       	sub	r4, r8
    5b2e:	59 08       	sbc	r5, r9
    5b30:	6a 08       	sbc	r6, r10
    5b32:	7b 08       	sbc	r7, r11
    5b34:	a6 01       	movw	r20, r12
    5b36:	67 01       	movw	r12, r14
    5b38:	7a 01       	movw	r14, r20
    5b3a:	8c 24       	eor	r8, r12
    5b3c:	9d 24       	eor	r9, r13
    5b3e:	ae 24       	eor	r10, r14
    5b40:	bf 24       	eor	r11, r15
    5b42:	48 2d       	mov	r20, r8
    5b44:	89 2c       	mov	r8, r9
    5b46:	9a 2c       	mov	r9, r10
    5b48:	ab 2c       	mov	r10, r11
    5b4a:	b4 2e       	mov	r11, r20
    5b4c:	88 0c       	add	r8, r8
    5b4e:	99 1c       	adc	r9, r9
    5b50:	aa 1c       	adc	r10, r10
    5b52:	bb 1c       	adc	r11, r11
    5b54:	81 1c       	adc	r8, r1
    5b56:	c8 18       	sub	r12, r8
    5b58:	d9 08       	sbc	r13, r9
    5b5a:	ea 08       	sbc	r14, r10
    5b5c:	fb 08       	sbc	r15, r11
    5b5e:	04 25       	eor	r16, r4
    5b60:	15 25       	eor	r17, r5
    5b62:	26 25       	eor	r18, r6
    5b64:	37 25       	eor	r19, r7
    5b66:	a8 01       	movw	r20, r16
    5b68:	89 01       	movw	r16, r18
    5b6a:	9a 01       	movw	r18, r20
    5b6c:	00 0f       	add	r16, r16
    5b6e:	11 1f       	adc	r17, r17
    5b70:	22 1f       	adc	r18, r18
    5b72:	33 1f       	adc	r19, r19
    5b74:	01 1d       	adc	r16, r1
    5b76:	00 0f       	add	r16, r16
    5b78:	11 1f       	adc	r17, r17
    5b7a:	22 1f       	adc	r18, r18
    5b7c:	33 1f       	adc	r19, r19
    5b7e:	01 1d       	adc	r16, r1
    5b80:	00 0f       	add	r16, r16
    5b82:	11 1f       	adc	r17, r17
    5b84:	22 1f       	adc	r18, r18
    5b86:	33 1f       	adc	r19, r19
    5b88:	01 1d       	adc	r16, r1
    5b8a:	40 1a       	sub	r4, r16
    5b8c:	51 0a       	sbc	r5, r17
    5b8e:	62 0a       	sbc	r6, r18
    5b90:	73 0a       	sbc	r7, r19
    5b92:	0c 25       	eor	r16, r12
    5b94:	1d 25       	eor	r17, r13
    5b96:	2e 25       	eor	r18, r14
    5b98:	3f 25       	eor	r19, r15
    5b9a:	40 2f       	mov	r20, r16
    5b9c:	01 2f       	mov	r16, r17
    5b9e:	12 2f       	mov	r17, r18
    5ba0:	23 2f       	mov	r18, r19
    5ba2:	34 2f       	mov	r19, r20
    5ba4:	c0 1a       	sub	r12, r16
    5ba6:	d1 0a       	sbc	r13, r17
    5ba8:	e2 0a       	sbc	r14, r18
    5baa:	f3 0a       	sbc	r15, r19
    5bac:	a2 01       	movw	r20, r4
    5bae:	23 01       	movw	r4, r6
    5bb0:	3a 01       	movw	r6, r20
    5bb2:	84 24       	eor	r8, r4
    5bb4:	95 24       	eor	r9, r5
    5bb6:	a6 24       	eor	r10, r6
    5bb8:	b7 24       	eor	r11, r7
    5bba:	48 2d       	mov	r20, r8
    5bbc:	89 2c       	mov	r8, r9
    5bbe:	9a 2c       	mov	r9, r10
    5bc0:	ab 2c       	mov	r10, r11
    5bc2:	b4 2e       	mov	r11, r20
    5bc4:	88 0c       	add	r8, r8
    5bc6:	99 1c       	adc	r9, r9
    5bc8:	aa 1c       	adc	r10, r10
    5bca:	bb 1c       	adc	r11, r11
    5bcc:	81 1c       	adc	r8, r1
    5bce:	88 0c       	add	r8, r8
    5bd0:	99 1c       	adc	r9, r9
    5bd2:	aa 1c       	adc	r10, r10
    5bd4:	bb 1c       	adc	r11, r11
    5bd6:	81 1c       	adc	r8, r1
    5bd8:	88 0c       	add	r8, r8
    5bda:	99 1c       	adc	r9, r9
    5bdc:	aa 1c       	adc	r10, r10
    5bde:	bb 1c       	adc	r11, r11
    5be0:	81 1c       	adc	r8, r1
    5be2:	48 18       	sub	r4, r8
    5be4:	59 08       	sbc	r5, r9
    5be6:	6a 08       	sbc	r6, r10
    5be8:	7b 08       	sbc	r7, r11
    5bea:	a6 01       	movw	r20, r12
    5bec:	67 01       	movw	r12, r14
    5bee:	7a 01       	movw	r14, r20
    5bf0:	8c 24       	eor	r8, r12
    5bf2:	9d 24       	eor	r9, r13
    5bf4:	ae 24       	eor	r10, r14
    5bf6:	bf 24       	eor	r11, r15
    5bf8:	48 2d       	mov	r20, r8
    5bfa:	89 2c       	mov	r8, r9
    5bfc:	9a 2c       	mov	r9, r10
    5bfe:	ab 2c       	mov	r10, r11
    5c00:	b4 2e       	mov	r11, r20
    5c02:	88 0c       	add	r8, r8
    5c04:	99 1c       	adc	r9, r9
    5c06:	aa 1c       	adc	r10, r10
    5c08:	bb 1c       	adc	r11, r11
    5c0a:	81 1c       	adc	r8, r1
    5c0c:	c8 18       	sub	r12, r8
    5c0e:	d9 08       	sbc	r13, r9
    5c10:	ea 08       	sbc	r14, r10
    5c12:	fb 08       	sbc	r15, r11
    5c14:	04 25       	eor	r16, r4
    5c16:	15 25       	eor	r17, r5
    5c18:	26 25       	eor	r18, r6
    5c1a:	37 25       	eor	r19, r7
    5c1c:	a8 01       	movw	r20, r16
    5c1e:	89 01       	movw	r16, r18
    5c20:	9a 01       	movw	r18, r20
    5c22:	00 0f       	add	r16, r16
    5c24:	11 1f       	adc	r17, r17
    5c26:	22 1f       	adc	r18, r18
    5c28:	33 1f       	adc	r19, r19
    5c2a:	01 1d       	adc	r16, r1
    5c2c:	00 0f       	add	r16, r16
    5c2e:	11 1f       	adc	r17, r17
    5c30:	22 1f       	adc	r18, r18
    5c32:	33 1f       	adc	r19, r19
    5c34:	01 1d       	adc	r16, r1
    5c36:	00 0f       	add	r16, r16
    5c38:	11 1f       	adc	r17, r17
    5c3a:	22 1f       	adc	r18, r18
    5c3c:	33 1f       	adc	r19, r19
    5c3e:	01 1d       	adc	r16, r1
    5c40:	40 1a       	sub	r4, r16
    5c42:	51 0a       	sbc	r5, r17
    5c44:	62 0a       	sbc	r6, r18
    5c46:	73 0a       	sbc	r7, r19
    5c48:	0c 25       	eor	r16, r12
    5c4a:	1d 25       	eor	r17, r13
    5c4c:	2e 25       	eor	r18, r14
    5c4e:	3f 25       	eor	r19, r15
    5c50:	40 2f       	mov	r20, r16
    5c52:	01 2f       	mov	r16, r17
    5c54:	12 2f       	mov	r17, r18
    5c56:	23 2f       	mov	r18, r19
    5c58:	34 2f       	mov	r19, r20
    5c5a:	c0 1a       	sub	r12, r16
    5c5c:	d1 0a       	sbc	r13, r17
    5c5e:	e2 0a       	sbc	r14, r18
    5c60:	f3 0a       	sbc	r15, r19
    5c62:	a2 01       	movw	r20, r4
    5c64:	23 01       	movw	r4, r6
    5c66:	3a 01       	movw	r6, r20
    5c68:	84 24       	eor	r8, r4
    5c6a:	95 24       	eor	r9, r5
    5c6c:	a6 24       	eor	r10, r6
    5c6e:	b7 24       	eor	r11, r7
    5c70:	48 2d       	mov	r20, r8
    5c72:	89 2c       	mov	r8, r9
    5c74:	9a 2c       	mov	r9, r10
    5c76:	ab 2c       	mov	r10, r11
    5c78:	b4 2e       	mov	r11, r20
    5c7a:	88 0c       	add	r8, r8
    5c7c:	99 1c       	adc	r9, r9
    5c7e:	aa 1c       	adc	r10, r10
    5c80:	bb 1c       	adc	r11, r11
    5c82:	81 1c       	adc	r8, r1
    5c84:	88 0c       	add	r8, r8
    5c86:	99 1c       	adc	r9, r9
    5c88:	aa 1c       	adc	r10, r10
    5c8a:	bb 1c       	adc	r11, r11
    5c8c:	81 1c       	adc	r8, r1
    5c8e:	88 0c       	add	r8, r8
    5c90:	99 1c       	adc	r9, r9
    5c92:	aa 1c       	adc	r10, r10
    5c94:	bb 1c       	adc	r11, r11
    5c96:	81 1c       	adc	r8, r1
    5c98:	48 18       	sub	r4, r8
    5c9a:	59 08       	sbc	r5, r9
    5c9c:	6a 08       	sbc	r6, r10
    5c9e:	7b 08       	sbc	r7, r11
    5ca0:	a6 01       	movw	r20, r12
    5ca2:	67 01       	movw	r12, r14
    5ca4:	7a 01       	movw	r14, r20
    5ca6:	8c 24       	eor	r8, r12
    5ca8:	9d 24       	eor	r9, r13
    5caa:	ae 24       	eor	r10, r14
    5cac:	bf 24       	eor	r11, r15
    5cae:	48 2d       	mov	r20, r8
    5cb0:	89 2c       	mov	r8, r9
    5cb2:	9a 2c       	mov	r9, r10
    5cb4:	ab 2c       	mov	r10, r11
    5cb6:	b4 2e       	mov	r11, r20
    5cb8:	88 0c       	add	r8, r8
    5cba:	99 1c       	adc	r9, r9
    5cbc:	aa 1c       	adc	r10, r10
    5cbe:	bb 1c       	adc	r11, r11
    5cc0:	81 1c       	adc	r8, r1
    5cc2:	c8 18       	sub	r12, r8
    5cc4:	d9 08       	sbc	r13, r9
    5cc6:	ea 08       	sbc	r14, r10
    5cc8:	fb 08       	sbc	r15, r11
    5cca:	04 25       	eor	r16, r4
    5ccc:	15 25       	eor	r17, r5
    5cce:	26 25       	eor	r18, r6
    5cd0:	37 25       	eor	r19, r7
    5cd2:	a8 01       	movw	r20, r16
    5cd4:	89 01       	movw	r16, r18
    5cd6:	9a 01       	movw	r18, r20
    5cd8:	00 0f       	add	r16, r16
    5cda:	11 1f       	adc	r17, r17
    5cdc:	22 1f       	adc	r18, r18
    5cde:	33 1f       	adc	r19, r19
    5ce0:	01 1d       	adc	r16, r1
    5ce2:	00 0f       	add	r16, r16
    5ce4:	11 1f       	adc	r17, r17
    5ce6:	22 1f       	adc	r18, r18
    5ce8:	33 1f       	adc	r19, r19
    5cea:	01 1d       	adc	r16, r1
    5cec:	00 0f       	add	r16, r16
    5cee:	11 1f       	adc	r17, r17
    5cf0:	22 1f       	adc	r18, r18
    5cf2:	33 1f       	adc	r19, r19
    5cf4:	01 1d       	adc	r16, r1
    5cf6:	40 1a       	sub	r4, r16
    5cf8:	51 0a       	sbc	r5, r17
    5cfa:	62 0a       	sbc	r6, r18
    5cfc:	73 0a       	sbc	r7, r19
    5cfe:	0c 25       	eor	r16, r12
    5d00:	1d 25       	eor	r17, r13
    5d02:	2e 25       	eor	r18, r14
    5d04:	3f 25       	eor	r19, r15
    5d06:	40 2f       	mov	r20, r16
    5d08:	01 2f       	mov	r16, r17
    5d0a:	12 2f       	mov	r17, r18
    5d0c:	23 2f       	mov	r18, r19
    5d0e:	34 2f       	mov	r19, r20
    5d10:	c0 1a       	sub	r12, r16
    5d12:	d1 0a       	sbc	r13, r17
    5d14:	e2 0a       	sbc	r14, r18
    5d16:	f3 0a       	sbc	r15, r19
    5d18:	a2 01       	movw	r20, r4
    5d1a:	23 01       	movw	r4, r6
    5d1c:	3a 01       	movw	r6, r20
    5d1e:	84 24       	eor	r8, r4
    5d20:	95 24       	eor	r9, r5
    5d22:	a6 24       	eor	r10, r6
    5d24:	b7 24       	eor	r11, r7
    5d26:	48 2d       	mov	r20, r8
    5d28:	89 2c       	mov	r8, r9
    5d2a:	9a 2c       	mov	r9, r10
    5d2c:	ab 2c       	mov	r10, r11
    5d2e:	b4 2e       	mov	r11, r20
    5d30:	88 0c       	add	r8, r8
    5d32:	99 1c       	adc	r9, r9
    5d34:	aa 1c       	adc	r10, r10
    5d36:	bb 1c       	adc	r11, r11
    5d38:	81 1c       	adc	r8, r1
    5d3a:	88 0c       	add	r8, r8
    5d3c:	99 1c       	adc	r9, r9
    5d3e:	aa 1c       	adc	r10, r10
    5d40:	bb 1c       	adc	r11, r11
    5d42:	81 1c       	adc	r8, r1
    5d44:	88 0c       	add	r8, r8
    5d46:	99 1c       	adc	r9, r9
    5d48:	aa 1c       	adc	r10, r10
    5d4a:	bb 1c       	adc	r11, r11
    5d4c:	81 1c       	adc	r8, r1
    5d4e:	48 18       	sub	r4, r8
    5d50:	59 08       	sbc	r5, r9
    5d52:	6a 08       	sbc	r6, r10
    5d54:	7b 08       	sbc	r7, r11
    5d56:	33 25       	eor	r19, r3
    5d58:	32 90       	ld	r3, -Z
    5d5a:	23 25       	eor	r18, r3
    5d5c:	32 90       	ld	r3, -Z
    5d5e:	13 25       	eor	r17, r3
    5d60:	32 90       	ld	r3, -Z
    5d62:	03 25       	eor	r16, r3
    5d64:	32 90       	ld	r3, -Z
    5d66:	f3 24       	eor	r15, r3
    5d68:	32 90       	ld	r3, -Z
    5d6a:	e3 24       	eor	r14, r3
    5d6c:	32 90       	ld	r3, -Z
    5d6e:	d3 24       	eor	r13, r3
    5d70:	32 90       	ld	r3, -Z
    5d72:	c3 24       	eor	r12, r3
    5d74:	32 90       	ld	r3, -Z
    5d76:	b3 24       	eor	r11, r3
    5d78:	32 90       	ld	r3, -Z
    5d7a:	a3 24       	eor	r10, r3
    5d7c:	32 90       	ld	r3, -Z
    5d7e:	93 24       	eor	r9, r3
    5d80:	32 90       	ld	r3, -Z
    5d82:	83 24       	eor	r8, r3
    5d84:	32 90       	ld	r3, -Z
    5d86:	73 24       	eor	r7, r3
    5d88:	32 90       	ld	r3, -Z
    5d8a:	63 24       	eor	r6, r3
    5d8c:	32 90       	ld	r3, -Z
    5d8e:	53 24       	eor	r5, r3
    5d90:	32 90       	ld	r3, -Z
    5d92:	43 24       	eor	r4, r3
    5d94:	3c 93       	st	X, r19
    5d96:	2e 93       	st	-X, r18
    5d98:	1e 93       	st	-X, r17
    5d9a:	0e 93       	st	-X, r16
    5d9c:	fe 92       	st	-X, r15
    5d9e:	ee 92       	st	-X, r14
    5da0:	de 92       	st	-X, r13
    5da2:	ce 92       	st	-X, r12
    5da4:	be 92       	st	-X, r11
    5da6:	ae 92       	st	-X, r10
    5da8:	9e 92       	st	-X, r9
    5daa:	8e 92       	st	-X, r8
    5dac:	7e 92       	st	-X, r7
    5dae:	6e 92       	st	-X, r6
    5db0:	5e 92       	st	-X, r5
    5db2:	4e 92       	st	-X, r4
        :
        : [block] "r" (block), [roundKeys] "r" (roundKeys)
        : "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15", "r16", "r17", "r18", "r19", "r20", "r21", "r26", "r27", "r30", "r31"
#endif
    );
}
    5db4:	1f 91       	pop	r17
    5db6:	0f 91       	pop	r16
    5db8:	ff 90       	pop	r15
    5dba:	ef 90       	pop	r14
    5dbc:	df 90       	pop	r13
    5dbe:	cf 90       	pop	r12
    5dc0:	bf 90       	pop	r11
    5dc2:	af 90       	pop	r10
    5dc4:	9f 90       	pop	r9
    5dc6:	8f 90       	pop	r8
    5dc8:	7f 90       	pop	r7
    5dca:	6f 90       	pop	r6
    5dcc:	5f 90       	pop	r5
    5dce:	4f 90       	pop	r4
    5dd0:	3f 90       	pop	r3
    5dd2:	08 95       	ret

00005dd4 <Encrypt>:
    5dd4:	2f 92       	push	r2
    5dd6:	3f 92       	push	r3
    5dd8:	4f 92       	push	r4
    5dda:	5f 92       	push	r5
    5ddc:	6f 92       	push	r6
    5dde:	7f 92       	push	r7
    5de0:	8f 92       	push	r8
    5de2:	9f 92       	push	r9
    5de4:	af 92       	push	r10
    5de6:	bf 92       	push	r11
    5de8:	cf 92       	push	r12
    5dea:	df 92       	push	r13
    5dec:	ef 92       	push	r14
    5dee:	ff 92       	push	r15
    5df0:	0f 93       	push	r16
    5df2:	1f 93       	push	r17
    5df4:	dc 01       	movw	r26, r24
    5df6:	2d 90       	ld	r2, X+
    5df8:	3d 90       	ld	r3, X+
    5dfa:	4d 90       	ld	r4, X+
    5dfc:	5d 90       	ld	r5, X+
    5dfe:	6d 90       	ld	r6, X+
    5e00:	7d 90       	ld	r7, X+
    5e02:	8d 90       	ld	r8, X+
    5e04:	9d 90       	ld	r9, X+
    5e06:	ad 90       	ld	r10, X+
    5e08:	bd 90       	ld	r11, X+
    5e0a:	cd 90       	ld	r12, X+
    5e0c:	dd 90       	ld	r13, X+
    5e0e:	ed 90       	ld	r14, X+
    5e10:	fd 90       	ld	r15, X+
    5e12:	0d 91       	ld	r16, X+
    5e14:	1c 91       	ld	r17, X
    5e16:	fb 01       	movw	r30, r22
    5e18:	21 91       	ld	r18, Z+
    5e1a:	22 26       	eor	r2, r18
    5e1c:	21 91       	ld	r18, Z+
    5e1e:	32 26       	eor	r3, r18
    5e20:	21 91       	ld	r18, Z+
    5e22:	42 26       	eor	r4, r18
    5e24:	21 91       	ld	r18, Z+
    5e26:	52 26       	eor	r5, r18
    5e28:	21 91       	ld	r18, Z+
    5e2a:	62 26       	eor	r6, r18
    5e2c:	21 91       	ld	r18, Z+
    5e2e:	72 26       	eor	r7, r18
    5e30:	21 91       	ld	r18, Z+
    5e32:	82 26       	eor	r8, r18
    5e34:	21 91       	ld	r18, Z+
    5e36:	92 26       	eor	r9, r18
    5e38:	21 91       	ld	r18, Z+
    5e3a:	a2 26       	eor	r10, r18
    5e3c:	21 91       	ld	r18, Z+
    5e3e:	b2 26       	eor	r11, r18
    5e40:	21 91       	ld	r18, Z+
    5e42:	c2 26       	eor	r12, r18
    5e44:	21 91       	ld	r18, Z+
    5e46:	d2 26       	eor	r13, r18
    5e48:	21 91       	ld	r18, Z+
    5e4a:	e2 26       	eor	r14, r18
    5e4c:	21 91       	ld	r18, Z+
    5e4e:	f2 26       	eor	r15, r18
    5e50:	21 91       	ld	r18, Z+
    5e52:	02 27       	eor	r16, r18
    5e54:	20 81       	ld	r18, Z
    5e56:	12 27       	eor	r17, r18
    5e58:	26 0c       	add	r2, r6
    5e5a:	37 1c       	adc	r3, r7
    5e5c:	48 1c       	adc	r4, r8
    5e5e:	59 1c       	adc	r5, r9
    5e60:	1f 92       	push	r1
    5e62:	40 e2       	ldi	r20, 0x20	; 32
    5e64:	57 2d       	mov	r21, r7
    5e66:	39 2d       	mov	r19, r9
    5e68:	64 9e       	mul	r6, r20
    5e6a:	30 01       	movw	r6, r0
    5e6c:	84 9e       	mul	r8, r20
    5e6e:	40 01       	movw	r8, r0
    5e70:	54 9f       	mul	r21, r20
    5e72:	70 24       	eor	r7, r0
    5e74:	81 24       	eor	r8, r1
    5e76:	34 9f       	mul	r19, r20
    5e78:	90 24       	eor	r9, r0
    5e7a:	61 24       	eor	r6, r1
    5e7c:	1f 90       	pop	r1
    5e7e:	62 24       	eor	r6, r2
    5e80:	73 24       	eor	r7, r3
    5e82:	84 24       	eor	r8, r4
    5e84:	95 24       	eor	r9, r5
    5e86:	a2 01       	movw	r20, r4
    5e88:	21 01       	movw	r4, r2
    5e8a:	1a 01       	movw	r2, r20
    5e8c:	ae 0c       	add	r10, r14
    5e8e:	bf 1c       	adc	r11, r15
    5e90:	c0 1e       	adc	r12, r16
    5e92:	d1 1e       	adc	r13, r17
    5e94:	41 2f       	mov	r20, r17
    5e96:	10 2f       	mov	r17, r16
    5e98:	0f 2d       	mov	r16, r15
    5e9a:	fe 2c       	mov	r15, r14
    5e9c:	e4 2e       	mov	r14, r20
    5e9e:	ea 24       	eor	r14, r10
    5ea0:	fb 24       	eor	r15, r11
    5ea2:	0c 25       	eor	r16, r12
    5ea4:	1d 25       	eor	r17, r13
    5ea6:	2e 0c       	add	r2, r14
    5ea8:	3f 1c       	adc	r3, r15
    5eaa:	40 1e       	adc	r4, r16
    5eac:	51 1e       	adc	r5, r17
    5eae:	a8 01       	movw	r20, r16
    5eb0:	87 01       	movw	r16, r14
    5eb2:	7a 01       	movw	r14, r20
    5eb4:	e0 fa       	bst	r14, 0
    5eb6:	17 95       	ror	r17
    5eb8:	07 95       	ror	r16
    5eba:	f7 94       	ror	r15
    5ebc:	e7 94       	ror	r14
    5ebe:	17 f9       	bld	r17, 7
    5ec0:	e0 fa       	bst	r14, 0
    5ec2:	17 95       	ror	r17
    5ec4:	07 95       	ror	r16
    5ec6:	f7 94       	ror	r15
    5ec8:	e7 94       	ror	r14
    5eca:	17 f9       	bld	r17, 7
    5ecc:	e0 fa       	bst	r14, 0
    5ece:	17 95       	ror	r17
    5ed0:	07 95       	ror	r16
    5ed2:	f7 94       	ror	r15
    5ed4:	e7 94       	ror	r14
    5ed6:	17 f9       	bld	r17, 7
    5ed8:	e2 24       	eor	r14, r2
    5eda:	f3 24       	eor	r15, r3
    5edc:	04 25       	eor	r16, r4
    5ede:	15 25       	eor	r17, r5
    5ee0:	a6 0c       	add	r10, r6
    5ee2:	b7 1c       	adc	r11, r7
    5ee4:	c8 1c       	adc	r12, r8
    5ee6:	d9 1c       	adc	r13, r9
    5ee8:	49 2d       	mov	r20, r9
    5eea:	98 2c       	mov	r9, r8
    5eec:	87 2c       	mov	r8, r7
    5eee:	76 2c       	mov	r7, r6
    5ef0:	64 2e       	mov	r6, r20
    5ef2:	60 fa       	bst	r6, 0
    5ef4:	97 94       	ror	r9
    5ef6:	87 94       	ror	r8
    5ef8:	77 94       	ror	r7
    5efa:	67 94       	ror	r6
    5efc:	97 f8       	bld	r9, 7
    5efe:	6a 24       	eor	r6, r10
    5f00:	7b 24       	eor	r7, r11
    5f02:	8c 24       	eor	r8, r12
    5f04:	9d 24       	eor	r9, r13
    5f06:	a6 01       	movw	r20, r12
    5f08:	65 01       	movw	r12, r10
    5f0a:	5a 01       	movw	r10, r20
    5f0c:	26 0c       	add	r2, r6
    5f0e:	37 1c       	adc	r3, r7
    5f10:	48 1c       	adc	r4, r8
    5f12:	59 1c       	adc	r5, r9
    5f14:	1f 92       	push	r1
    5f16:	40 e2       	ldi	r20, 0x20	; 32
    5f18:	57 2d       	mov	r21, r7
    5f1a:	39 2d       	mov	r19, r9
    5f1c:	64 9e       	mul	r6, r20
    5f1e:	30 01       	movw	r6, r0
    5f20:	84 9e       	mul	r8, r20
    5f22:	40 01       	movw	r8, r0
    5f24:	54 9f       	mul	r21, r20
    5f26:	70 24       	eor	r7, r0
    5f28:	81 24       	eor	r8, r1
    5f2a:	34 9f       	mul	r19, r20
    5f2c:	90 24       	eor	r9, r0
    5f2e:	61 24       	eor	r6, r1
    5f30:	1f 90       	pop	r1
    5f32:	62 24       	eor	r6, r2
    5f34:	73 24       	eor	r7, r3
    5f36:	84 24       	eor	r8, r4
    5f38:	95 24       	eor	r9, r5
    5f3a:	a2 01       	movw	r20, r4
    5f3c:	21 01       	movw	r4, r2
    5f3e:	1a 01       	movw	r2, r20
    5f40:	ae 0c       	add	r10, r14
    5f42:	bf 1c       	adc	r11, r15
    5f44:	c0 1e       	adc	r12, r16
    5f46:	d1 1e       	adc	r13, r17
    5f48:	41 2f       	mov	r20, r17
    5f4a:	10 2f       	mov	r17, r16
    5f4c:	0f 2d       	mov	r16, r15
    5f4e:	fe 2c       	mov	r15, r14
    5f50:	e4 2e       	mov	r14, r20
    5f52:	ea 24       	eor	r14, r10
    5f54:	fb 24       	eor	r15, r11
    5f56:	0c 25       	eor	r16, r12
    5f58:	1d 25       	eor	r17, r13
    5f5a:	2e 0c       	add	r2, r14
    5f5c:	3f 1c       	adc	r3, r15
    5f5e:	40 1e       	adc	r4, r16
    5f60:	51 1e       	adc	r5, r17
    5f62:	a8 01       	movw	r20, r16
    5f64:	87 01       	movw	r16, r14
    5f66:	7a 01       	movw	r14, r20
    5f68:	e0 fa       	bst	r14, 0
    5f6a:	17 95       	ror	r17
    5f6c:	07 95       	ror	r16
    5f6e:	f7 94       	ror	r15
    5f70:	e7 94       	ror	r14
    5f72:	17 f9       	bld	r17, 7
    5f74:	e0 fa       	bst	r14, 0
    5f76:	17 95       	ror	r17
    5f78:	07 95       	ror	r16
    5f7a:	f7 94       	ror	r15
    5f7c:	e7 94       	ror	r14
    5f7e:	17 f9       	bld	r17, 7
    5f80:	e0 fa       	bst	r14, 0
    5f82:	17 95       	ror	r17
    5f84:	07 95       	ror	r16
    5f86:	f7 94       	ror	r15
    5f88:	e7 94       	ror	r14
    5f8a:	17 f9       	bld	r17, 7
    5f8c:	e2 24       	eor	r14, r2
    5f8e:	f3 24       	eor	r15, r3
    5f90:	04 25       	eor	r16, r4
    5f92:	15 25       	eor	r17, r5
    5f94:	a6 0c       	add	r10, r6
    5f96:	b7 1c       	adc	r11, r7
    5f98:	c8 1c       	adc	r12, r8
    5f9a:	d9 1c       	adc	r13, r9
    5f9c:	49 2d       	mov	r20, r9
    5f9e:	98 2c       	mov	r9, r8
    5fa0:	87 2c       	mov	r8, r7
    5fa2:	76 2c       	mov	r7, r6
    5fa4:	64 2e       	mov	r6, r20
    5fa6:	60 fa       	bst	r6, 0
    5fa8:	97 94       	ror	r9
    5faa:	87 94       	ror	r8
    5fac:	77 94       	ror	r7
    5fae:	67 94       	ror	r6
    5fb0:	97 f8       	bld	r9, 7
    5fb2:	6a 24       	eor	r6, r10
    5fb4:	7b 24       	eor	r7, r11
    5fb6:	8c 24       	eor	r8, r12
    5fb8:	9d 24       	eor	r9, r13
    5fba:	a6 01       	movw	r20, r12
    5fbc:	65 01       	movw	r12, r10
    5fbe:	5a 01       	movw	r10, r20
    5fc0:	26 0c       	add	r2, r6
    5fc2:	37 1c       	adc	r3, r7
    5fc4:	48 1c       	adc	r4, r8
    5fc6:	59 1c       	adc	r5, r9
    5fc8:	1f 92       	push	r1
    5fca:	40 e2       	ldi	r20, 0x20	; 32
    5fcc:	57 2d       	mov	r21, r7
    5fce:	39 2d       	mov	r19, r9
    5fd0:	64 9e       	mul	r6, r20
    5fd2:	30 01       	movw	r6, r0
    5fd4:	84 9e       	mul	r8, r20
    5fd6:	40 01       	movw	r8, r0
    5fd8:	54 9f       	mul	r21, r20
    5fda:	70 24       	eor	r7, r0
    5fdc:	81 24       	eor	r8, r1
    5fde:	34 9f       	mul	r19, r20
    5fe0:	90 24       	eor	r9, r0
    5fe2:	61 24       	eor	r6, r1
    5fe4:	1f 90       	pop	r1
    5fe6:	62 24       	eor	r6, r2
    5fe8:	73 24       	eor	r7, r3
    5fea:	84 24       	eor	r8, r4
    5fec:	95 24       	eor	r9, r5
    5fee:	a2 01       	movw	r20, r4
    5ff0:	21 01       	movw	r4, r2
    5ff2:	1a 01       	movw	r2, r20
    5ff4:	ae 0c       	add	r10, r14
    5ff6:	bf 1c       	adc	r11, r15
    5ff8:	c0 1e       	adc	r12, r16
    5ffa:	d1 1e       	adc	r13, r17
    5ffc:	41 2f       	mov	r20, r17
    5ffe:	10 2f       	mov	r17, r16
    6000:	0f 2d       	mov	r16, r15
    6002:	fe 2c       	mov	r15, r14
    6004:	e4 2e       	mov	r14, r20
    6006:	ea 24       	eor	r14, r10
    6008:	fb 24       	eor	r15, r11
    600a:	0c 25       	eor	r16, r12
    600c:	1d 25       	eor	r17, r13
    600e:	2e 0c       	add	r2, r14
    6010:	3f 1c       	adc	r3, r15
    6012:	40 1e       	adc	r4, r16
    6014:	51 1e       	adc	r5, r17
    6016:	a8 01       	movw	r20, r16
    6018:	87 01       	movw	r16, r14
    601a:	7a 01       	movw	r14, r20
    601c:	e0 fa       	bst	r14, 0
    601e:	17 95       	ror	r17
    6020:	07 95       	ror	r16
    6022:	f7 94       	ror	r15
    6024:	e7 94       	ror	r14
    6026:	17 f9       	bld	r17, 7
    6028:	e0 fa       	bst	r14, 0
    602a:	17 95       	ror	r17
    602c:	07 95       	ror	r16
    602e:	f7 94       	ror	r15
    6030:	e7 94       	ror	r14
    6032:	17 f9       	bld	r17, 7
    6034:	e0 fa       	bst	r14, 0
    6036:	17 95       	ror	r17
    6038:	07 95       	ror	r16
    603a:	f7 94       	ror	r15
    603c:	e7 94       	ror	r14
    603e:	17 f9       	bld	r17, 7
    6040:	e2 24       	eor	r14, r2
    6042:	f3 24       	eor	r15, r3
    6044:	04 25       	eor	r16, r4
    6046:	15 25       	eor	r17, r5
    6048:	a6 0c       	add	r10, r6
    604a:	b7 1c       	adc	r11, r7
    604c:	c8 1c       	adc	r12, r8
    604e:	d9 1c       	adc	r13, r9
    6050:	49 2d       	mov	r20, r9
    6052:	98 2c       	mov	r9, r8
    6054:	87 2c       	mov	r8, r7
    6056:	76 2c       	mov	r7, r6
    6058:	64 2e       	mov	r6, r20
    605a:	60 fa       	bst	r6, 0
    605c:	97 94       	ror	r9
    605e:	87 94       	ror	r8
    6060:	77 94       	ror	r7
    6062:	67 94       	ror	r6
    6064:	97 f8       	bld	r9, 7
    6066:	6a 24       	eor	r6, r10
    6068:	7b 24       	eor	r7, r11
    606a:	8c 24       	eor	r8, r12
    606c:	9d 24       	eor	r9, r13
    606e:	a6 01       	movw	r20, r12
    6070:	65 01       	movw	r12, r10
    6072:	5a 01       	movw	r10, r20
    6074:	26 0c       	add	r2, r6
    6076:	37 1c       	adc	r3, r7
    6078:	48 1c       	adc	r4, r8
    607a:	59 1c       	adc	r5, r9
    607c:	1f 92       	push	r1
    607e:	40 e2       	ldi	r20, 0x20	; 32
    6080:	57 2d       	mov	r21, r7
    6082:	39 2d       	mov	r19, r9
    6084:	64 9e       	mul	r6, r20
    6086:	30 01       	movw	r6, r0
    6088:	84 9e       	mul	r8, r20
    608a:	40 01       	movw	r8, r0
    608c:	54 9f       	mul	r21, r20
    608e:	70 24       	eor	r7, r0
    6090:	81 24       	eor	r8, r1
    6092:	34 9f       	mul	r19, r20
    6094:	90 24       	eor	r9, r0
    6096:	61 24       	eor	r6, r1
    6098:	1f 90       	pop	r1
    609a:	62 24       	eor	r6, r2
    609c:	73 24       	eor	r7, r3
    609e:	84 24       	eor	r8, r4
    60a0:	95 24       	eor	r9, r5
    60a2:	a2 01       	movw	r20, r4
    60a4:	21 01       	movw	r4, r2
    60a6:	1a 01       	movw	r2, r20
    60a8:	ae 0c       	add	r10, r14
    60aa:	bf 1c       	adc	r11, r15
    60ac:	c0 1e       	adc	r12, r16
    60ae:	d1 1e       	adc	r13, r17
    60b0:	41 2f       	mov	r20, r17
    60b2:	10 2f       	mov	r17, r16
    60b4:	0f 2d       	mov	r16, r15
    60b6:	fe 2c       	mov	r15, r14
    60b8:	e4 2e       	mov	r14, r20
    60ba:	ea 24       	eor	r14, r10
    60bc:	fb 24       	eor	r15, r11
    60be:	0c 25       	eor	r16, r12
    60c0:	1d 25       	eor	r17, r13
    60c2:	2e 0c       	add	r2, r14
    60c4:	3f 1c       	adc	r3, r15
    60c6:	40 1e       	adc	r4, r16
    60c8:	51 1e       	adc	r5, r17
    60ca:	a8 01       	movw	r20, r16
    60cc:	87 01       	movw	r16, r14
    60ce:	7a 01       	movw	r14, r20
    60d0:	e0 fa       	bst	r14, 0
    60d2:	17 95       	ror	r17
    60d4:	07 95       	ror	r16
    60d6:	f7 94       	ror	r15
    60d8:	e7 94       	ror	r14
    60da:	17 f9       	bld	r17, 7
    60dc:	e0 fa       	bst	r14, 0
    60de:	17 95       	ror	r17
    60e0:	07 95       	ror	r16
    60e2:	f7 94       	ror	r15
    60e4:	e7 94       	ror	r14
    60e6:	17 f9       	bld	r17, 7
    60e8:	e0 fa       	bst	r14, 0
    60ea:	17 95       	ror	r17
    60ec:	07 95       	ror	r16
    60ee:	f7 94       	ror	r15
    60f0:	e7 94       	ror	r14
    60f2:	17 f9       	bld	r17, 7
    60f4:	e2 24       	eor	r14, r2
    60f6:	f3 24       	eor	r15, r3
    60f8:	04 25       	eor	r16, r4
    60fa:	15 25       	eor	r17, r5
    60fc:	a6 0c       	add	r10, r6
    60fe:	b7 1c       	adc	r11, r7
    6100:	c8 1c       	adc	r12, r8
    6102:	d9 1c       	adc	r13, r9
    6104:	49 2d       	mov	r20, r9
    6106:	98 2c       	mov	r9, r8
    6108:	87 2c       	mov	r8, r7
    610a:	76 2c       	mov	r7, r6
    610c:	64 2e       	mov	r6, r20
    610e:	60 fa       	bst	r6, 0
    6110:	97 94       	ror	r9
    6112:	87 94       	ror	r8
    6114:	77 94       	ror	r7
    6116:	67 94       	ror	r6
    6118:	97 f8       	bld	r9, 7
    611a:	6a 24       	eor	r6, r10
    611c:	7b 24       	eor	r7, r11
    611e:	8c 24       	eor	r8, r12
    6120:	9d 24       	eor	r9, r13
    6122:	a6 01       	movw	r20, r12
    6124:	65 01       	movw	r12, r10
    6126:	5a 01       	movw	r10, r20
    6128:	26 0c       	add	r2, r6
    612a:	37 1c       	adc	r3, r7
    612c:	48 1c       	adc	r4, r8
    612e:	59 1c       	adc	r5, r9
    6130:	1f 92       	push	r1
    6132:	40 e2       	ldi	r20, 0x20	; 32
    6134:	57 2d       	mov	r21, r7
    6136:	39 2d       	mov	r19, r9
    6138:	64 9e       	mul	r6, r20
    613a:	30 01       	movw	r6, r0
    613c:	84 9e       	mul	r8, r20
    613e:	40 01       	movw	r8, r0
    6140:	54 9f       	mul	r21, r20
    6142:	70 24       	eor	r7, r0
    6144:	81 24       	eor	r8, r1
    6146:	34 9f       	mul	r19, r20
    6148:	90 24       	eor	r9, r0
    614a:	61 24       	eor	r6, r1
    614c:	1f 90       	pop	r1
    614e:	62 24       	eor	r6, r2
    6150:	73 24       	eor	r7, r3
    6152:	84 24       	eor	r8, r4
    6154:	95 24       	eor	r9, r5
    6156:	a2 01       	movw	r20, r4
    6158:	21 01       	movw	r4, r2
    615a:	1a 01       	movw	r2, r20
    615c:	ae 0c       	add	r10, r14
    615e:	bf 1c       	adc	r11, r15
    6160:	c0 1e       	adc	r12, r16
    6162:	d1 1e       	adc	r13, r17
    6164:	41 2f       	mov	r20, r17
    6166:	10 2f       	mov	r17, r16
    6168:	0f 2d       	mov	r16, r15
    616a:	fe 2c       	mov	r15, r14
    616c:	e4 2e       	mov	r14, r20
    616e:	ea 24       	eor	r14, r10
    6170:	fb 24       	eor	r15, r11
    6172:	0c 25       	eor	r16, r12
    6174:	1d 25       	eor	r17, r13
    6176:	2e 0c       	add	r2, r14
    6178:	3f 1c       	adc	r3, r15
    617a:	40 1e       	adc	r4, r16
    617c:	51 1e       	adc	r5, r17
    617e:	a8 01       	movw	r20, r16
    6180:	87 01       	movw	r16, r14
    6182:	7a 01       	movw	r14, r20
    6184:	e0 fa       	bst	r14, 0
    6186:	17 95       	ror	r17
    6188:	07 95       	ror	r16
    618a:	f7 94       	ror	r15
    618c:	e7 94       	ror	r14
    618e:	17 f9       	bld	r17, 7
    6190:	e0 fa       	bst	r14, 0
    6192:	17 95       	ror	r17
    6194:	07 95       	ror	r16
    6196:	f7 94       	ror	r15
    6198:	e7 94       	ror	r14
    619a:	17 f9       	bld	r17, 7
    619c:	e0 fa       	bst	r14, 0
    619e:	17 95       	ror	r17
    61a0:	07 95       	ror	r16
    61a2:	f7 94       	ror	r15
    61a4:	e7 94       	ror	r14
    61a6:	17 f9       	bld	r17, 7
    61a8:	e2 24       	eor	r14, r2
    61aa:	f3 24       	eor	r15, r3
    61ac:	04 25       	eor	r16, r4
    61ae:	15 25       	eor	r17, r5
    61b0:	a6 0c       	add	r10, r6
    61b2:	b7 1c       	adc	r11, r7
    61b4:	c8 1c       	adc	r12, r8
    61b6:	d9 1c       	adc	r13, r9
    61b8:	49 2d       	mov	r20, r9
    61ba:	98 2c       	mov	r9, r8
    61bc:	87 2c       	mov	r8, r7
    61be:	76 2c       	mov	r7, r6
    61c0:	64 2e       	mov	r6, r20
    61c2:	60 fa       	bst	r6, 0
    61c4:	97 94       	ror	r9
    61c6:	87 94       	ror	r8
    61c8:	77 94       	ror	r7
    61ca:	67 94       	ror	r6
    61cc:	97 f8       	bld	r9, 7
    61ce:	6a 24       	eor	r6, r10
    61d0:	7b 24       	eor	r7, r11
    61d2:	8c 24       	eor	r8, r12
    61d4:	9d 24       	eor	r9, r13
    61d6:	a6 01       	movw	r20, r12
    61d8:	65 01       	movw	r12, r10
    61da:	5a 01       	movw	r10, r20
    61dc:	26 0c       	add	r2, r6
    61de:	37 1c       	adc	r3, r7
    61e0:	48 1c       	adc	r4, r8
    61e2:	59 1c       	adc	r5, r9
    61e4:	1f 92       	push	r1
    61e6:	40 e2       	ldi	r20, 0x20	; 32
    61e8:	57 2d       	mov	r21, r7
    61ea:	39 2d       	mov	r19, r9
    61ec:	64 9e       	mul	r6, r20
    61ee:	30 01       	movw	r6, r0
    61f0:	84 9e       	mul	r8, r20
    61f2:	40 01       	movw	r8, r0
    61f4:	54 9f       	mul	r21, r20
    61f6:	70 24       	eor	r7, r0
    61f8:	81 24       	eor	r8, r1
    61fa:	34 9f       	mul	r19, r20
    61fc:	90 24       	eor	r9, r0
    61fe:	61 24       	eor	r6, r1
    6200:	1f 90       	pop	r1
    6202:	62 24       	eor	r6, r2
    6204:	73 24       	eor	r7, r3
    6206:	84 24       	eor	r8, r4
    6208:	95 24       	eor	r9, r5
    620a:	a2 01       	movw	r20, r4
    620c:	21 01       	movw	r4, r2
    620e:	1a 01       	movw	r2, r20
    6210:	ae 0c       	add	r10, r14
    6212:	bf 1c       	adc	r11, r15
    6214:	c0 1e       	adc	r12, r16
    6216:	d1 1e       	adc	r13, r17
    6218:	41 2f       	mov	r20, r17
    621a:	10 2f       	mov	r17, r16
    621c:	0f 2d       	mov	r16, r15
    621e:	fe 2c       	mov	r15, r14
    6220:	e4 2e       	mov	r14, r20
    6222:	ea 24       	eor	r14, r10
    6224:	fb 24       	eor	r15, r11
    6226:	0c 25       	eor	r16, r12
    6228:	1d 25       	eor	r17, r13
    622a:	2e 0c       	add	r2, r14
    622c:	3f 1c       	adc	r3, r15
    622e:	40 1e       	adc	r4, r16
    6230:	51 1e       	adc	r5, r17
    6232:	a8 01       	movw	r20, r16
    6234:	87 01       	movw	r16, r14
    6236:	7a 01       	movw	r14, r20
    6238:	e0 fa       	bst	r14, 0
    623a:	17 95       	ror	r17
    623c:	07 95       	ror	r16
    623e:	f7 94       	ror	r15
    6240:	e7 94       	ror	r14
    6242:	17 f9       	bld	r17, 7
    6244:	e0 fa       	bst	r14, 0
    6246:	17 95       	ror	r17
    6248:	07 95       	ror	r16
    624a:	f7 94       	ror	r15
    624c:	e7 94       	ror	r14
    624e:	17 f9       	bld	r17, 7
    6250:	e0 fa       	bst	r14, 0
    6252:	17 95       	ror	r17
    6254:	07 95       	ror	r16
    6256:	f7 94       	ror	r15
    6258:	e7 94       	ror	r14
    625a:	17 f9       	bld	r17, 7
    625c:	e2 24       	eor	r14, r2
    625e:	f3 24       	eor	r15, r3
    6260:	04 25       	eor	r16, r4
    6262:	15 25       	eor	r17, r5
    6264:	a6 0c       	add	r10, r6
    6266:	b7 1c       	adc	r11, r7
    6268:	c8 1c       	adc	r12, r8
    626a:	d9 1c       	adc	r13, r9
    626c:	49 2d       	mov	r20, r9
    626e:	98 2c       	mov	r9, r8
    6270:	87 2c       	mov	r8, r7
    6272:	76 2c       	mov	r7, r6
    6274:	64 2e       	mov	r6, r20
    6276:	60 fa       	bst	r6, 0
    6278:	97 94       	ror	r9
    627a:	87 94       	ror	r8
    627c:	77 94       	ror	r7
    627e:	67 94       	ror	r6
    6280:	97 f8       	bld	r9, 7
    6282:	6a 24       	eor	r6, r10
    6284:	7b 24       	eor	r7, r11
    6286:	8c 24       	eor	r8, r12
    6288:	9d 24       	eor	r9, r13
    628a:	a6 01       	movw	r20, r12
    628c:	65 01       	movw	r12, r10
    628e:	5a 01       	movw	r10, r20
    6290:	26 0c       	add	r2, r6
    6292:	37 1c       	adc	r3, r7
    6294:	48 1c       	adc	r4, r8
    6296:	59 1c       	adc	r5, r9
    6298:	1f 92       	push	r1
    629a:	40 e2       	ldi	r20, 0x20	; 32
    629c:	57 2d       	mov	r21, r7
    629e:	39 2d       	mov	r19, r9
    62a0:	64 9e       	mul	r6, r20
    62a2:	30 01       	movw	r6, r0
    62a4:	84 9e       	mul	r8, r20
    62a6:	40 01       	movw	r8, r0
    62a8:	54 9f       	mul	r21, r20
    62aa:	70 24       	eor	r7, r0
    62ac:	81 24       	eor	r8, r1
    62ae:	34 9f       	mul	r19, r20
    62b0:	90 24       	eor	r9, r0
    62b2:	61 24       	eor	r6, r1
    62b4:	1f 90       	pop	r1
    62b6:	62 24       	eor	r6, r2
    62b8:	73 24       	eor	r7, r3
    62ba:	84 24       	eor	r8, r4
    62bc:	95 24       	eor	r9, r5
    62be:	a2 01       	movw	r20, r4
    62c0:	21 01       	movw	r4, r2
    62c2:	1a 01       	movw	r2, r20
    62c4:	ae 0c       	add	r10, r14
    62c6:	bf 1c       	adc	r11, r15
    62c8:	c0 1e       	adc	r12, r16
    62ca:	d1 1e       	adc	r13, r17
    62cc:	41 2f       	mov	r20, r17
    62ce:	10 2f       	mov	r17, r16
    62d0:	0f 2d       	mov	r16, r15
    62d2:	fe 2c       	mov	r15, r14
    62d4:	e4 2e       	mov	r14, r20
    62d6:	ea 24       	eor	r14, r10
    62d8:	fb 24       	eor	r15, r11
    62da:	0c 25       	eor	r16, r12
    62dc:	1d 25       	eor	r17, r13
    62de:	2e 0c       	add	r2, r14
    62e0:	3f 1c       	adc	r3, r15
    62e2:	40 1e       	adc	r4, r16
    62e4:	51 1e       	adc	r5, r17
    62e6:	a8 01       	movw	r20, r16
    62e8:	87 01       	movw	r16, r14
    62ea:	7a 01       	movw	r14, r20
    62ec:	e0 fa       	bst	r14, 0
    62ee:	17 95       	ror	r17
    62f0:	07 95       	ror	r16
    62f2:	f7 94       	ror	r15
    62f4:	e7 94       	ror	r14
    62f6:	17 f9       	bld	r17, 7
    62f8:	e0 fa       	bst	r14, 0
    62fa:	17 95       	ror	r17
    62fc:	07 95       	ror	r16
    62fe:	f7 94       	ror	r15
    6300:	e7 94       	ror	r14
    6302:	17 f9       	bld	r17, 7
    6304:	e0 fa       	bst	r14, 0
    6306:	17 95       	ror	r17
    6308:	07 95       	ror	r16
    630a:	f7 94       	ror	r15
    630c:	e7 94       	ror	r14
    630e:	17 f9       	bld	r17, 7
    6310:	e2 24       	eor	r14, r2
    6312:	f3 24       	eor	r15, r3
    6314:	04 25       	eor	r16, r4
    6316:	15 25       	eor	r17, r5
    6318:	a6 0c       	add	r10, r6
    631a:	b7 1c       	adc	r11, r7
    631c:	c8 1c       	adc	r12, r8
    631e:	d9 1c       	adc	r13, r9
    6320:	49 2d       	mov	r20, r9
    6322:	98 2c       	mov	r9, r8
    6324:	87 2c       	mov	r8, r7
    6326:	76 2c       	mov	r7, r6
    6328:	64 2e       	mov	r6, r20
    632a:	60 fa       	bst	r6, 0
    632c:	97 94       	ror	r9
    632e:	87 94       	ror	r8
    6330:	77 94       	ror	r7
    6332:	67 94       	ror	r6
    6334:	97 f8       	bld	r9, 7
    6336:	6a 24       	eor	r6, r10
    6338:	7b 24       	eor	r7, r11
    633a:	8c 24       	eor	r8, r12
    633c:	9d 24       	eor	r9, r13
    633e:	a6 01       	movw	r20, r12
    6340:	65 01       	movw	r12, r10
    6342:	5a 01       	movw	r10, r20
    6344:	26 0c       	add	r2, r6
    6346:	37 1c       	adc	r3, r7
    6348:	48 1c       	adc	r4, r8
    634a:	59 1c       	adc	r5, r9
    634c:	1f 92       	push	r1
    634e:	40 e2       	ldi	r20, 0x20	; 32
    6350:	57 2d       	mov	r21, r7
    6352:	39 2d       	mov	r19, r9
    6354:	64 9e       	mul	r6, r20
    6356:	30 01       	movw	r6, r0
    6358:	84 9e       	mul	r8, r20
    635a:	40 01       	movw	r8, r0
    635c:	54 9f       	mul	r21, r20
    635e:	70 24       	eor	r7, r0
    6360:	81 24       	eor	r8, r1
    6362:	34 9f       	mul	r19, r20
    6364:	90 24       	eor	r9, r0
    6366:	61 24       	eor	r6, r1
    6368:	1f 90       	pop	r1
    636a:	62 24       	eor	r6, r2
    636c:	73 24       	eor	r7, r3
    636e:	84 24       	eor	r8, r4
    6370:	95 24       	eor	r9, r5
    6372:	a2 01       	movw	r20, r4
    6374:	21 01       	movw	r4, r2
    6376:	1a 01       	movw	r2, r20
    6378:	ae 0c       	add	r10, r14
    637a:	bf 1c       	adc	r11, r15
    637c:	c0 1e       	adc	r12, r16
    637e:	d1 1e       	adc	r13, r17
    6380:	41 2f       	mov	r20, r17
    6382:	10 2f       	mov	r17, r16
    6384:	0f 2d       	mov	r16, r15
    6386:	fe 2c       	mov	r15, r14
    6388:	e4 2e       	mov	r14, r20
    638a:	ea 24       	eor	r14, r10
    638c:	fb 24       	eor	r15, r11
    638e:	0c 25       	eor	r16, r12
    6390:	1d 25       	eor	r17, r13
    6392:	2e 0c       	add	r2, r14
    6394:	3f 1c       	adc	r3, r15
    6396:	40 1e       	adc	r4, r16
    6398:	51 1e       	adc	r5, r17
    639a:	a8 01       	movw	r20, r16
    639c:	87 01       	movw	r16, r14
    639e:	7a 01       	movw	r14, r20
    63a0:	e0 fa       	bst	r14, 0
    63a2:	17 95       	ror	r17
    63a4:	07 95       	ror	r16
    63a6:	f7 94       	ror	r15
    63a8:	e7 94       	ror	r14
    63aa:	17 f9       	bld	r17, 7
    63ac:	e0 fa       	bst	r14, 0
    63ae:	17 95       	ror	r17
    63b0:	07 95       	ror	r16
    63b2:	f7 94       	ror	r15
    63b4:	e7 94       	ror	r14
    63b6:	17 f9       	bld	r17, 7
    63b8:	e0 fa       	bst	r14, 0
    63ba:	17 95       	ror	r17
    63bc:	07 95       	ror	r16
    63be:	f7 94       	ror	r15
    63c0:	e7 94       	ror	r14
    63c2:	17 f9       	bld	r17, 7
    63c4:	e2 24       	eor	r14, r2
    63c6:	f3 24       	eor	r15, r3
    63c8:	04 25       	eor	r16, r4
    63ca:	15 25       	eor	r17, r5
    63cc:	a6 0c       	add	r10, r6
    63ce:	b7 1c       	adc	r11, r7
    63d0:	c8 1c       	adc	r12, r8
    63d2:	d9 1c       	adc	r13, r9
    63d4:	49 2d       	mov	r20, r9
    63d6:	98 2c       	mov	r9, r8
    63d8:	87 2c       	mov	r8, r7
    63da:	76 2c       	mov	r7, r6
    63dc:	64 2e       	mov	r6, r20
    63de:	60 fa       	bst	r6, 0
    63e0:	97 94       	ror	r9
    63e2:	87 94       	ror	r8
    63e4:	77 94       	ror	r7
    63e6:	67 94       	ror	r6
    63e8:	97 f8       	bld	r9, 7
    63ea:	6a 24       	eor	r6, r10
    63ec:	7b 24       	eor	r7, r11
    63ee:	8c 24       	eor	r8, r12
    63f0:	9d 24       	eor	r9, r13
    63f2:	a6 01       	movw	r20, r12
    63f4:	65 01       	movw	r12, r10
    63f6:	5a 01       	movw	r10, r20
    63f8:	12 27       	eor	r17, r18
    63fa:	22 91       	ld	r18, -Z
    63fc:	02 27       	eor	r16, r18
    63fe:	22 91       	ld	r18, -Z
    6400:	f2 26       	eor	r15, r18
    6402:	22 91       	ld	r18, -Z
    6404:	e2 26       	eor	r14, r18
    6406:	22 91       	ld	r18, -Z
    6408:	d2 26       	eor	r13, r18
    640a:	22 91       	ld	r18, -Z
    640c:	c2 26       	eor	r12, r18
    640e:	22 91       	ld	r18, -Z
    6410:	b2 26       	eor	r11, r18
    6412:	22 91       	ld	r18, -Z
    6414:	a2 26       	eor	r10, r18
    6416:	22 91       	ld	r18, -Z
    6418:	92 26       	eor	r9, r18
    641a:	22 91       	ld	r18, -Z
    641c:	82 26       	eor	r8, r18
    641e:	22 91       	ld	r18, -Z
    6420:	72 26       	eor	r7, r18
    6422:	22 91       	ld	r18, -Z
    6424:	62 26       	eor	r6, r18
    6426:	22 91       	ld	r18, -Z
    6428:	52 26       	eor	r5, r18
    642a:	22 91       	ld	r18, -Z
    642c:	42 26       	eor	r4, r18
    642e:	22 91       	ld	r18, -Z
    6430:	32 26       	eor	r3, r18
    6432:	22 91       	ld	r18, -Z
    6434:	22 26       	eor	r2, r18
    6436:	1c 93       	st	X, r17
    6438:	0e 93       	st	-X, r16
    643a:	fe 92       	st	-X, r15
    643c:	ee 92       	st	-X, r14
    643e:	de 92       	st	-X, r13
    6440:	ce 92       	st	-X, r12
    6442:	be 92       	st	-X, r11
    6444:	ae 92       	st	-X, r10
    6446:	9e 92       	st	-X, r9
    6448:	8e 92       	st	-X, r8
    644a:	7e 92       	st	-X, r7
    644c:	6e 92       	st	-X, r6
    644e:	5e 92       	st	-X, r5
    6450:	4e 92       	st	-X, r4
    6452:	3e 92       	st	-X, r3
    6454:	2e 92       	st	-X, r2
    6456:	1f 91       	pop	r17
    6458:	0f 91       	pop	r16
    645a:	ff 90       	pop	r15
    645c:	ef 90       	pop	r14
    645e:	df 90       	pop	r13
    6460:	cf 90       	pop	r12
    6462:	bf 90       	pop	r11
    6464:	af 90       	pop	r10
    6466:	9f 90       	pop	r9
    6468:	8f 90       	pop	r8
    646a:	7f 90       	pop	r7
    646c:	6f 90       	pop	r6
    646e:	5f 90       	pop	r5
    6470:	4f 90       	pop	r4
    6472:	3f 90       	pop	r3
    6474:	2f 90       	pop	r2
    6476:	08 95       	ret

00006478 <time>:
    6478:	fc 01       	movw	r30, r24
    647a:	0f b6       	in	r0, 0x3f	; 63
    647c:	f8 94       	cli
    647e:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <__system_time>
    6482:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <__system_time+0x1>
    6486:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <__system_time+0x2>
    648a:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <__system_time+0x3>
    648e:	0f be       	out	0x3f, r0	; 63
    6490:	30 97       	sbiw	r30, 0x00	; 0
    6492:	21 f0       	breq	.+8      	; 0x649c <time+0x24>
    6494:	60 83       	st	Z, r22
    6496:	71 83       	std	Z+1, r23	; 0x01
    6498:	82 83       	std	Z+2, r24	; 0x02
    649a:	93 83       	std	Z+3, r25	; 0x03
    649c:	08 95       	ret

0000649e <main>:
void __start(void)  __attribute__((section(".startup")));



int main(void)
{
    649e:	4f 92       	push	r4
    64a0:	5f 92       	push	r5
    64a2:	6f 92       	push	r6
    64a4:	7f 92       	push	r7
    64a6:	8f 92       	push	r8
    64a8:	9f 92       	push	r9
    64aa:	af 92       	push	r10
    64ac:	bf 92       	push	r11
    64ae:	cf 92       	push	r12
    64b0:	df 92       	push	r13
    64b2:	ef 92       	push	r14
    64b4:	ff 92       	push	r15
    64b6:	0f 93       	push	r16
    64b8:	1f 93       	push	r17
    64ba:	cf 93       	push	r28
    64bc:	df 93       	push	r29
    64be:	cd b7       	in	r28, 0x3d	; 61
    64c0:	de b7       	in	r29, 0x3e	; 62
    64c2:	c2 5f       	subi	r28, 0xF2	; 242
    64c4:	d1 09       	sbc	r29, r1
    64c6:	0f b6       	in	r0, 0x3f	; 63
    64c8:	f8 94       	cli
    64ca:	de bf       	out	0x3e, r29	; 62
    64cc:	0f be       	out	0x3f, r0	; 63
    64ce:	cd bf       	out	0x3d, r28	; 61
    srand(time(NULL));
    64d0:	80 e0       	ldi	r24, 0x00	; 0
    64d2:	90 e0       	ldi	r25, 0x00	; 0
    64d4:	0e 94 3c 32 	call	0x6478	; 0x6478 <time>
    64d8:	cb 01       	movw	r24, r22
    64da:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <srand>
    uint8_t ch = 0;
    uint8_t key[16U] = {0U};
    64de:	2e 01       	movw	r4, r28
    64e0:	8d ec       	ldi	r24, 0xCD	; 205
    64e2:	48 0e       	add	r4, r24
    64e4:	51 1c       	adc	r5, r1
    64e6:	80 e1       	ldi	r24, 0x10	; 16
    64e8:	d2 01       	movw	r26, r4
    64ea:	1d 92       	st	X+, r1
    64ec:	8a 95       	dec	r24
    64ee:	e9 f7       	brne	.-6      	; 0x64ea <main+0x4c>
    uint8_t id[4U] = {0U};
    64f0:	c1 51       	subi	r28, 0x11	; 17
    64f2:	df 4f       	sbci	r29, 0xFF	; 255
    64f4:	18 82       	st	Y, r1
    64f6:	19 82       	std	Y+1, r1	; 0x01
    64f8:	1a 82       	std	Y+2, r1	; 0x02
    64fa:	1b 82       	std	Y+3, r1	; 0x03
    64fc:	cf 5e       	subi	r28, 0xEF	; 239
    64fe:	d0 40       	sbci	r29, 0x00	; 0
    id[3] = 1U;
    6500:	81 e0       	ldi	r24, 0x01	; 1
    6502:	ce 50       	subi	r28, 0x0E	; 14
    6504:	df 4f       	sbci	r29, 0xFF	; 255
    6506:	88 83       	st	Y, r24
    6508:	c2 5f       	subi	r28, 0xF2	; 242
    650a:	d0 40       	sbci	r29, 0x00	; 0
    uint8_t prk[16U];
    // Da generare randomicamente
    uint8_t ninit[6] = {0U};
    650c:	3e 01       	movw	r6, r28
    650e:	b9 ee       	ldi	r27, 0xE9	; 233
    6510:	6b 0e       	add	r6, r27
    6512:	71 1c       	adc	r7, r1
    6514:	86 e0       	ldi	r24, 0x06	; 6
    6516:	f3 01       	movw	r30, r6
    6518:	11 92       	st	Z+, r1
    651a:	8a 95       	dec	r24
    651c:	e9 f7       	brne	.-6      	; 0x6518 <main+0x7a>
    int result;

    for (;;)
    {
        /* read a character from the console */
        ch = usart_rx_ch();
    651e:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <usart_rx_ch>

        /* IF you type 'p' you'll get the puf */
        if ('p' == ch)
    6522:	80 37       	cpi	r24, 0x70	; 112
    6524:	29 f4       	brne	.+10     	; 0x6530 <main+0x92>
        {
            usart_tx_buffer(bss_puf, PUF_SIZE);
    6526:	60 e3       	ldi	r22, 0x30	; 48
    6528:	71 e0       	ldi	r23, 0x01	; 1
    652a:	88 ec       	ldi	r24, 0xC8	; 200
    652c:	93 e0       	ldi	r25, 0x03	; 3
    652e:	30 c0       	rjmp	.+96     	; 0x6590 <main+0xf2>
        }
        else if (ch == 'k')
    6530:	8b 36       	cpi	r24, 0x6B	; 107
    6532:	21 f4       	brne	.+8      	; 0x653c <main+0x9e>
        {
            usart_tx_buffer(key, 16U);
    6534:	60 e1       	ldi	r22, 0x10	; 16
    6536:	70 e0       	ldi	r23, 0x00	; 0
    6538:	c2 01       	movw	r24, r4
    653a:	2a c0       	rjmp	.+84     	; 0x6590 <main+0xf2>
        }
        else if (ch == 'f')
    653c:	86 36       	cpi	r24, 0x66	; 102
    653e:	71 f4       	brne	.+28     	; 0x655c <main+0xbe>
        {
            //esegui il FE
            usart_tx_string("eseguo FE\n\r");
    6540:	8e e3       	ldi	r24, 0x3E	; 62
    6542:	92 e0       	ldi	r25, 0x02	; 2
    6544:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
            puf_extract(bss_puf, key);
    6548:	b2 01       	movw	r22, r4
    654a:	88 ec       	ldi	r24, 0xC8	; 200
    654c:	93 e0       	ldi	r25, 0x03	; 3
    654e:	0e 94 40 20 	call	0x4080	; 0x4080 <puf_extract>
            usart_tx_string("fine del FE\n\r");
    6552:	8a e4       	ldi	r24, 0x4A	; 74
    6554:	92 e0       	ldi	r25, 0x02	; 2
    6556:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    655a:	e1 cf       	rjmp	.-62     	; 0x651e <main+0x80>
            //usart_tx_string("prova\n\r");
        }
        else if (ch == 'i')
    655c:	89 36       	cpi	r24, 0x69	; 105
    655e:	51 f4       	brne	.+20     	; 0x6574 <main+0xd6>
        {
           	usart_tx_string("ID:");
    6560:	88 e5       	ldi	r24, 0x58	; 88
    6562:	92 e0       	ldi	r25, 0x02	; 2
    6564:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    		usart_tx_buffer(id, sizeof(id));
    6568:	64 e0       	ldi	r22, 0x04	; 4
    656a:	70 e0       	ldi	r23, 0x00	; 0
    656c:	ce 01       	movw	r24, r28
    656e:	81 51       	subi	r24, 0x11	; 17
    6570:	9f 4f       	sbci	r25, 0xFF	; 255
    6572:	0e c0       	rjmp	.+28     	; 0x6590 <main+0xf2>
        }
        else if (ch == 'n')
    6574:	8e 36       	cpi	r24, 0x6E	; 110
    6576:	79 f4       	brne	.+30     	; 0x6596 <main+0xf8>
        {
        	gen(ninit,sizeof(ninit));
    6578:	66 e0       	ldi	r22, 0x06	; 6
    657a:	70 e0       	ldi	r23, 0x00	; 0
    657c:	c3 01       	movw	r24, r6
    657e:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <gen>
    		usart_tx_string("Ninit: ");
    6582:	8c e5       	ldi	r24, 0x5C	; 92
    6584:	92 e0       	ldi	r25, 0x02	; 2
    6586:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    		usart_tx_buffer(ninit,sizeof(ninit));
    658a:	66 e0       	ldi	r22, 0x06	; 6
    658c:	70 e0       	ldi	r23, 0x00	; 0
    658e:	c3 01       	movw	r24, r6
    6590:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>
    6594:	c4 cf       	rjmp	.-120    	; 0x651e <main+0x80>
    	}
    	else if (ch == 'h')
    6596:	88 36       	cpi	r24, 0x68	; 104
    6598:	11 f6       	brne	.-124    	; 0x651e <main+0x80>
    	{
    		
    		// Calcolo PRK
    		result = hkdf(SHA256, NULL, 0, key, FE_KEY_SIZE, ninit, sizeof(ninit), prk, FE_KEY_SIZE);
    659a:	80 e1       	ldi	r24, 0x10	; 16
    659c:	88 2e       	mov	r8, r24
    659e:	91 2c       	mov	r9, r1
    65a0:	ce 01       	movw	r24, r28
    65a2:	83 54       	subi	r24, 0x43	; 67
    65a4:	9f 4f       	sbci	r25, 0xFF	; 255
    65a6:	5c 01       	movw	r10, r24
    65a8:	96 e0       	ldi	r25, 0x06	; 6
    65aa:	c9 2e       	mov	r12, r25
    65ac:	d1 2c       	mov	r13, r1
    65ae:	73 01       	movw	r14, r6
    65b0:	00 e1       	ldi	r16, 0x10	; 16
    65b2:	10 e0       	ldi	r17, 0x00	; 0
    65b4:	92 01       	movw	r18, r4
    65b6:	40 e0       	ldi	r20, 0x00	; 0
    65b8:	50 e0       	ldi	r21, 0x00	; 0
    65ba:	60 e0       	ldi	r22, 0x00	; 0
    65bc:	70 e0       	ldi	r23, 0x00	; 0
    65be:	82 e0       	ldi	r24, 0x02	; 2
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <hkdf>
    		// Check for errors
    		if (result != 0)
    65c6:	89 2b       	or	r24, r25
    65c8:	19 f0       	breq	.+6      	; 0x65d0 <main+0x132>
    		{
    		    usart_tx_string("HKDF failed with error\n");
    65ca:	84 e6       	ldi	r24, 0x64	; 100
    65cc:	92 e0       	ldi	r25, 0x02	; 2
    65ce:	d4 c0       	rjmp	.+424    	; 0x6778 <main+0x2da>
    		    return 1;
    		}
    		usart_tx_string("PRK: ");
    65d0:	8c e7       	ldi	r24, 0x7C	; 124
    65d2:	92 e0       	ldi	r25, 0x02	; 2
    65d4:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    		usart_tx_buffer(prk,sizeof(prk));
    65d8:	60 e1       	ldi	r22, 0x10	; 16
    65da:	70 e0       	ldi	r23, 0x00	; 0
    65dc:	ce 01       	movw	r24, r28
    65de:	83 54       	subi	r24, 0x43	; 67
    65e0:	9f 4f       	sbci	r25, 0xFF	; 255
    65e2:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>
    		
    		//Inserisci messaggio e mac
    uint8_t ma[16] = {0U};
    65e6:	8e 01       	movw	r16, r28
    65e8:	03 55       	subi	r16, 0x53	; 83
    65ea:	1f 4f       	sbci	r17, 0xFF	; 255
    65ec:	80 e1       	ldi	r24, 0x10	; 16
    65ee:	d8 01       	movw	r26, r16
    65f0:	1d 92       	st	X+, r1
    65f2:	8a 95       	dec	r24
    65f4:	e9 f7       	brne	.-6      	; 0x65f0 <main+0x152>
    uint8_t ns[6] = {0U};
    65f6:	7e 01       	movw	r14, r28
    65f8:	b3 ee       	ldi	r27, 0xE3	; 227
    65fa:	eb 0e       	add	r14, r27
    65fc:	f1 1c       	adc	r15, r1
    65fe:	86 e0       	ldi	r24, 0x06	; 6
    6600:	f7 01       	movw	r30, r14
    6602:	11 92       	st	Z+, r1
    6604:	8a 95       	dec	r24
    6606:	e9 f7       	brne	.-6      	; 0x6602 <main+0x164>
    usart_tx_string("Inserisci messaggio \n");
    6608:	82 e8       	ldi	r24, 0x82	; 130
    660a:	92 e0       	ldi	r25, 0x02	; 2
    660c:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_rx_buffer(ma,sizeof(ma));
    6610:	60 e1       	ldi	r22, 0x10	; 16
    6612:	70 e0       	ldi	r23, 0x00	; 0
    6614:	c8 01       	movw	r24, r16
    6616:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <usart_rx_buffer>
    usart_tx_string("Messaggio inserito: ");
    661a:	88 e9       	ldi	r24, 0x98	; 152
    661c:	92 e0       	ldi	r25, 0x02	; 2
    661e:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(ma,sizeof(ma));
    6622:	60 e1       	ldi	r22, 0x10	; 16
    6624:	70 e0       	ldi	r23, 0x00	; 0
    6626:	c8 01       	movw	r24, r16
    6628:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>

    uint8_t oldDigest[32U];
    usart_tx_string("Inserisci Mac:\n");
    662c:	8d ea       	ldi	r24, 0xAD	; 173
    662e:	92 e0       	ldi	r25, 0x02	; 2
    6630:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_rx_buffer(oldDigest,sizeof(oldDigest));
    6634:	60 e2       	ldi	r22, 0x20	; 32
    6636:	70 e0       	ldi	r23, 0x00	; 0
    6638:	ce 01       	movw	r24, r28
    663a:	89 59       	subi	r24, 0x99	; 153
    663c:	9f 4f       	sbci	r25, 0xFF	; 255
    663e:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <usart_rx_buffer>
    usart_tx_string("Mac inserito: ");
    6642:	8d eb       	ldi	r24, 0xBD	; 189
    6644:	92 e0       	ldi	r25, 0x02	; 2
    6646:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(oldDigest,sizeof(oldDigest));
    664a:	60 e2       	ldi	r22, 0x20	; 32
    664c:	70 e0       	ldi	r23, 0x00	; 0
    664e:	ce 01       	movw	r24, r28
    6650:	89 59       	subi	r24, 0x99	; 153
    6652:	9f 4f       	sbci	r25, 0xFF	; 255
    6654:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>

    //Decifra messaggio
    Decrypt(ma, prk);
    6658:	be 01       	movw	r22, r28
    665a:	63 54       	subi	r22, 0x43	; 67
    665c:	7f 4f       	sbci	r23, 0xFF	; 255
    665e:	c8 01       	movw	r24, r16
    6660:	0e 94 92 2b 	call	0x5724	; 0x5724 <Decrypt>
    usart_tx_string("Decripted ma: ");
    6664:	8c ec       	ldi	r24, 0xCC	; 204
    6666:	92 e0       	ldi	r25, 0x02	; 2
    6668:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(ma,sizeof(ma));
    666c:	60 e1       	ldi	r22, 0x10	; 16
    666e:	70 e0       	ldi	r23, 0x00	; 0
    6670:	c8 01       	movw	r24, r16
    6672:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>
    6676:	68 01       	movw	r12, r16
    6678:	de 01       	movw	r26, r28
    667a:	a1 51       	subi	r26, 0x11	; 17
    667c:	bf 4f       	sbci	r27, 0xFF	; 255
    667e:	c8 01       	movw	r24, r16
    6680:	04 96       	adiw	r24, 0x04	; 4
    //Check per ID e Ninit
    for (int i = 0; i < sizeof(id); i++)
    6682:	f8 01       	movw	r30, r16
    6684:	e8 17       	cp	r30, r24
    6686:	f9 07       	cpc	r31, r25
    6688:	39 f0       	breq	.+14     	; 0x6698 <main+0x1fa>
    {
        if(ma[i]!=id[i]){
    668a:	31 91       	ld	r19, Z+
    668c:	2d 91       	ld	r18, X+
    668e:	32 17       	cp	r19, r18
    6690:	c9 f3       	breq	.-14     	; 0x6684 <main+0x1e6>
            usart_tx_string("Errore ID non corrisponde\n");
    6692:	8b ed       	ldi	r24, 0xDB	; 219
    6694:	92 e0       	ldi	r25, 0x02	; 2
    6696:	0f c0       	rjmp	.+30     	; 0x66b6 <main+0x218>
    6698:	d8 01       	movw	r26, r16
    669a:	1a 96       	adiw	r26, 0x0a	; 10
            return -1;
            }
    }
    for (int i = 0; i < sizeof(ninit); i++)
    669c:	8a 17       	cp	r24, r26
    669e:	9b 07       	cpc	r25, r27
    66a0:	79 f0       	breq	.+30     	; 0x66c0 <main+0x222>
    {
        if(ma[i+sizeof(id)]!=ninit[i]){
    66a2:	fc 01       	movw	r30, r24
    66a4:	31 91       	ld	r19, Z+
    66a6:	cf 01       	movw	r24, r30
    66a8:	f3 01       	movw	r30, r6
    66aa:	21 91       	ld	r18, Z+
    66ac:	3f 01       	movw	r6, r30
    66ae:	32 17       	cp	r19, r18
    66b0:	a9 f3       	breq	.-22     	; 0x669c <main+0x1fe>
            usart_tx_string("Errore Ninit non corrisponde\n");
    66b2:	86 ef       	ldi	r24, 0xF6	; 246
    66b4:	92 e0       	ldi	r25, 0x02	; 2
    66b6:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
            return -1;
    66ba:	8f ef       	ldi	r24, 0xFF	; 255
    66bc:	9f ef       	ldi	r25, 0xFF	; 255
    66be:	26 c1       	rjmp	.+588    	; 0x690c <main+0x46e>
    66c0:	47 01       	movw	r8, r14
    66c2:	38 01       	movw	r6, r16
    66c4:	f0 e1       	ldi	r31, 0x10	; 16
    66c6:	6f 0e       	add	r6, r31
    66c8:	71 1c       	adc	r7, r1
        if(ma[i]!=id[i]){
            usart_tx_string("Errore ID non corrisponde\n");
            return -1;
            }
    }
    for (int i = 0; i < sizeof(ninit); i++)
    66ca:	f7 01       	movw	r30, r14
            usart_tx_string("Errore Ninit non corrisponde\n");
            return -1;
            }
    }
    //Estraggo ns
    for (int i = 0; i < sizeof(ns); i++)
    66cc:	a6 15       	cp	r26, r6
    66ce:	b7 05       	cpc	r27, r7
    66d0:	19 f0       	breq	.+6      	; 0x66d8 <main+0x23a>
    {
        ns[i] = ma[i + sizeof(id) + sizeof(ninit)];
    66d2:	8d 91       	ld	r24, X+
    66d4:	81 93       	st	Z+, r24
    66d6:	fa cf       	rjmp	.-12     	; 0x66cc <main+0x22e>
    }
    usart_tx_string("Ns: ");
    66d8:	84 e1       	ldi	r24, 0x14	; 20
    66da:	93 e0       	ldi	r25, 0x03	; 3
    66dc:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(ns,sizeof(ns));
    66e0:	66 e0       	ldi	r22, 0x06	; 6
    66e2:	70 e0       	ldi	r23, 0x00	; 0
    66e4:	c7 01       	movw	r24, r14
    66e6:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>
    

    // Creare un nuovo mac con gli stessi dati e compararlo (cifrare prima i dati del messaggio)
    Encrypt(ma,prk);
    66ea:	be 01       	movw	r22, r28
    66ec:	63 54       	subi	r22, 0x43	; 67
    66ee:	7f 4f       	sbci	r23, 0xFF	; 255
    66f0:	c8 01       	movw	r24, r16
    66f2:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <Encrypt>
    66f6:	fe 01       	movw	r30, r28
    66f8:	31 96       	adiw	r30, 0x01	; 1
    66fa:	5f 01       	movw	r10, r30

    //Crea mac=(ms||key||ns)
    uint8_t mac[sizeof(ma) + sizeof(key) + sizeof(ns)];
    for (int i = 0; i < sizeof(ma); i++)
    66fc:	c6 14       	cp	r12, r6
    66fe:	d7 04       	cpc	r13, r7
    6700:	29 f0       	breq	.+10     	; 0x670c <main+0x26e>
    {
        mac[i] = ma[i];
    6702:	d6 01       	movw	r26, r12
    6704:	8d 91       	ld	r24, X+
    6706:	6d 01       	movw	r12, r26
    6708:	81 93       	st	Z+, r24
    670a:	f8 cf       	rjmp	.-16     	; 0x66fc <main+0x25e>
    670c:	c2 01       	movw	r24, r4
    670e:	ae 01       	movw	r20, r28
    6710:	4f 5e       	subi	r20, 0xEF	; 239
    6712:	5f 4f       	sbci	r21, 0xFF	; 255
    6714:	de 01       	movw	r26, r28
    6716:	91 96       	adiw	r26, 0x21	; 33
    }
    for (int i = 0; i < sizeof(key); i++)
    6718:	4a 17       	cp	r20, r26
    671a:	5b 07       	cpc	r21, r27
    671c:	39 f0       	breq	.+14     	; 0x672c <main+0x28e>
    {
        mac[i + sizeof(ma)] = key[i];
    671e:	fc 01       	movw	r30, r24
    6720:	21 91       	ld	r18, Z+
    6722:	cf 01       	movw	r24, r30
    6724:	fa 01       	movw	r30, r20
    6726:	21 93       	st	Z+, r18
    6728:	af 01       	movw	r20, r30
    672a:	f6 cf       	rjmp	.-20     	; 0x6718 <main+0x27a>
    672c:	3e 01       	movw	r6, r28
    672e:	f7 e2       	ldi	r31, 0x27	; 39
    6730:	6f 0e       	add	r6, r31
    6732:	71 1c       	adc	r7, r1
    uint8_t mac[sizeof(ma) + sizeof(key) + sizeof(ns)];
    for (int i = 0; i < sizeof(ma); i++)
    {
        mac[i] = ma[i];
    }
    for (int i = 0; i < sizeof(key); i++)
    6734:	f7 01       	movw	r30, r14
    {
        mac[i + sizeof(ma)] = key[i];
    }
    for (int i = 0; i < sizeof(ns); i++)
    6736:	a6 15       	cp	r26, r6
    6738:	b7 05       	cpc	r27, r7
    673a:	19 f0       	breq	.+6      	; 0x6742 <main+0x2a4>
    {
        mac[i + sizeof(ma) + sizeof(key)] = ns[i];
    673c:	81 91       	ld	r24, Z+
    673e:	8d 93       	st	X+, r24
    6740:	fa cf       	rjmp	.-12     	; 0x6736 <main+0x298>
    }
    usart_tx_string("Messaggio prima del mac\n");
    6742:	89 e1       	ldi	r24, 0x19	; 25
    6744:	93 e0       	ldi	r25, 0x03	; 3
    6746:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(mac,sizeof(mac));
    674a:	66 e2       	ldi	r22, 0x26	; 38
    674c:	70 e0       	ldi	r23, 0x00	; 0
    674e:	c5 01       	movw	r24, r10
    6750:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>

    // Lunghezza digest 32 per sha256
    uint8_t digest[32U];
    result = hmac(SHA256, mac, sizeof(mac), key, sizeof(key), digest);
    6754:	ce 01       	movw	r24, r28
    6756:	89 5b       	subi	r24, 0xB9	; 185
    6758:	9f 4f       	sbci	r25, 0xFF	; 255
    675a:	7c 01       	movw	r14, r24
    675c:	00 e1       	ldi	r16, 0x10	; 16
    675e:	10 e0       	ldi	r17, 0x00	; 0
    6760:	92 01       	movw	r18, r4
    6762:	46 e2       	ldi	r20, 0x26	; 38
    6764:	50 e0       	ldi	r21, 0x00	; 0
    6766:	b5 01       	movw	r22, r10
    6768:	82 e0       	ldi	r24, 0x02	; 2
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <hmac>
    // Check for errors
    if (result != 0)
    6770:	89 2b       	or	r24, r25
    6772:	39 f0       	breq	.+14     	; 0x6782 <main+0x2e4>
    {
        usart_tx_string("HMAC failed with error\n");
    6774:	82 e3       	ldi	r24, 0x32	; 50
    6776:	93 e0       	ldi	r25, 0x03	; 3
    6778:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
        return 1;
    677c:	81 e0       	ldi	r24, 0x01	; 1
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	c5 c0       	rjmp	.+394    	; 0x690c <main+0x46e>
    }
    // digest=mac(message||k||ns)
    usart_tx_string("Digest mac\n");
    6782:	8a e4       	ldi	r24, 0x4A	; 74
    6784:	93 e0       	ldi	r25, 0x03	; 3
    6786:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(digest,sizeof(mac));
    678a:	66 e2       	ldi	r22, 0x26	; 38
    678c:	70 e0       	ldi	r23, 0x00	; 0
    678e:	ce 01       	movw	r24, r28
    6790:	89 5b       	subi	r24, 0xB9	; 185
    6792:	9f 4f       	sbci	r25, 0xFF	; 255
    6794:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>
    6798:	fe 01       	movw	r30, r28
    679a:	e9 5b       	subi	r30, 0xB9	; 185
    679c:	ff 4f       	sbci	r31, 0xFF	; 255
    679e:	de 01       	movw	r26, r28
    67a0:	a9 59       	subi	r26, 0x99	; 153
    67a2:	bf 4f       	sbci	r27, 0xFF	; 255
    67a4:	9f 01       	movw	r18, r30
    67a6:	20 5e       	subi	r18, 0xE0	; 224
    67a8:	3f 4f       	sbci	r19, 0xFF	; 255

    // Compara mac
    result = 1;
    for (uint8_t i = 0U; (i < 32) && result; i++)
    {
        result = (digest[i] == oldDigest[i]);
    67aa:	91 91       	ld	r25, Z+
    67ac:	8d 91       	ld	r24, X+
    usart_tx_string("Digest mac\n");
    usart_tx_buffer(digest,sizeof(mac));

    // Compara mac
    result = 1;
    for (uint8_t i = 0U; (i < 32) && result; i++)
    67ae:	e2 17       	cp	r30, r18
    67b0:	f3 07       	cpc	r31, r19
    67b2:	19 f0       	breq	.+6      	; 0x67ba <main+0x31c>
    67b4:	98 17       	cp	r25, r24
    67b6:	c9 f3       	breq	.-14     	; 0x67aa <main+0x30c>
    67b8:	05 c0       	rjmp	.+10     	; 0x67c4 <main+0x326>
    {
        result = (digest[i] == oldDigest[i]);
    }
    if (result == 1)
    67ba:	98 13       	cpse	r25, r24
    67bc:	03 c0       	rjmp	.+6      	; 0x67c4 <main+0x326>
    {
        usart_tx_string("Mac verificato\n");
    67be:	86 e5       	ldi	r24, 0x56	; 86
    67c0:	93 e0       	ldi	r25, 0x03	; 3
    67c2:	02 c0       	rjmp	.+4      	; 0x67c8 <main+0x32a>
    }
    else
    {
        usart_tx_string("Mac non autenticato\n");
    67c4:	86 e6       	ldi	r24, 0x66	; 102
    67c6:	93 e0       	ldi	r25, 0x03	; 3
    67c8:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    }

    //Prepara messaggio e mac
    uint8_t na[6] = {0U};
    67cc:	7e 01       	movw	r14, r28
    67ce:	9d ed       	ldi	r25, 0xDD	; 221
    67d0:	e9 0e       	add	r14, r25
    67d2:	f1 1c       	adc	r15, r1
    67d4:	86 e0       	ldi	r24, 0x06	; 6
    67d6:	d7 01       	movw	r26, r14
    67d8:	1d 92       	st	X+, r1
    67da:	8a 95       	dec	r24
    67dc:	e9 f7       	brne	.-6      	; 0x67d8 <main+0x33a>
    gen(na,sizeof(na));
    67de:	66 e0       	ldi	r22, 0x06	; 6
    67e0:	70 e0       	ldi	r23, 0x00	; 0
    67e2:	c7 01       	movw	r24, r14
    67e4:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <gen>

    // ms (id,ns,na)
    uint8_t ms[sizeof(id) + sizeof(ns) + sizeof(na)] = {0U};
    67e8:	8e 01       	movw	r16, r28
    67ea:	03 56       	subi	r16, 0x63	; 99
    67ec:	1f 4f       	sbci	r17, 0xFF	; 255
    67ee:	80 e1       	ldi	r24, 0x10	; 16
    67f0:	f8 01       	movw	r30, r16
    67f2:	11 92       	st	Z+, r1
    67f4:	8a 95       	dec	r24
    67f6:	e9 f7       	brne	.-6      	; 0x67f2 <main+0x354>
    for (int i = 0; i < sizeof(id); i++)
    {
        ms[i] = id[i];
    67f8:	c1 51       	subi	r28, 0x11	; 17
    67fa:	df 4f       	sbci	r29, 0xFF	; 255
    67fc:	88 81       	ld	r24, Y
    67fe:	cf 5e       	subi	r28, 0xEF	; 239
    6800:	d0 40       	sbci	r29, 0x00	; 0
    6802:	d8 01       	movw	r26, r16
    6804:	8c 93       	st	X, r24
    6806:	c0 51       	subi	r28, 0x10	; 16
    6808:	df 4f       	sbci	r29, 0xFF	; 255
    680a:	88 81       	ld	r24, Y
    680c:	c0 5f       	subi	r28, 0xF0	; 240
    680e:	d0 40       	sbci	r29, 0x00	; 0
    6810:	11 96       	adiw	r26, 0x01	; 1
    6812:	8c 93       	st	X, r24
    6814:	11 97       	sbiw	r26, 0x01	; 1
    6816:	cf 50       	subi	r28, 0x0F	; 15
    6818:	df 4f       	sbci	r29, 0xFF	; 255
    681a:	88 81       	ld	r24, Y
    681c:	c1 5f       	subi	r28, 0xF1	; 241
    681e:	d0 40       	sbci	r29, 0x00	; 0
    6820:	12 96       	adiw	r26, 0x02	; 2
    6822:	8c 93       	st	X, r24
    6824:	12 97       	sbiw	r26, 0x02	; 2
    6826:	ce 50       	subi	r28, 0x0E	; 14
    6828:	df 4f       	sbci	r29, 0xFF	; 255
    682a:	88 81       	ld	r24, Y
    682c:	c2 5f       	subi	r28, 0xF2	; 242
    682e:	d0 40       	sbci	r29, 0x00	; 0
    6830:	13 96       	adiw	r26, 0x03	; 3
    6832:	8c 93       	st	X, r24
    6834:	98 01       	movw	r18, r16
    6836:	2c 5f       	subi	r18, 0xFC	; 252
    6838:	3f 4f       	sbci	r19, 0xFF	; 255
    683a:	f8 01       	movw	r30, r16
    683c:	3a 96       	adiw	r30, 0x0a	; 10
    }
    for (int i = 0; i < sizeof(ns); i++)
    683e:	2e 17       	cp	r18, r30
    6840:	3f 07       	cpc	r19, r31
    6842:	39 f0       	breq	.+14     	; 0x6852 <main+0x3b4>
    {
        ms[i + sizeof(id)] = ns[i];
    6844:	d4 01       	movw	r26, r8
    6846:	8d 91       	ld	r24, X+
    6848:	4d 01       	movw	r8, r26
    684a:	d9 01       	movw	r26, r18
    684c:	8d 93       	st	X+, r24
    684e:	9d 01       	movw	r18, r26
    6850:	f6 cf       	rjmp	.-20     	; 0x683e <main+0x3a0>
    6852:	58 01       	movw	r10, r16
    6854:	b0 e1       	ldi	r27, 0x10	; 16
    6856:	ab 0e       	add	r10, r27
    6858:	b1 1c       	adc	r11, r1
    uint8_t ms[sizeof(id) + sizeof(ns) + sizeof(na)] = {0U};
    for (int i = 0; i < sizeof(id); i++)
    {
        ms[i] = id[i];
    }
    for (int i = 0; i < sizeof(ns); i++)
    685a:	d7 01       	movw	r26, r14
    {
        ms[i + sizeof(id)] = ns[i];
    }
    for (int i = 0; i < sizeof(na); i++)
    685c:	ea 15       	cp	r30, r10
    685e:	fb 05       	cpc	r31, r11
    6860:	19 f0       	breq	.+6      	; 0x6868 <main+0x3ca>
    {
        ms[i + sizeof(ns) + sizeof(id)] = na[i];
    6862:	8d 91       	ld	r24, X+
    6864:	81 93       	st	Z+, r24
    6866:	fa cf       	rjmp	.-12     	; 0x685c <main+0x3be>
    }
    Encrypt(ms,prk);
    6868:	be 01       	movw	r22, r28
    686a:	63 54       	subi	r22, 0x43	; 67
    686c:	7f 4f       	sbci	r23, 0xFF	; 255
    686e:	c8 01       	movw	r24, r16
    6870:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <Encrypt>
    usart_tx_string("Messaggio ms cifrato: ");
    6874:	8b e7       	ldi	r24, 0x7B	; 123
    6876:	93 e0       	ldi	r25, 0x03	; 3
    6878:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(ms,sizeof(ms));
    687c:	60 e1       	ldi	r22, 0x10	; 16
    687e:	70 e0       	ldi	r23, 0x00	; 0
    6880:	c8 01       	movw	r24, r16
    6882:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>
    uint8_t mac3[sizeof(ms) + sizeof(na)] = {0U};
    6886:	6e 01       	movw	r12, r28
    6888:	e7 e8       	ldi	r30, 0x87	; 135
    688a:	ce 0e       	add	r12, r30
    688c:	d1 1c       	adc	r13, r1
    688e:	86 e1       	ldi	r24, 0x16	; 22
    6890:	d6 01       	movw	r26, r12
    6892:	1d 92       	st	X+, r1
    6894:	8a 95       	dec	r24
    6896:	e9 f7       	brne	.-6      	; 0x6892 <main+0x3f4>
    6898:	f8 01       	movw	r30, r16
    689a:	d6 01       	movw	r26, r12
    for (int i = 0; i < sizeof(ms); i++)
    689c:	ea 15       	cp	r30, r10
    689e:	fb 05       	cpc	r31, r11
    68a0:	19 f0       	breq	.+6      	; 0x68a8 <main+0x40a>
    {
        mac3[i] = ms[i];
    68a2:	81 91       	ld	r24, Z+
    68a4:	8d 93       	st	X+, r24
    68a6:	fa cf       	rjmp	.-12     	; 0x689c <main+0x3fe>
    68a8:	f6 01       	movw	r30, r12
    68aa:	70 96       	adiw	r30, 0x10	; 16
    68ac:	c6 01       	movw	r24, r12
    68ae:	46 96       	adiw	r24, 0x16	; 22
    }
    for (int i = 0; i < sizeof(na); i++)
    68b0:	8e 17       	cp	r24, r30
    68b2:	9f 07       	cpc	r25, r31
    68b4:	29 f0       	breq	.+10     	; 0x68c0 <main+0x422>
    {
        mac3[i+sizeof(ms)] = na[i];
    68b6:	d7 01       	movw	r26, r14
    68b8:	2d 91       	ld	r18, X+
    68ba:	7d 01       	movw	r14, r26
    68bc:	21 93       	st	Z+, r18
    68be:	f8 cf       	rjmp	.-16     	; 0x68b0 <main+0x412>
    }
    usart_tx_string("Messaggio prima del mac\n");
    68c0:	89 e1       	ldi	r24, 0x19	; 25
    68c2:	93 e0       	ldi	r25, 0x03	; 3
    68c4:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(mac3,sizeof(mac3));
    68c8:	66 e1       	ldi	r22, 0x16	; 22
    68ca:	70 e0       	ldi	r23, 0x00	; 0
    68cc:	c6 01       	movw	r24, r12
    68ce:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>

    // Lunghezza digest 32 per sha256
    uint8_t digest3[32U];
    result = hmac(SHA256, mac3, sizeof(mac3), key, sizeof(key), digest3);
    68d2:	73 01       	movw	r14, r6
    68d4:	00 e1       	ldi	r16, 0x10	; 16
    68d6:	10 e0       	ldi	r17, 0x00	; 0
    68d8:	9e 01       	movw	r18, r28
    68da:	23 53       	subi	r18, 0x33	; 51
    68dc:	3f 4f       	sbci	r19, 0xFF	; 255
    68de:	46 e1       	ldi	r20, 0x16	; 22
    68e0:	50 e0       	ldi	r21, 0x00	; 0
    68e2:	b6 01       	movw	r22, r12
    68e4:	82 e0       	ldi	r24, 0x02	; 2
    68e6:	90 e0       	ldi	r25, 0x00	; 0
    68e8:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <hmac>
    // Check for errors
    if (result != 0)
    68ec:	89 2b       	or	r24, r25
    68ee:	19 f0       	breq	.+6      	; 0x68f6 <main+0x458>
    {
        usart_tx_string("HMAC failed with error \n");
    68f0:	82 e9       	ldi	r24, 0x92	; 146
    68f2:	93 e0       	ldi	r25, 0x03	; 3
    68f4:	41 cf       	rjmp	.-382    	; 0x6778 <main+0x2da>
        return 1;
    }
    // mac(message||na)
    usart_tx_string("Digest3 mac\n");
    68f6:	8b ea       	ldi	r24, 0xAB	; 171
    68f8:	93 e0       	ldi	r25, 0x03	; 3
    68fa:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <usart_tx_string>
    usart_tx_buffer(digest3,sizeof(digest3));
    68fe:	60 e2       	ldi	r22, 0x20	; 32
    6900:	70 e0       	ldi	r23, 0x00	; 0
    6902:	c3 01       	movw	r24, r6
    6904:	0e 94 31 27 	call	0x4e62	; 0x4e62 <usart_tx_buffer>
    return 0;
    6908:	80 e0       	ldi	r24, 0x00	; 0
    690a:	90 e0       	ldi	r25, 0x00	; 0
        // qui esegui ciÃ² che fa un bootloader
        // void run_stk(void);
    }

    return 0;
}
    690c:	ce 50       	subi	r28, 0x0E	; 14
    690e:	df 4f       	sbci	r29, 0xFF	; 255
    6910:	0f b6       	in	r0, 0x3f	; 63
    6912:	f8 94       	cli
    6914:	de bf       	out	0x3e, r29	; 62
    6916:	0f be       	out	0x3f, r0	; 63
    6918:	cd bf       	out	0x3d, r28	; 61
    691a:	df 91       	pop	r29
    691c:	cf 91       	pop	r28
    691e:	1f 91       	pop	r17
    6920:	0f 91       	pop	r16
    6922:	ff 90       	pop	r15
    6924:	ef 90       	pop	r14
    6926:	df 90       	pop	r13
    6928:	cf 90       	pop	r12
    692a:	bf 90       	pop	r11
    692c:	af 90       	pop	r10
    692e:	9f 90       	pop	r9
    6930:	8f 90       	pop	r8
    6932:	7f 90       	pop	r7
    6934:	6f 90       	pop	r6
    6936:	5f 90       	pop	r5
    6938:	4f 90       	pop	r4
    693a:	08 95       	ret

0000693c <__divmodhi4>:
    693c:	97 fb       	bst	r25, 7
    693e:	07 2e       	mov	r0, r23
    6940:	16 f4       	brtc	.+4      	; 0x6946 <__divmodhi4+0xa>
    6942:	00 94       	com	r0
    6944:	07 d0       	rcall	.+14     	; 0x6954 <__divmodhi4_neg1>
    6946:	77 fd       	sbrc	r23, 7
    6948:	09 d0       	rcall	.+18     	; 0x695c <__divmodhi4_neg2>
    694a:	0e 94 b2 34 	call	0x6964	; 0x6964 <__udivmodhi4>
    694e:	07 fc       	sbrc	r0, 7
    6950:	05 d0       	rcall	.+10     	; 0x695c <__divmodhi4_neg2>
    6952:	3e f4       	brtc	.+14     	; 0x6962 <__divmodhi4_exit>

00006954 <__divmodhi4_neg1>:
    6954:	90 95       	com	r25
    6956:	81 95       	neg	r24
    6958:	9f 4f       	sbci	r25, 0xFF	; 255
    695a:	08 95       	ret

0000695c <__divmodhi4_neg2>:
    695c:	70 95       	com	r23
    695e:	61 95       	neg	r22
    6960:	7f 4f       	sbci	r23, 0xFF	; 255

00006962 <__divmodhi4_exit>:
    6962:	08 95       	ret

00006964 <__udivmodhi4>:
    6964:	aa 1b       	sub	r26, r26
    6966:	bb 1b       	sub	r27, r27
    6968:	51 e1       	ldi	r21, 0x11	; 17
    696a:	07 c0       	rjmp	.+14     	; 0x697a <__udivmodhi4_ep>

0000696c <__udivmodhi4_loop>:
    696c:	aa 1f       	adc	r26, r26
    696e:	bb 1f       	adc	r27, r27
    6970:	a6 17       	cp	r26, r22
    6972:	b7 07       	cpc	r27, r23
    6974:	10 f0       	brcs	.+4      	; 0x697a <__udivmodhi4_ep>
    6976:	a6 1b       	sub	r26, r22
    6978:	b7 0b       	sbc	r27, r23

0000697a <__udivmodhi4_ep>:
    697a:	88 1f       	adc	r24, r24
    697c:	99 1f       	adc	r25, r25
    697e:	5a 95       	dec	r21
    6980:	a9 f7       	brne	.-22     	; 0x696c <__udivmodhi4_loop>
    6982:	80 95       	com	r24
    6984:	90 95       	com	r25
    6986:	bc 01       	movw	r22, r24
    6988:	cd 01       	movw	r24, r26
    698a:	08 95       	ret

0000698c <do_rand>:
    698c:	8f 92       	push	r8
    698e:	9f 92       	push	r9
    6990:	af 92       	push	r10
    6992:	bf 92       	push	r11
    6994:	cf 92       	push	r12
    6996:	df 92       	push	r13
    6998:	ef 92       	push	r14
    699a:	ff 92       	push	r15
    699c:	cf 93       	push	r28
    699e:	df 93       	push	r29
    69a0:	ec 01       	movw	r28, r24
    69a2:	68 81       	ld	r22, Y
    69a4:	79 81       	ldd	r23, Y+1	; 0x01
    69a6:	8a 81       	ldd	r24, Y+2	; 0x02
    69a8:	9b 81       	ldd	r25, Y+3	; 0x03
    69aa:	61 15       	cp	r22, r1
    69ac:	71 05       	cpc	r23, r1
    69ae:	81 05       	cpc	r24, r1
    69b0:	91 05       	cpc	r25, r1
    69b2:	21 f4       	brne	.+8      	; 0x69bc <do_rand+0x30>
    69b4:	64 e2       	ldi	r22, 0x24	; 36
    69b6:	79 ed       	ldi	r23, 0xD9	; 217
    69b8:	8b e5       	ldi	r24, 0x5B	; 91
    69ba:	97 e0       	ldi	r25, 0x07	; 7
    69bc:	2d e1       	ldi	r18, 0x1D	; 29
    69be:	33 ef       	ldi	r19, 0xF3	; 243
    69c0:	41 e0       	ldi	r20, 0x01	; 1
    69c2:	50 e0       	ldi	r21, 0x00	; 0
    69c4:	0e 94 39 39 	call	0x7272	; 0x7272 <__divmodsi4>
    69c8:	49 01       	movw	r8, r18
    69ca:	5a 01       	movw	r10, r20
    69cc:	9b 01       	movw	r18, r22
    69ce:	ac 01       	movw	r20, r24
    69d0:	a7 ea       	ldi	r26, 0xA7	; 167
    69d2:	b1 e4       	ldi	r27, 0x41	; 65
    69d4:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__muluhisi3>
    69d8:	6b 01       	movw	r12, r22
    69da:	7c 01       	movw	r14, r24
    69dc:	ac ee       	ldi	r26, 0xEC	; 236
    69de:	b4 ef       	ldi	r27, 0xF4	; 244
    69e0:	a5 01       	movw	r20, r10
    69e2:	94 01       	movw	r18, r8
    69e4:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulohisi3>
    69e8:	dc 01       	movw	r26, r24
    69ea:	cb 01       	movw	r24, r22
    69ec:	8c 0d       	add	r24, r12
    69ee:	9d 1d       	adc	r25, r13
    69f0:	ae 1d       	adc	r26, r14
    69f2:	bf 1d       	adc	r27, r15
    69f4:	b7 ff       	sbrs	r27, 7
    69f6:	03 c0       	rjmp	.+6      	; 0x69fe <do_rand+0x72>
    69f8:	01 97       	sbiw	r24, 0x01	; 1
    69fa:	a1 09       	sbc	r26, r1
    69fc:	b0 48       	sbci	r27, 0x80	; 128
    69fe:	88 83       	st	Y, r24
    6a00:	99 83       	std	Y+1, r25	; 0x01
    6a02:	aa 83       	std	Y+2, r26	; 0x02
    6a04:	bb 83       	std	Y+3, r27	; 0x03
    6a06:	9f 77       	andi	r25, 0x7F	; 127
    6a08:	df 91       	pop	r29
    6a0a:	cf 91       	pop	r28
    6a0c:	ff 90       	pop	r15
    6a0e:	ef 90       	pop	r14
    6a10:	df 90       	pop	r13
    6a12:	cf 90       	pop	r12
    6a14:	bf 90       	pop	r11
    6a16:	af 90       	pop	r10
    6a18:	9f 90       	pop	r9
    6a1a:	8f 90       	pop	r8
    6a1c:	08 95       	ret

00006a1e <rand_r>:
    6a1e:	0e 94 c6 34 	call	0x698c	; 0x698c <do_rand>
    6a22:	08 95       	ret

00006a24 <rand>:
    6a24:	80 e2       	ldi	r24, 0x20	; 32
    6a26:	91 e0       	ldi	r25, 0x01	; 1
    6a28:	0e 94 c6 34 	call	0x698c	; 0x698c <do_rand>
    6a2c:	08 95       	ret

00006a2e <srand>:
    6a2e:	a0 e0       	ldi	r26, 0x00	; 0
    6a30:	b0 e0       	ldi	r27, 0x00	; 0
    6a32:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <next>
    6a36:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <next+0x1>
    6a3a:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <next+0x2>
    6a3e:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <next+0x3>
    6a42:	08 95       	ret

00006a44 <strtol>:
    6a44:	a0 e0       	ldi	r26, 0x00	; 0
    6a46:	b0 e0       	ldi	r27, 0x00	; 0
    6a48:	e8 e2       	ldi	r30, 0x28	; 40
    6a4a:	f5 e3       	ldi	r31, 0x35	; 53
    6a4c:	0c 94 6c 39 	jmp	0x72d8	; 0x72d8 <__prologue_saves__+0x2>
    6a50:	5c 01       	movw	r10, r24
    6a52:	6b 01       	movw	r12, r22
    6a54:	7a 01       	movw	r14, r20
    6a56:	61 15       	cp	r22, r1
    6a58:	71 05       	cpc	r23, r1
    6a5a:	19 f0       	breq	.+6      	; 0x6a62 <strtol+0x1e>
    6a5c:	fb 01       	movw	r30, r22
    6a5e:	91 83       	std	Z+1, r25	; 0x01
    6a60:	80 83       	st	Z, r24
    6a62:	e1 14       	cp	r14, r1
    6a64:	f1 04       	cpc	r15, r1
    6a66:	29 f0       	breq	.+10     	; 0x6a72 <strtol+0x2e>
    6a68:	c7 01       	movw	r24, r14
    6a6a:	02 97       	sbiw	r24, 0x02	; 2
    6a6c:	83 97       	sbiw	r24, 0x23	; 35
    6a6e:	08 f0       	brcs	.+2      	; 0x6a72 <strtol+0x2e>
    6a70:	e5 c0       	rjmp	.+458    	; 0x6c3c <strtol+0x1f8>
    6a72:	e5 01       	movw	r28, r10
    6a74:	21 96       	adiw	r28, 0x01	; 1
    6a76:	f5 01       	movw	r30, r10
    6a78:	10 81       	ld	r17, Z
    6a7a:	81 2f       	mov	r24, r17
    6a7c:	90 e0       	ldi	r25, 0x00	; 0
    6a7e:	0e 94 38 36 	call	0x6c70	; 0x6c70 <isspace>
    6a82:	89 2b       	or	r24, r25
    6a84:	11 f0       	breq	.+4      	; 0x6a8a <strtol+0x46>
    6a86:	5e 01       	movw	r10, r28
    6a88:	f4 cf       	rjmp	.-24     	; 0x6a72 <strtol+0x2e>
    6a8a:	1d 32       	cpi	r17, 0x2D	; 45
    6a8c:	29 f4       	brne	.+10     	; 0x6a98 <strtol+0x54>
    6a8e:	21 96       	adiw	r28, 0x01	; 1
    6a90:	f5 01       	movw	r30, r10
    6a92:	11 81       	ldd	r17, Z+1	; 0x01
    6a94:	01 e0       	ldi	r16, 0x01	; 1
    6a96:	07 c0       	rjmp	.+14     	; 0x6aa6 <strtol+0x62>
    6a98:	1b 32       	cpi	r17, 0x2B	; 43
    6a9a:	21 f4       	brne	.+8      	; 0x6aa4 <strtol+0x60>
    6a9c:	e5 01       	movw	r28, r10
    6a9e:	22 96       	adiw	r28, 0x02	; 2
    6aa0:	f5 01       	movw	r30, r10
    6aa2:	11 81       	ldd	r17, Z+1	; 0x01
    6aa4:	00 e0       	ldi	r16, 0x00	; 0
    6aa6:	e1 14       	cp	r14, r1
    6aa8:	f1 04       	cpc	r15, r1
    6aaa:	09 f1       	breq	.+66     	; 0x6aee <strtol+0xaa>
    6aac:	f0 e1       	ldi	r31, 0x10	; 16
    6aae:	ef 16       	cp	r14, r31
    6ab0:	f1 04       	cpc	r15, r1
    6ab2:	29 f4       	brne	.+10     	; 0x6abe <strtol+0x7a>
    6ab4:	3f c0       	rjmp	.+126    	; 0x6b34 <strtol+0xf0>
    6ab6:	10 e3       	ldi	r17, 0x30	; 48
    6ab8:	e1 14       	cp	r14, r1
    6aba:	f1 04       	cpc	r15, r1
    6abc:	21 f1       	breq	.+72     	; 0x6b06 <strtol+0xc2>
    6abe:	28 e0       	ldi	r18, 0x08	; 8
    6ac0:	e2 16       	cp	r14, r18
    6ac2:	f1 04       	cpc	r15, r1
    6ac4:	01 f1       	breq	.+64     	; 0x6b06 <strtol+0xc2>
    6ac6:	54 f4       	brge	.+20     	; 0x6adc <strtol+0x98>
    6ac8:	e2 e0       	ldi	r30, 0x02	; 2
    6aca:	ee 16       	cp	r14, r30
    6acc:	f1 04       	cpc	r15, r1
    6ace:	21 f5       	brne	.+72     	; 0x6b18 <strtol+0xd4>
    6ad0:	81 2c       	mov	r8, r1
    6ad2:	91 2c       	mov	r9, r1
    6ad4:	a1 2c       	mov	r10, r1
    6ad6:	b0 e4       	ldi	r27, 0x40	; 64
    6ad8:	bb 2e       	mov	r11, r27
    6ada:	3e c0       	rjmp	.+124    	; 0x6b58 <strtol+0x114>
    6adc:	fa e0       	ldi	r31, 0x0A	; 10
    6ade:	ef 16       	cp	r14, r31
    6ae0:	f1 04       	cpc	r15, r1
    6ae2:	39 f0       	breq	.+14     	; 0x6af2 <strtol+0xae>
    6ae4:	20 e1       	ldi	r18, 0x10	; 16
    6ae6:	e2 16       	cp	r14, r18
    6ae8:	f1 04       	cpc	r15, r1
    6aea:	b1 f4       	brne	.+44     	; 0x6b18 <strtol+0xd4>
    6aec:	30 c0       	rjmp	.+96     	; 0x6b4e <strtol+0x10a>
    6aee:	10 33       	cpi	r17, 0x30	; 48
    6af0:	19 f1       	breq	.+70     	; 0x6b38 <strtol+0xf4>
    6af2:	fa e0       	ldi	r31, 0x0A	; 10
    6af4:	ef 2e       	mov	r14, r31
    6af6:	f1 2c       	mov	r15, r1
    6af8:	ac ec       	ldi	r26, 0xCC	; 204
    6afa:	8a 2e       	mov	r8, r26
    6afc:	98 2c       	mov	r9, r8
    6afe:	a8 2c       	mov	r10, r8
    6b00:	ac e0       	ldi	r26, 0x0C	; 12
    6b02:	ba 2e       	mov	r11, r26
    6b04:	29 c0       	rjmp	.+82     	; 0x6b58 <strtol+0x114>
    6b06:	78 e0       	ldi	r23, 0x08	; 8
    6b08:	e7 2e       	mov	r14, r23
    6b0a:	f1 2c       	mov	r15, r1
    6b0c:	81 2c       	mov	r8, r1
    6b0e:	91 2c       	mov	r9, r1
    6b10:	a1 2c       	mov	r10, r1
    6b12:	e0 e1       	ldi	r30, 0x10	; 16
    6b14:	be 2e       	mov	r11, r30
    6b16:	20 c0       	rjmp	.+64     	; 0x6b58 <strtol+0x114>
    6b18:	60 e0       	ldi	r22, 0x00	; 0
    6b1a:	70 e0       	ldi	r23, 0x00	; 0
    6b1c:	80 e0       	ldi	r24, 0x00	; 0
    6b1e:	90 e8       	ldi	r25, 0x80	; 128
    6b20:	97 01       	movw	r18, r14
    6b22:	0f 2c       	mov	r0, r15
    6b24:	00 0c       	add	r0, r0
    6b26:	44 0b       	sbc	r20, r20
    6b28:	55 0b       	sbc	r21, r21
    6b2a:	0e 94 17 39 	call	0x722e	; 0x722e <__udivmodsi4>
    6b2e:	49 01       	movw	r8, r18
    6b30:	5a 01       	movw	r10, r20
    6b32:	12 c0       	rjmp	.+36     	; 0x6b58 <strtol+0x114>
    6b34:	10 33       	cpi	r17, 0x30	; 48
    6b36:	59 f4       	brne	.+22     	; 0x6b4e <strtol+0x10a>
    6b38:	88 81       	ld	r24, Y
    6b3a:	8f 7d       	andi	r24, 0xDF	; 223
    6b3c:	88 35       	cpi	r24, 0x58	; 88
    6b3e:	09 f0       	breq	.+2      	; 0x6b42 <strtol+0xfe>
    6b40:	ba cf       	rjmp	.-140    	; 0x6ab6 <strtol+0x72>
    6b42:	19 81       	ldd	r17, Y+1	; 0x01
    6b44:	22 96       	adiw	r28, 0x02	; 2
    6b46:	02 60       	ori	r16, 0x02	; 2
    6b48:	80 e1       	ldi	r24, 0x10	; 16
    6b4a:	e8 2e       	mov	r14, r24
    6b4c:	f1 2c       	mov	r15, r1
    6b4e:	81 2c       	mov	r8, r1
    6b50:	91 2c       	mov	r9, r1
    6b52:	a1 2c       	mov	r10, r1
    6b54:	68 e0       	ldi	r22, 0x08	; 8
    6b56:	b6 2e       	mov	r11, r22
    6b58:	40 e0       	ldi	r20, 0x00	; 0
    6b5a:	60 e0       	ldi	r22, 0x00	; 0
    6b5c:	70 e0       	ldi	r23, 0x00	; 0
    6b5e:	cb 01       	movw	r24, r22
    6b60:	27 01       	movw	r4, r14
    6b62:	0f 2c       	mov	r0, r15
    6b64:	00 0c       	add	r0, r0
    6b66:	66 08       	sbc	r6, r6
    6b68:	77 08       	sbc	r7, r7
    6b6a:	fe 01       	movw	r30, r28
    6b6c:	50 ed       	ldi	r21, 0xD0	; 208
    6b6e:	35 2e       	mov	r3, r21
    6b70:	31 0e       	add	r3, r17
    6b72:	29 e0       	ldi	r18, 0x09	; 9
    6b74:	23 15       	cp	r18, r3
    6b76:	70 f4       	brcc	.+28     	; 0x6b94 <strtol+0x150>
    6b78:	2f eb       	ldi	r18, 0xBF	; 191
    6b7a:	21 0f       	add	r18, r17
    6b7c:	2a 31       	cpi	r18, 0x1A	; 26
    6b7e:	18 f4       	brcc	.+6      	; 0x6b86 <strtol+0x142>
    6b80:	39 ec       	ldi	r19, 0xC9	; 201
    6b82:	33 2e       	mov	r3, r19
    6b84:	06 c0       	rjmp	.+12     	; 0x6b92 <strtol+0x14e>
    6b86:	2f e9       	ldi	r18, 0x9F	; 159
    6b88:	21 0f       	add	r18, r17
    6b8a:	2a 31       	cpi	r18, 0x1A	; 26
    6b8c:	18 f5       	brcc	.+70     	; 0x6bd4 <strtol+0x190>
    6b8e:	29 ea       	ldi	r18, 0xA9	; 169
    6b90:	32 2e       	mov	r3, r18
    6b92:	31 0e       	add	r3, r17
    6b94:	23 2d       	mov	r18, r3
    6b96:	30 e0       	ldi	r19, 0x00	; 0
    6b98:	2e 15       	cp	r18, r14
    6b9a:	3f 05       	cpc	r19, r15
    6b9c:	dc f4       	brge	.+54     	; 0x6bd4 <strtol+0x190>
    6b9e:	47 fd       	sbrc	r20, 7
    6ba0:	16 c0       	rjmp	.+44     	; 0x6bce <strtol+0x18a>
    6ba2:	86 16       	cp	r8, r22
    6ba4:	97 06       	cpc	r9, r23
    6ba6:	a8 06       	cpc	r10, r24
    6ba8:	b9 06       	cpc	r11, r25
    6baa:	70 f0       	brcs	.+28     	; 0x6bc8 <strtol+0x184>
    6bac:	a3 01       	movw	r20, r6
    6bae:	92 01       	movw	r18, r4
    6bb0:	0e 94 07 39 	call	0x720e	; 0x720e <__mulsi3>
    6bb4:	63 0d       	add	r22, r3
    6bb6:	71 1d       	adc	r23, r1
    6bb8:	81 1d       	adc	r24, r1
    6bba:	91 1d       	adc	r25, r1
    6bbc:	61 30       	cpi	r22, 0x01	; 1
    6bbe:	71 05       	cpc	r23, r1
    6bc0:	81 05       	cpc	r24, r1
    6bc2:	20 e8       	ldi	r18, 0x80	; 128
    6bc4:	92 07       	cpc	r25, r18
    6bc6:	10 f0       	brcs	.+4      	; 0x6bcc <strtol+0x188>
    6bc8:	4f ef       	ldi	r20, 0xFF	; 255
    6bca:	01 c0       	rjmp	.+2      	; 0x6bce <strtol+0x18a>
    6bcc:	41 e0       	ldi	r20, 0x01	; 1
    6bce:	21 96       	adiw	r28, 0x01	; 1
    6bd0:	10 81       	ld	r17, Z
    6bd2:	cb cf       	rjmp	.-106    	; 0x6b6a <strtol+0x126>
    6bd4:	20 2f       	mov	r18, r16
    6bd6:	21 70       	andi	r18, 0x01	; 1
    6bd8:	c1 14       	cp	r12, r1
    6bda:	d1 04       	cpc	r13, r1
    6bdc:	71 f0       	breq	.+28     	; 0x6bfa <strtol+0x1b6>
    6bde:	44 23       	and	r20, r20
    6be0:	29 f0       	breq	.+10     	; 0x6bec <strtol+0x1a8>
    6be2:	21 97       	sbiw	r28, 0x01	; 1
    6be4:	f6 01       	movw	r30, r12
    6be6:	d1 83       	std	Z+1, r29	; 0x01
    6be8:	c0 83       	st	Z, r28
    6bea:	07 c0       	rjmp	.+14     	; 0x6bfa <strtol+0x1b6>
    6bec:	01 ff       	sbrs	r16, 1
    6bee:	19 c0       	rjmp	.+50     	; 0x6c22 <strtol+0x1de>
    6bf0:	22 97       	sbiw	r28, 0x02	; 2
    6bf2:	f6 01       	movw	r30, r12
    6bf4:	d1 83       	std	Z+1, r29	; 0x01
    6bf6:	c0 83       	st	Z, r28
    6bf8:	14 c0       	rjmp	.+40     	; 0x6c22 <strtol+0x1de>
    6bfa:	47 ff       	sbrs	r20, 7
    6bfc:	12 c0       	rjmp	.+36     	; 0x6c22 <strtol+0x1de>
    6bfe:	22 23       	and	r18, r18
    6c00:	29 f0       	breq	.+10     	; 0x6c0c <strtol+0x1c8>
    6c02:	60 e0       	ldi	r22, 0x00	; 0
    6c04:	70 e0       	ldi	r23, 0x00	; 0
    6c06:	80 e0       	ldi	r24, 0x00	; 0
    6c08:	90 e8       	ldi	r25, 0x80	; 128
    6c0a:	04 c0       	rjmp	.+8      	; 0x6c14 <strtol+0x1d0>
    6c0c:	6f ef       	ldi	r22, 0xFF	; 255
    6c0e:	7f ef       	ldi	r23, 0xFF	; 255
    6c10:	8f ef       	ldi	r24, 0xFF	; 255
    6c12:	9f e7       	ldi	r25, 0x7F	; 127
    6c14:	22 e2       	ldi	r18, 0x22	; 34
    6c16:	30 e0       	ldi	r19, 0x00	; 0
    6c18:	30 93 c3 03 	sts	0x03C3, r19	; 0x8003c3 <__data_end+0x1>
    6c1c:	20 93 c2 03 	sts	0x03C2, r18	; 0x8003c2 <__data_end>
    6c20:	09 c0       	rjmp	.+18     	; 0x6c34 <strtol+0x1f0>
    6c22:	22 23       	and	r18, r18
    6c24:	81 f0       	breq	.+32     	; 0x6c46 <strtol+0x202>
    6c26:	90 95       	com	r25
    6c28:	80 95       	com	r24
    6c2a:	70 95       	com	r23
    6c2c:	61 95       	neg	r22
    6c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c30:	8f 4f       	sbci	r24, 0xFF	; 255
    6c32:	9f 4f       	sbci	r25, 0xFF	; 255
    6c34:	46 2f       	mov	r20, r22
    6c36:	37 2f       	mov	r19, r23
    6c38:	28 2f       	mov	r18, r24
    6c3a:	12 c0       	rjmp	.+36     	; 0x6c60 <strtol+0x21c>
    6c3c:	40 e0       	ldi	r20, 0x00	; 0
    6c3e:	30 e0       	ldi	r19, 0x00	; 0
    6c40:	20 e0       	ldi	r18, 0x00	; 0
    6c42:	90 e0       	ldi	r25, 0x00	; 0
    6c44:	0d c0       	rjmp	.+26     	; 0x6c60 <strtol+0x21c>
    6c46:	97 ff       	sbrs	r25, 7
    6c48:	f5 cf       	rjmp	.-22     	; 0x6c34 <strtol+0x1f0>
    6c4a:	82 e2       	ldi	r24, 0x22	; 34
    6c4c:	90 e0       	ldi	r25, 0x00	; 0
    6c4e:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <__data_end+0x1>
    6c52:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <__data_end>
    6c56:	6f ef       	ldi	r22, 0xFF	; 255
    6c58:	7f ef       	ldi	r23, 0xFF	; 255
    6c5a:	8f ef       	ldi	r24, 0xFF	; 255
    6c5c:	9f e7       	ldi	r25, 0x7F	; 127
    6c5e:	ea cf       	rjmp	.-44     	; 0x6c34 <strtol+0x1f0>
    6c60:	64 2f       	mov	r22, r20
    6c62:	73 2f       	mov	r23, r19
    6c64:	82 2f       	mov	r24, r18
    6c66:	cd b7       	in	r28, 0x3d	; 61
    6c68:	de b7       	in	r29, 0x3e	; 62
    6c6a:	e1 e1       	ldi	r30, 0x11	; 17
    6c6c:	0c 94 88 39 	jmp	0x7310	; 0x7310 <__epilogue_restores__+0x2>

00006c70 <isspace>:
    6c70:	91 11       	cpse	r25, r1
    6c72:	0c 94 54 38 	jmp	0x70a8	; 0x70a8 <__ctype_isfalse>
    6c76:	80 32       	cpi	r24, 0x20	; 32
    6c78:	19 f0       	breq	.+6      	; 0x6c80 <isspace+0x10>
    6c7a:	89 50       	subi	r24, 0x09	; 9
    6c7c:	85 50       	subi	r24, 0x05	; 5
    6c7e:	c8 f7       	brcc	.-14     	; 0x6c72 <isspace+0x2>
    6c80:	08 95       	ret

00006c82 <memcpy>:
    6c82:	fb 01       	movw	r30, r22
    6c84:	dc 01       	movw	r26, r24
    6c86:	02 c0       	rjmp	.+4      	; 0x6c8c <memcpy+0xa>
    6c88:	01 90       	ld	r0, Z+
    6c8a:	0d 92       	st	X+, r0
    6c8c:	41 50       	subi	r20, 0x01	; 1
    6c8e:	50 40       	sbci	r21, 0x00	; 0
    6c90:	d8 f7       	brcc	.-10     	; 0x6c88 <memcpy+0x6>
    6c92:	08 95       	ret

00006c94 <memset>:
    6c94:	dc 01       	movw	r26, r24
    6c96:	01 c0       	rjmp	.+2      	; 0x6c9a <memset+0x6>
    6c98:	6d 93       	st	X+, r22
    6c9a:	41 50       	subi	r20, 0x01	; 1
    6c9c:	50 40       	sbci	r21, 0x00	; 0
    6c9e:	e0 f7       	brcc	.-8      	; 0x6c98 <memset+0x4>
    6ca0:	08 95       	ret

00006ca2 <sprintf>:
    6ca2:	ae e0       	ldi	r26, 0x0E	; 14
    6ca4:	b0 e0       	ldi	r27, 0x00	; 0
    6ca6:	e7 e5       	ldi	r30, 0x57	; 87
    6ca8:	f6 e3       	ldi	r31, 0x36	; 54
    6caa:	0c 94 79 39 	jmp	0x72f2	; 0x72f2 <__prologue_saves__+0x1c>
    6cae:	0d 89       	ldd	r16, Y+21	; 0x15
    6cb0:	1e 89       	ldd	r17, Y+22	; 0x16
    6cb2:	86 e0       	ldi	r24, 0x06	; 6
    6cb4:	8c 83       	std	Y+4, r24	; 0x04
    6cb6:	1a 83       	std	Y+2, r17	; 0x02
    6cb8:	09 83       	std	Y+1, r16	; 0x01
    6cba:	8f ef       	ldi	r24, 0xFF	; 255
    6cbc:	9f e7       	ldi	r25, 0x7F	; 127
    6cbe:	9e 83       	std	Y+6, r25	; 0x06
    6cc0:	8d 83       	std	Y+5, r24	; 0x05
    6cc2:	ae 01       	movw	r20, r28
    6cc4:	47 5e       	subi	r20, 0xE7	; 231
    6cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    6cc8:	6f 89       	ldd	r22, Y+23	; 0x17
    6cca:	78 8d       	ldd	r23, Y+24	; 0x18
    6ccc:	ce 01       	movw	r24, r28
    6cce:	01 96       	adiw	r24, 0x01	; 1
    6cd0:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <vfprintf>
    6cd4:	ef 81       	ldd	r30, Y+7	; 0x07
    6cd6:	f8 85       	ldd	r31, Y+8	; 0x08
    6cd8:	e0 0f       	add	r30, r16
    6cda:	f1 1f       	adc	r31, r17
    6cdc:	10 82       	st	Z, r1
    6cde:	2e 96       	adiw	r28, 0x0e	; 14
    6ce0:	e4 e0       	ldi	r30, 0x04	; 4
    6ce2:	0c 94 95 39 	jmp	0x732a	; 0x732a <__epilogue_restores__+0x1c>

00006ce6 <vfprintf>:
    6ce6:	ab e0       	ldi	r26, 0x0B	; 11
    6ce8:	b0 e0       	ldi	r27, 0x00	; 0
    6cea:	e9 e7       	ldi	r30, 0x79	; 121
    6cec:	f6 e3       	ldi	r31, 0x36	; 54
    6cee:	0c 94 6b 39 	jmp	0x72d6	; 0x72d6 <__prologue_saves__>
    6cf2:	6c 01       	movw	r12, r24
    6cf4:	7b 01       	movw	r14, r22
    6cf6:	8a 01       	movw	r16, r20
    6cf8:	fc 01       	movw	r30, r24
    6cfa:	17 82       	std	Z+7, r1	; 0x07
    6cfc:	16 82       	std	Z+6, r1	; 0x06
    6cfe:	83 81       	ldd	r24, Z+3	; 0x03
    6d00:	81 ff       	sbrs	r24, 1
    6d02:	cc c1       	rjmp	.+920    	; 0x709c <vfprintf+0x3b6>
    6d04:	ce 01       	movw	r24, r28
    6d06:	01 96       	adiw	r24, 0x01	; 1
    6d08:	3c 01       	movw	r6, r24
    6d0a:	f6 01       	movw	r30, r12
    6d0c:	93 81       	ldd	r25, Z+3	; 0x03
    6d0e:	f7 01       	movw	r30, r14
    6d10:	93 fd       	sbrc	r25, 3
    6d12:	85 91       	lpm	r24, Z+
    6d14:	93 ff       	sbrs	r25, 3
    6d16:	81 91       	ld	r24, Z+
    6d18:	7f 01       	movw	r14, r30
    6d1a:	88 23       	and	r24, r24
    6d1c:	09 f4       	brne	.+2      	; 0x6d20 <vfprintf+0x3a>
    6d1e:	ba c1       	rjmp	.+884    	; 0x7094 <vfprintf+0x3ae>
    6d20:	85 32       	cpi	r24, 0x25	; 37
    6d22:	39 f4       	brne	.+14     	; 0x6d32 <vfprintf+0x4c>
    6d24:	93 fd       	sbrc	r25, 3
    6d26:	85 91       	lpm	r24, Z+
    6d28:	93 ff       	sbrs	r25, 3
    6d2a:	81 91       	ld	r24, Z+
    6d2c:	7f 01       	movw	r14, r30
    6d2e:	85 32       	cpi	r24, 0x25	; 37
    6d30:	29 f4       	brne	.+10     	; 0x6d3c <vfprintf+0x56>
    6d32:	b6 01       	movw	r22, r12
    6d34:	90 e0       	ldi	r25, 0x00	; 0
    6d36:	0e 94 6d 38 	call	0x70da	; 0x70da <fputc>
    6d3a:	e7 cf       	rjmp	.-50     	; 0x6d0a <vfprintf+0x24>
    6d3c:	91 2c       	mov	r9, r1
    6d3e:	21 2c       	mov	r2, r1
    6d40:	31 2c       	mov	r3, r1
    6d42:	ff e1       	ldi	r31, 0x1F	; 31
    6d44:	f3 15       	cp	r31, r3
    6d46:	d8 f0       	brcs	.+54     	; 0x6d7e <vfprintf+0x98>
    6d48:	8b 32       	cpi	r24, 0x2B	; 43
    6d4a:	79 f0       	breq	.+30     	; 0x6d6a <vfprintf+0x84>
    6d4c:	38 f4       	brcc	.+14     	; 0x6d5c <vfprintf+0x76>
    6d4e:	80 32       	cpi	r24, 0x20	; 32
    6d50:	79 f0       	breq	.+30     	; 0x6d70 <vfprintf+0x8a>
    6d52:	83 32       	cpi	r24, 0x23	; 35
    6d54:	a1 f4       	brne	.+40     	; 0x6d7e <vfprintf+0x98>
    6d56:	23 2d       	mov	r18, r3
    6d58:	20 61       	ori	r18, 0x10	; 16
    6d5a:	1d c0       	rjmp	.+58     	; 0x6d96 <vfprintf+0xb0>
    6d5c:	8d 32       	cpi	r24, 0x2D	; 45
    6d5e:	61 f0       	breq	.+24     	; 0x6d78 <vfprintf+0x92>
    6d60:	80 33       	cpi	r24, 0x30	; 48
    6d62:	69 f4       	brne	.+26     	; 0x6d7e <vfprintf+0x98>
    6d64:	23 2d       	mov	r18, r3
    6d66:	21 60       	ori	r18, 0x01	; 1
    6d68:	16 c0       	rjmp	.+44     	; 0x6d96 <vfprintf+0xb0>
    6d6a:	83 2d       	mov	r24, r3
    6d6c:	82 60       	ori	r24, 0x02	; 2
    6d6e:	38 2e       	mov	r3, r24
    6d70:	e3 2d       	mov	r30, r3
    6d72:	e4 60       	ori	r30, 0x04	; 4
    6d74:	3e 2e       	mov	r3, r30
    6d76:	2a c0       	rjmp	.+84     	; 0x6dcc <vfprintf+0xe6>
    6d78:	f3 2d       	mov	r31, r3
    6d7a:	f8 60       	ori	r31, 0x08	; 8
    6d7c:	1d c0       	rjmp	.+58     	; 0x6db8 <vfprintf+0xd2>
    6d7e:	37 fc       	sbrc	r3, 7
    6d80:	2d c0       	rjmp	.+90     	; 0x6ddc <vfprintf+0xf6>
    6d82:	20 ed       	ldi	r18, 0xD0	; 208
    6d84:	28 0f       	add	r18, r24
    6d86:	2a 30       	cpi	r18, 0x0A	; 10
    6d88:	40 f0       	brcs	.+16     	; 0x6d9a <vfprintf+0xb4>
    6d8a:	8e 32       	cpi	r24, 0x2E	; 46
    6d8c:	b9 f4       	brne	.+46     	; 0x6dbc <vfprintf+0xd6>
    6d8e:	36 fc       	sbrc	r3, 6
    6d90:	81 c1       	rjmp	.+770    	; 0x7094 <vfprintf+0x3ae>
    6d92:	23 2d       	mov	r18, r3
    6d94:	20 64       	ori	r18, 0x40	; 64
    6d96:	32 2e       	mov	r3, r18
    6d98:	19 c0       	rjmp	.+50     	; 0x6dcc <vfprintf+0xe6>
    6d9a:	36 fe       	sbrs	r3, 6
    6d9c:	06 c0       	rjmp	.+12     	; 0x6daa <vfprintf+0xc4>
    6d9e:	8a e0       	ldi	r24, 0x0A	; 10
    6da0:	98 9e       	mul	r9, r24
    6da2:	20 0d       	add	r18, r0
    6da4:	11 24       	eor	r1, r1
    6da6:	92 2e       	mov	r9, r18
    6da8:	11 c0       	rjmp	.+34     	; 0x6dcc <vfprintf+0xe6>
    6daa:	ea e0       	ldi	r30, 0x0A	; 10
    6dac:	2e 9e       	mul	r2, r30
    6dae:	20 0d       	add	r18, r0
    6db0:	11 24       	eor	r1, r1
    6db2:	22 2e       	mov	r2, r18
    6db4:	f3 2d       	mov	r31, r3
    6db6:	f0 62       	ori	r31, 0x20	; 32
    6db8:	3f 2e       	mov	r3, r31
    6dba:	08 c0       	rjmp	.+16     	; 0x6dcc <vfprintf+0xe6>
    6dbc:	8c 36       	cpi	r24, 0x6C	; 108
    6dbe:	21 f4       	brne	.+8      	; 0x6dc8 <vfprintf+0xe2>
    6dc0:	83 2d       	mov	r24, r3
    6dc2:	80 68       	ori	r24, 0x80	; 128
    6dc4:	38 2e       	mov	r3, r24
    6dc6:	02 c0       	rjmp	.+4      	; 0x6dcc <vfprintf+0xe6>
    6dc8:	88 36       	cpi	r24, 0x68	; 104
    6dca:	41 f4       	brne	.+16     	; 0x6ddc <vfprintf+0xf6>
    6dcc:	f7 01       	movw	r30, r14
    6dce:	93 fd       	sbrc	r25, 3
    6dd0:	85 91       	lpm	r24, Z+
    6dd2:	93 ff       	sbrs	r25, 3
    6dd4:	81 91       	ld	r24, Z+
    6dd6:	7f 01       	movw	r14, r30
    6dd8:	81 11       	cpse	r24, r1
    6dda:	b3 cf       	rjmp	.-154    	; 0x6d42 <vfprintf+0x5c>
    6ddc:	98 2f       	mov	r25, r24
    6dde:	9f 7d       	andi	r25, 0xDF	; 223
    6de0:	95 54       	subi	r25, 0x45	; 69
    6de2:	93 30       	cpi	r25, 0x03	; 3
    6de4:	28 f4       	brcc	.+10     	; 0x6df0 <vfprintf+0x10a>
    6de6:	0c 5f       	subi	r16, 0xFC	; 252
    6de8:	1f 4f       	sbci	r17, 0xFF	; 255
    6dea:	9f e3       	ldi	r25, 0x3F	; 63
    6dec:	99 83       	std	Y+1, r25	; 0x01
    6dee:	0d c0       	rjmp	.+26     	; 0x6e0a <vfprintf+0x124>
    6df0:	83 36       	cpi	r24, 0x63	; 99
    6df2:	31 f0       	breq	.+12     	; 0x6e00 <vfprintf+0x11a>
    6df4:	83 37       	cpi	r24, 0x73	; 115
    6df6:	71 f0       	breq	.+28     	; 0x6e14 <vfprintf+0x12e>
    6df8:	83 35       	cpi	r24, 0x53	; 83
    6dfa:	09 f0       	breq	.+2      	; 0x6dfe <vfprintf+0x118>
    6dfc:	59 c0       	rjmp	.+178    	; 0x6eb0 <vfprintf+0x1ca>
    6dfe:	21 c0       	rjmp	.+66     	; 0x6e42 <vfprintf+0x15c>
    6e00:	f8 01       	movw	r30, r16
    6e02:	80 81       	ld	r24, Z
    6e04:	89 83       	std	Y+1, r24	; 0x01
    6e06:	0e 5f       	subi	r16, 0xFE	; 254
    6e08:	1f 4f       	sbci	r17, 0xFF	; 255
    6e0a:	88 24       	eor	r8, r8
    6e0c:	83 94       	inc	r8
    6e0e:	91 2c       	mov	r9, r1
    6e10:	53 01       	movw	r10, r6
    6e12:	13 c0       	rjmp	.+38     	; 0x6e3a <vfprintf+0x154>
    6e14:	28 01       	movw	r4, r16
    6e16:	f2 e0       	ldi	r31, 0x02	; 2
    6e18:	4f 0e       	add	r4, r31
    6e1a:	51 1c       	adc	r5, r1
    6e1c:	f8 01       	movw	r30, r16
    6e1e:	a0 80       	ld	r10, Z
    6e20:	b1 80       	ldd	r11, Z+1	; 0x01
    6e22:	36 fe       	sbrs	r3, 6
    6e24:	03 c0       	rjmp	.+6      	; 0x6e2c <vfprintf+0x146>
    6e26:	69 2d       	mov	r22, r9
    6e28:	70 e0       	ldi	r23, 0x00	; 0
    6e2a:	02 c0       	rjmp	.+4      	; 0x6e30 <vfprintf+0x14a>
    6e2c:	6f ef       	ldi	r22, 0xFF	; 255
    6e2e:	7f ef       	ldi	r23, 0xFF	; 255
    6e30:	c5 01       	movw	r24, r10
    6e32:	0e 94 62 38 	call	0x70c4	; 0x70c4 <strnlen>
    6e36:	4c 01       	movw	r8, r24
    6e38:	82 01       	movw	r16, r4
    6e3a:	f3 2d       	mov	r31, r3
    6e3c:	ff 77       	andi	r31, 0x7F	; 127
    6e3e:	3f 2e       	mov	r3, r31
    6e40:	16 c0       	rjmp	.+44     	; 0x6e6e <vfprintf+0x188>
    6e42:	28 01       	movw	r4, r16
    6e44:	22 e0       	ldi	r18, 0x02	; 2
    6e46:	42 0e       	add	r4, r18
    6e48:	51 1c       	adc	r5, r1
    6e4a:	f8 01       	movw	r30, r16
    6e4c:	a0 80       	ld	r10, Z
    6e4e:	b1 80       	ldd	r11, Z+1	; 0x01
    6e50:	36 fe       	sbrs	r3, 6
    6e52:	03 c0       	rjmp	.+6      	; 0x6e5a <vfprintf+0x174>
    6e54:	69 2d       	mov	r22, r9
    6e56:	70 e0       	ldi	r23, 0x00	; 0
    6e58:	02 c0       	rjmp	.+4      	; 0x6e5e <vfprintf+0x178>
    6e5a:	6f ef       	ldi	r22, 0xFF	; 255
    6e5c:	7f ef       	ldi	r23, 0xFF	; 255
    6e5e:	c5 01       	movw	r24, r10
    6e60:	0e 94 57 38 	call	0x70ae	; 0x70ae <strnlen_P>
    6e64:	4c 01       	movw	r8, r24
    6e66:	f3 2d       	mov	r31, r3
    6e68:	f0 68       	ori	r31, 0x80	; 128
    6e6a:	3f 2e       	mov	r3, r31
    6e6c:	82 01       	movw	r16, r4
    6e6e:	33 fc       	sbrc	r3, 3
    6e70:	1b c0       	rjmp	.+54     	; 0x6ea8 <vfprintf+0x1c2>
    6e72:	82 2d       	mov	r24, r2
    6e74:	90 e0       	ldi	r25, 0x00	; 0
    6e76:	88 16       	cp	r8, r24
    6e78:	99 06       	cpc	r9, r25
    6e7a:	b0 f4       	brcc	.+44     	; 0x6ea8 <vfprintf+0x1c2>
    6e7c:	b6 01       	movw	r22, r12
    6e7e:	80 e2       	ldi	r24, 0x20	; 32
    6e80:	90 e0       	ldi	r25, 0x00	; 0
    6e82:	0e 94 6d 38 	call	0x70da	; 0x70da <fputc>
    6e86:	2a 94       	dec	r2
    6e88:	f4 cf       	rjmp	.-24     	; 0x6e72 <vfprintf+0x18c>
    6e8a:	f5 01       	movw	r30, r10
    6e8c:	37 fc       	sbrc	r3, 7
    6e8e:	85 91       	lpm	r24, Z+
    6e90:	37 fe       	sbrs	r3, 7
    6e92:	81 91       	ld	r24, Z+
    6e94:	5f 01       	movw	r10, r30
    6e96:	b6 01       	movw	r22, r12
    6e98:	90 e0       	ldi	r25, 0x00	; 0
    6e9a:	0e 94 6d 38 	call	0x70da	; 0x70da <fputc>
    6e9e:	21 10       	cpse	r2, r1
    6ea0:	2a 94       	dec	r2
    6ea2:	21 e0       	ldi	r18, 0x01	; 1
    6ea4:	82 1a       	sub	r8, r18
    6ea6:	91 08       	sbc	r9, r1
    6ea8:	81 14       	cp	r8, r1
    6eaa:	91 04       	cpc	r9, r1
    6eac:	71 f7       	brne	.-36     	; 0x6e8a <vfprintf+0x1a4>
    6eae:	e8 c0       	rjmp	.+464    	; 0x7080 <vfprintf+0x39a>
    6eb0:	84 36       	cpi	r24, 0x64	; 100
    6eb2:	11 f0       	breq	.+4      	; 0x6eb8 <vfprintf+0x1d2>
    6eb4:	89 36       	cpi	r24, 0x69	; 105
    6eb6:	41 f5       	brne	.+80     	; 0x6f08 <vfprintf+0x222>
    6eb8:	f8 01       	movw	r30, r16
    6eba:	37 fe       	sbrs	r3, 7
    6ebc:	07 c0       	rjmp	.+14     	; 0x6ecc <vfprintf+0x1e6>
    6ebe:	60 81       	ld	r22, Z
    6ec0:	71 81       	ldd	r23, Z+1	; 0x01
    6ec2:	82 81       	ldd	r24, Z+2	; 0x02
    6ec4:	93 81       	ldd	r25, Z+3	; 0x03
    6ec6:	0c 5f       	subi	r16, 0xFC	; 252
    6ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    6eca:	08 c0       	rjmp	.+16     	; 0x6edc <vfprintf+0x1f6>
    6ecc:	60 81       	ld	r22, Z
    6ece:	71 81       	ldd	r23, Z+1	; 0x01
    6ed0:	07 2e       	mov	r0, r23
    6ed2:	00 0c       	add	r0, r0
    6ed4:	88 0b       	sbc	r24, r24
    6ed6:	99 0b       	sbc	r25, r25
    6ed8:	0e 5f       	subi	r16, 0xFE	; 254
    6eda:	1f 4f       	sbci	r17, 0xFF	; 255
    6edc:	f3 2d       	mov	r31, r3
    6ede:	ff 76       	andi	r31, 0x6F	; 111
    6ee0:	3f 2e       	mov	r3, r31
    6ee2:	97 ff       	sbrs	r25, 7
    6ee4:	09 c0       	rjmp	.+18     	; 0x6ef8 <vfprintf+0x212>
    6ee6:	90 95       	com	r25
    6ee8:	80 95       	com	r24
    6eea:	70 95       	com	r23
    6eec:	61 95       	neg	r22
    6eee:	7f 4f       	sbci	r23, 0xFF	; 255
    6ef0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef4:	f0 68       	ori	r31, 0x80	; 128
    6ef6:	3f 2e       	mov	r3, r31
    6ef8:	2a e0       	ldi	r18, 0x0A	; 10
    6efa:	30 e0       	ldi	r19, 0x00	; 0
    6efc:	a3 01       	movw	r20, r6
    6efe:	0e 94 a9 38 	call	0x7152	; 0x7152 <__ultoa_invert>
    6f02:	88 2e       	mov	r8, r24
    6f04:	86 18       	sub	r8, r6
    6f06:	45 c0       	rjmp	.+138    	; 0x6f92 <vfprintf+0x2ac>
    6f08:	85 37       	cpi	r24, 0x75	; 117
    6f0a:	31 f4       	brne	.+12     	; 0x6f18 <vfprintf+0x232>
    6f0c:	23 2d       	mov	r18, r3
    6f0e:	2f 7e       	andi	r18, 0xEF	; 239
    6f10:	b2 2e       	mov	r11, r18
    6f12:	2a e0       	ldi	r18, 0x0A	; 10
    6f14:	30 e0       	ldi	r19, 0x00	; 0
    6f16:	25 c0       	rjmp	.+74     	; 0x6f62 <vfprintf+0x27c>
    6f18:	93 2d       	mov	r25, r3
    6f1a:	99 7f       	andi	r25, 0xF9	; 249
    6f1c:	b9 2e       	mov	r11, r25
    6f1e:	8f 36       	cpi	r24, 0x6F	; 111
    6f20:	c1 f0       	breq	.+48     	; 0x6f52 <vfprintf+0x26c>
    6f22:	18 f4       	brcc	.+6      	; 0x6f2a <vfprintf+0x244>
    6f24:	88 35       	cpi	r24, 0x58	; 88
    6f26:	79 f0       	breq	.+30     	; 0x6f46 <vfprintf+0x260>
    6f28:	b5 c0       	rjmp	.+362    	; 0x7094 <vfprintf+0x3ae>
    6f2a:	80 37       	cpi	r24, 0x70	; 112
    6f2c:	19 f0       	breq	.+6      	; 0x6f34 <vfprintf+0x24e>
    6f2e:	88 37       	cpi	r24, 0x78	; 120
    6f30:	21 f0       	breq	.+8      	; 0x6f3a <vfprintf+0x254>
    6f32:	b0 c0       	rjmp	.+352    	; 0x7094 <vfprintf+0x3ae>
    6f34:	e9 2f       	mov	r30, r25
    6f36:	e0 61       	ori	r30, 0x10	; 16
    6f38:	be 2e       	mov	r11, r30
    6f3a:	b4 fe       	sbrs	r11, 4
    6f3c:	0d c0       	rjmp	.+26     	; 0x6f58 <vfprintf+0x272>
    6f3e:	fb 2d       	mov	r31, r11
    6f40:	f4 60       	ori	r31, 0x04	; 4
    6f42:	bf 2e       	mov	r11, r31
    6f44:	09 c0       	rjmp	.+18     	; 0x6f58 <vfprintf+0x272>
    6f46:	34 fe       	sbrs	r3, 4
    6f48:	0a c0       	rjmp	.+20     	; 0x6f5e <vfprintf+0x278>
    6f4a:	29 2f       	mov	r18, r25
    6f4c:	26 60       	ori	r18, 0x06	; 6
    6f4e:	b2 2e       	mov	r11, r18
    6f50:	06 c0       	rjmp	.+12     	; 0x6f5e <vfprintf+0x278>
    6f52:	28 e0       	ldi	r18, 0x08	; 8
    6f54:	30 e0       	ldi	r19, 0x00	; 0
    6f56:	05 c0       	rjmp	.+10     	; 0x6f62 <vfprintf+0x27c>
    6f58:	20 e1       	ldi	r18, 0x10	; 16
    6f5a:	30 e0       	ldi	r19, 0x00	; 0
    6f5c:	02 c0       	rjmp	.+4      	; 0x6f62 <vfprintf+0x27c>
    6f5e:	20 e1       	ldi	r18, 0x10	; 16
    6f60:	32 e0       	ldi	r19, 0x02	; 2
    6f62:	f8 01       	movw	r30, r16
    6f64:	b7 fe       	sbrs	r11, 7
    6f66:	07 c0       	rjmp	.+14     	; 0x6f76 <vfprintf+0x290>
    6f68:	60 81       	ld	r22, Z
    6f6a:	71 81       	ldd	r23, Z+1	; 0x01
    6f6c:	82 81       	ldd	r24, Z+2	; 0x02
    6f6e:	93 81       	ldd	r25, Z+3	; 0x03
    6f70:	0c 5f       	subi	r16, 0xFC	; 252
    6f72:	1f 4f       	sbci	r17, 0xFF	; 255
    6f74:	06 c0       	rjmp	.+12     	; 0x6f82 <vfprintf+0x29c>
    6f76:	60 81       	ld	r22, Z
    6f78:	71 81       	ldd	r23, Z+1	; 0x01
    6f7a:	80 e0       	ldi	r24, 0x00	; 0
    6f7c:	90 e0       	ldi	r25, 0x00	; 0
    6f7e:	0e 5f       	subi	r16, 0xFE	; 254
    6f80:	1f 4f       	sbci	r17, 0xFF	; 255
    6f82:	a3 01       	movw	r20, r6
    6f84:	0e 94 a9 38 	call	0x7152	; 0x7152 <__ultoa_invert>
    6f88:	88 2e       	mov	r8, r24
    6f8a:	86 18       	sub	r8, r6
    6f8c:	fb 2d       	mov	r31, r11
    6f8e:	ff 77       	andi	r31, 0x7F	; 127
    6f90:	3f 2e       	mov	r3, r31
    6f92:	36 fe       	sbrs	r3, 6
    6f94:	0d c0       	rjmp	.+26     	; 0x6fb0 <vfprintf+0x2ca>
    6f96:	23 2d       	mov	r18, r3
    6f98:	2e 7f       	andi	r18, 0xFE	; 254
    6f9a:	a2 2e       	mov	r10, r18
    6f9c:	89 14       	cp	r8, r9
    6f9e:	58 f4       	brcc	.+22     	; 0x6fb6 <vfprintf+0x2d0>
    6fa0:	34 fe       	sbrs	r3, 4
    6fa2:	0b c0       	rjmp	.+22     	; 0x6fba <vfprintf+0x2d4>
    6fa4:	32 fc       	sbrc	r3, 2
    6fa6:	09 c0       	rjmp	.+18     	; 0x6fba <vfprintf+0x2d4>
    6fa8:	83 2d       	mov	r24, r3
    6faa:	8e 7e       	andi	r24, 0xEE	; 238
    6fac:	a8 2e       	mov	r10, r24
    6fae:	05 c0       	rjmp	.+10     	; 0x6fba <vfprintf+0x2d4>
    6fb0:	b8 2c       	mov	r11, r8
    6fb2:	a3 2c       	mov	r10, r3
    6fb4:	03 c0       	rjmp	.+6      	; 0x6fbc <vfprintf+0x2d6>
    6fb6:	b8 2c       	mov	r11, r8
    6fb8:	01 c0       	rjmp	.+2      	; 0x6fbc <vfprintf+0x2d6>
    6fba:	b9 2c       	mov	r11, r9
    6fbc:	a4 fe       	sbrs	r10, 4
    6fbe:	0f c0       	rjmp	.+30     	; 0x6fde <vfprintf+0x2f8>
    6fc0:	fe 01       	movw	r30, r28
    6fc2:	e8 0d       	add	r30, r8
    6fc4:	f1 1d       	adc	r31, r1
    6fc6:	80 81       	ld	r24, Z
    6fc8:	80 33       	cpi	r24, 0x30	; 48
    6fca:	21 f4       	brne	.+8      	; 0x6fd4 <vfprintf+0x2ee>
    6fcc:	9a 2d       	mov	r25, r10
    6fce:	99 7e       	andi	r25, 0xE9	; 233
    6fd0:	a9 2e       	mov	r10, r25
    6fd2:	09 c0       	rjmp	.+18     	; 0x6fe6 <vfprintf+0x300>
    6fd4:	a2 fe       	sbrs	r10, 2
    6fd6:	06 c0       	rjmp	.+12     	; 0x6fe4 <vfprintf+0x2fe>
    6fd8:	b3 94       	inc	r11
    6fda:	b3 94       	inc	r11
    6fdc:	04 c0       	rjmp	.+8      	; 0x6fe6 <vfprintf+0x300>
    6fde:	8a 2d       	mov	r24, r10
    6fe0:	86 78       	andi	r24, 0x86	; 134
    6fe2:	09 f0       	breq	.+2      	; 0x6fe6 <vfprintf+0x300>
    6fe4:	b3 94       	inc	r11
    6fe6:	a3 fc       	sbrc	r10, 3
    6fe8:	11 c0       	rjmp	.+34     	; 0x700c <vfprintf+0x326>
    6fea:	a0 fe       	sbrs	r10, 0
    6fec:	06 c0       	rjmp	.+12     	; 0x6ffa <vfprintf+0x314>
    6fee:	b2 14       	cp	r11, r2
    6ff0:	88 f4       	brcc	.+34     	; 0x7014 <vfprintf+0x32e>
    6ff2:	28 0c       	add	r2, r8
    6ff4:	92 2c       	mov	r9, r2
    6ff6:	9b 18       	sub	r9, r11
    6ff8:	0e c0       	rjmp	.+28     	; 0x7016 <vfprintf+0x330>
    6ffa:	b2 14       	cp	r11, r2
    6ffc:	60 f4       	brcc	.+24     	; 0x7016 <vfprintf+0x330>
    6ffe:	b6 01       	movw	r22, r12
    7000:	80 e2       	ldi	r24, 0x20	; 32
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	0e 94 6d 38 	call	0x70da	; 0x70da <fputc>
    7008:	b3 94       	inc	r11
    700a:	f7 cf       	rjmp	.-18     	; 0x6ffa <vfprintf+0x314>
    700c:	b2 14       	cp	r11, r2
    700e:	18 f4       	brcc	.+6      	; 0x7016 <vfprintf+0x330>
    7010:	2b 18       	sub	r2, r11
    7012:	02 c0       	rjmp	.+4      	; 0x7018 <vfprintf+0x332>
    7014:	98 2c       	mov	r9, r8
    7016:	21 2c       	mov	r2, r1
    7018:	a4 fe       	sbrs	r10, 4
    701a:	10 c0       	rjmp	.+32     	; 0x703c <vfprintf+0x356>
    701c:	b6 01       	movw	r22, r12
    701e:	80 e3       	ldi	r24, 0x30	; 48
    7020:	90 e0       	ldi	r25, 0x00	; 0
    7022:	0e 94 6d 38 	call	0x70da	; 0x70da <fputc>
    7026:	a2 fe       	sbrs	r10, 2
    7028:	17 c0       	rjmp	.+46     	; 0x7058 <vfprintf+0x372>
    702a:	a1 fc       	sbrc	r10, 1
    702c:	03 c0       	rjmp	.+6      	; 0x7034 <vfprintf+0x34e>
    702e:	88 e7       	ldi	r24, 0x78	; 120
    7030:	90 e0       	ldi	r25, 0x00	; 0
    7032:	02 c0       	rjmp	.+4      	; 0x7038 <vfprintf+0x352>
    7034:	88 e5       	ldi	r24, 0x58	; 88
    7036:	90 e0       	ldi	r25, 0x00	; 0
    7038:	b6 01       	movw	r22, r12
    703a:	0c c0       	rjmp	.+24     	; 0x7054 <vfprintf+0x36e>
    703c:	8a 2d       	mov	r24, r10
    703e:	86 78       	andi	r24, 0x86	; 134
    7040:	59 f0       	breq	.+22     	; 0x7058 <vfprintf+0x372>
    7042:	a1 fe       	sbrs	r10, 1
    7044:	02 c0       	rjmp	.+4      	; 0x704a <vfprintf+0x364>
    7046:	8b e2       	ldi	r24, 0x2B	; 43
    7048:	01 c0       	rjmp	.+2      	; 0x704c <vfprintf+0x366>
    704a:	80 e2       	ldi	r24, 0x20	; 32
    704c:	a7 fc       	sbrc	r10, 7
    704e:	8d e2       	ldi	r24, 0x2D	; 45
    7050:	b6 01       	movw	r22, r12
    7052:	90 e0       	ldi	r25, 0x00	; 0
    7054:	0e 94 6d 38 	call	0x70da	; 0x70da <fputc>
    7058:	89 14       	cp	r8, r9
    705a:	38 f4       	brcc	.+14     	; 0x706a <vfprintf+0x384>
    705c:	b6 01       	movw	r22, r12
    705e:	80 e3       	ldi	r24, 0x30	; 48
    7060:	90 e0       	ldi	r25, 0x00	; 0
    7062:	0e 94 6d 38 	call	0x70da	; 0x70da <fputc>
    7066:	9a 94       	dec	r9
    7068:	f7 cf       	rjmp	.-18     	; 0x7058 <vfprintf+0x372>
    706a:	8a 94       	dec	r8
    706c:	f3 01       	movw	r30, r6
    706e:	e8 0d       	add	r30, r8
    7070:	f1 1d       	adc	r31, r1
    7072:	80 81       	ld	r24, Z
    7074:	b6 01       	movw	r22, r12
    7076:	90 e0       	ldi	r25, 0x00	; 0
    7078:	0e 94 6d 38 	call	0x70da	; 0x70da <fputc>
    707c:	81 10       	cpse	r8, r1
    707e:	f5 cf       	rjmp	.-22     	; 0x706a <vfprintf+0x384>
    7080:	22 20       	and	r2, r2
    7082:	09 f4       	brne	.+2      	; 0x7086 <vfprintf+0x3a0>
    7084:	42 ce       	rjmp	.-892    	; 0x6d0a <vfprintf+0x24>
    7086:	b6 01       	movw	r22, r12
    7088:	80 e2       	ldi	r24, 0x20	; 32
    708a:	90 e0       	ldi	r25, 0x00	; 0
    708c:	0e 94 6d 38 	call	0x70da	; 0x70da <fputc>
    7090:	2a 94       	dec	r2
    7092:	f6 cf       	rjmp	.-20     	; 0x7080 <vfprintf+0x39a>
    7094:	f6 01       	movw	r30, r12
    7096:	86 81       	ldd	r24, Z+6	; 0x06
    7098:	97 81       	ldd	r25, Z+7	; 0x07
    709a:	02 c0       	rjmp	.+4      	; 0x70a0 <vfprintf+0x3ba>
    709c:	8f ef       	ldi	r24, 0xFF	; 255
    709e:	9f ef       	ldi	r25, 0xFF	; 255
    70a0:	2b 96       	adiw	r28, 0x0b	; 11
    70a2:	e2 e1       	ldi	r30, 0x12	; 18
    70a4:	0c 94 87 39 	jmp	0x730e	; 0x730e <__epilogue_restores__>

000070a8 <__ctype_isfalse>:
    70a8:	99 27       	eor	r25, r25
    70aa:	88 27       	eor	r24, r24

000070ac <__ctype_istrue>:
    70ac:	08 95       	ret

000070ae <strnlen_P>:
    70ae:	fc 01       	movw	r30, r24
    70b0:	05 90       	lpm	r0, Z+
    70b2:	61 50       	subi	r22, 0x01	; 1
    70b4:	70 40       	sbci	r23, 0x00	; 0
    70b6:	01 10       	cpse	r0, r1
    70b8:	d8 f7       	brcc	.-10     	; 0x70b0 <strnlen_P+0x2>
    70ba:	80 95       	com	r24
    70bc:	90 95       	com	r25
    70be:	8e 0f       	add	r24, r30
    70c0:	9f 1f       	adc	r25, r31
    70c2:	08 95       	ret

000070c4 <strnlen>:
    70c4:	fc 01       	movw	r30, r24
    70c6:	61 50       	subi	r22, 0x01	; 1
    70c8:	70 40       	sbci	r23, 0x00	; 0
    70ca:	01 90       	ld	r0, Z+
    70cc:	01 10       	cpse	r0, r1
    70ce:	d8 f7       	brcc	.-10     	; 0x70c6 <strnlen+0x2>
    70d0:	80 95       	com	r24
    70d2:	90 95       	com	r25
    70d4:	8e 0f       	add	r24, r30
    70d6:	9f 1f       	adc	r25, r31
    70d8:	08 95       	ret

000070da <fputc>:
    70da:	0f 93       	push	r16
    70dc:	1f 93       	push	r17
    70de:	cf 93       	push	r28
    70e0:	df 93       	push	r29
    70e2:	fb 01       	movw	r30, r22
    70e4:	23 81       	ldd	r18, Z+3	; 0x03
    70e6:	21 fd       	sbrc	r18, 1
    70e8:	03 c0       	rjmp	.+6      	; 0x70f0 <fputc+0x16>
    70ea:	8f ef       	ldi	r24, 0xFF	; 255
    70ec:	9f ef       	ldi	r25, 0xFF	; 255
    70ee:	2c c0       	rjmp	.+88     	; 0x7148 <fputc+0x6e>
    70f0:	22 ff       	sbrs	r18, 2
    70f2:	16 c0       	rjmp	.+44     	; 0x7120 <fputc+0x46>
    70f4:	46 81       	ldd	r20, Z+6	; 0x06
    70f6:	57 81       	ldd	r21, Z+7	; 0x07
    70f8:	24 81       	ldd	r18, Z+4	; 0x04
    70fa:	35 81       	ldd	r19, Z+5	; 0x05
    70fc:	42 17       	cp	r20, r18
    70fe:	53 07       	cpc	r21, r19
    7100:	44 f4       	brge	.+16     	; 0x7112 <fputc+0x38>
    7102:	a0 81       	ld	r26, Z
    7104:	b1 81       	ldd	r27, Z+1	; 0x01
    7106:	9d 01       	movw	r18, r26
    7108:	2f 5f       	subi	r18, 0xFF	; 255
    710a:	3f 4f       	sbci	r19, 0xFF	; 255
    710c:	31 83       	std	Z+1, r19	; 0x01
    710e:	20 83       	st	Z, r18
    7110:	8c 93       	st	X, r24
    7112:	26 81       	ldd	r18, Z+6	; 0x06
    7114:	37 81       	ldd	r19, Z+7	; 0x07
    7116:	2f 5f       	subi	r18, 0xFF	; 255
    7118:	3f 4f       	sbci	r19, 0xFF	; 255
    711a:	37 83       	std	Z+7, r19	; 0x07
    711c:	26 83       	std	Z+6, r18	; 0x06
    711e:	14 c0       	rjmp	.+40     	; 0x7148 <fputc+0x6e>
    7120:	8b 01       	movw	r16, r22
    7122:	ec 01       	movw	r28, r24
    7124:	fb 01       	movw	r30, r22
    7126:	00 84       	ldd	r0, Z+8	; 0x08
    7128:	f1 85       	ldd	r31, Z+9	; 0x09
    712a:	e0 2d       	mov	r30, r0
    712c:	09 95       	icall
    712e:	89 2b       	or	r24, r25
    7130:	e1 f6       	brne	.-72     	; 0x70ea <fputc+0x10>
    7132:	d8 01       	movw	r26, r16
    7134:	16 96       	adiw	r26, 0x06	; 6
    7136:	8d 91       	ld	r24, X+
    7138:	9c 91       	ld	r25, X
    713a:	17 97       	sbiw	r26, 0x07	; 7
    713c:	01 96       	adiw	r24, 0x01	; 1
    713e:	17 96       	adiw	r26, 0x07	; 7
    7140:	9c 93       	st	X, r25
    7142:	8e 93       	st	-X, r24
    7144:	16 97       	sbiw	r26, 0x06	; 6
    7146:	ce 01       	movw	r24, r28
    7148:	df 91       	pop	r29
    714a:	cf 91       	pop	r28
    714c:	1f 91       	pop	r17
    714e:	0f 91       	pop	r16
    7150:	08 95       	ret

00007152 <__ultoa_invert>:
    7152:	fa 01       	movw	r30, r20
    7154:	aa 27       	eor	r26, r26
    7156:	28 30       	cpi	r18, 0x08	; 8
    7158:	51 f1       	breq	.+84     	; 0x71ae <__ultoa_invert+0x5c>
    715a:	20 31       	cpi	r18, 0x10	; 16
    715c:	81 f1       	breq	.+96     	; 0x71be <__ultoa_invert+0x6c>
    715e:	e8 94       	clt
    7160:	6f 93       	push	r22
    7162:	6e 7f       	andi	r22, 0xFE	; 254
    7164:	6e 5f       	subi	r22, 0xFE	; 254
    7166:	7f 4f       	sbci	r23, 0xFF	; 255
    7168:	8f 4f       	sbci	r24, 0xFF	; 255
    716a:	9f 4f       	sbci	r25, 0xFF	; 255
    716c:	af 4f       	sbci	r26, 0xFF	; 255
    716e:	b1 e0       	ldi	r27, 0x01	; 1
    7170:	3e d0       	rcall	.+124    	; 0x71ee <__ultoa_invert+0x9c>
    7172:	b4 e0       	ldi	r27, 0x04	; 4
    7174:	3c d0       	rcall	.+120    	; 0x71ee <__ultoa_invert+0x9c>
    7176:	67 0f       	add	r22, r23
    7178:	78 1f       	adc	r23, r24
    717a:	89 1f       	adc	r24, r25
    717c:	9a 1f       	adc	r25, r26
    717e:	a1 1d       	adc	r26, r1
    7180:	68 0f       	add	r22, r24
    7182:	79 1f       	adc	r23, r25
    7184:	8a 1f       	adc	r24, r26
    7186:	91 1d       	adc	r25, r1
    7188:	a1 1d       	adc	r26, r1
    718a:	6a 0f       	add	r22, r26
    718c:	71 1d       	adc	r23, r1
    718e:	81 1d       	adc	r24, r1
    7190:	91 1d       	adc	r25, r1
    7192:	a1 1d       	adc	r26, r1
    7194:	20 d0       	rcall	.+64     	; 0x71d6 <__ultoa_invert+0x84>
    7196:	09 f4       	brne	.+2      	; 0x719a <__ultoa_invert+0x48>
    7198:	68 94       	set
    719a:	3f 91       	pop	r19
    719c:	2a e0       	ldi	r18, 0x0A	; 10
    719e:	26 9f       	mul	r18, r22
    71a0:	11 24       	eor	r1, r1
    71a2:	30 19       	sub	r19, r0
    71a4:	30 5d       	subi	r19, 0xD0	; 208
    71a6:	31 93       	st	Z+, r19
    71a8:	de f6       	brtc	.-74     	; 0x7160 <__ultoa_invert+0xe>
    71aa:	cf 01       	movw	r24, r30
    71ac:	08 95       	ret
    71ae:	46 2f       	mov	r20, r22
    71b0:	47 70       	andi	r20, 0x07	; 7
    71b2:	40 5d       	subi	r20, 0xD0	; 208
    71b4:	41 93       	st	Z+, r20
    71b6:	b3 e0       	ldi	r27, 0x03	; 3
    71b8:	0f d0       	rcall	.+30     	; 0x71d8 <__ultoa_invert+0x86>
    71ba:	c9 f7       	brne	.-14     	; 0x71ae <__ultoa_invert+0x5c>
    71bc:	f6 cf       	rjmp	.-20     	; 0x71aa <__ultoa_invert+0x58>
    71be:	46 2f       	mov	r20, r22
    71c0:	4f 70       	andi	r20, 0x0F	; 15
    71c2:	40 5d       	subi	r20, 0xD0	; 208
    71c4:	4a 33       	cpi	r20, 0x3A	; 58
    71c6:	18 f0       	brcs	.+6      	; 0x71ce <__ultoa_invert+0x7c>
    71c8:	49 5d       	subi	r20, 0xD9	; 217
    71ca:	31 fd       	sbrc	r19, 1
    71cc:	40 52       	subi	r20, 0x20	; 32
    71ce:	41 93       	st	Z+, r20
    71d0:	02 d0       	rcall	.+4      	; 0x71d6 <__ultoa_invert+0x84>
    71d2:	a9 f7       	brne	.-22     	; 0x71be <__ultoa_invert+0x6c>
    71d4:	ea cf       	rjmp	.-44     	; 0x71aa <__ultoa_invert+0x58>
    71d6:	b4 e0       	ldi	r27, 0x04	; 4
    71d8:	a6 95       	lsr	r26
    71da:	97 95       	ror	r25
    71dc:	87 95       	ror	r24
    71de:	77 95       	ror	r23
    71e0:	67 95       	ror	r22
    71e2:	ba 95       	dec	r27
    71e4:	c9 f7       	brne	.-14     	; 0x71d8 <__ultoa_invert+0x86>
    71e6:	00 97       	sbiw	r24, 0x00	; 0
    71e8:	61 05       	cpc	r22, r1
    71ea:	71 05       	cpc	r23, r1
    71ec:	08 95       	ret
    71ee:	9b 01       	movw	r18, r22
    71f0:	ac 01       	movw	r20, r24
    71f2:	0a 2e       	mov	r0, r26
    71f4:	06 94       	lsr	r0
    71f6:	57 95       	ror	r21
    71f8:	47 95       	ror	r20
    71fa:	37 95       	ror	r19
    71fc:	27 95       	ror	r18
    71fe:	ba 95       	dec	r27
    7200:	c9 f7       	brne	.-14     	; 0x71f4 <__ultoa_invert+0xa2>
    7202:	62 0f       	add	r22, r18
    7204:	73 1f       	adc	r23, r19
    7206:	84 1f       	adc	r24, r20
    7208:	95 1f       	adc	r25, r21
    720a:	a0 1d       	adc	r26, r0
    720c:	08 95       	ret

0000720e <__mulsi3>:
    720e:	db 01       	movw	r26, r22
    7210:	8f 93       	push	r24
    7212:	9f 93       	push	r25
    7214:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__muluhisi3>
    7218:	bf 91       	pop	r27
    721a:	af 91       	pop	r26
    721c:	a2 9f       	mul	r26, r18
    721e:	80 0d       	add	r24, r0
    7220:	91 1d       	adc	r25, r1
    7222:	a3 9f       	mul	r26, r19
    7224:	90 0d       	add	r25, r0
    7226:	b2 9f       	mul	r27, r18
    7228:	90 0d       	add	r25, r0
    722a:	11 24       	eor	r1, r1
    722c:	08 95       	ret

0000722e <__udivmodsi4>:
    722e:	a1 e2       	ldi	r26, 0x21	; 33
    7230:	1a 2e       	mov	r1, r26
    7232:	aa 1b       	sub	r26, r26
    7234:	bb 1b       	sub	r27, r27
    7236:	fd 01       	movw	r30, r26
    7238:	0d c0       	rjmp	.+26     	; 0x7254 <__udivmodsi4_ep>

0000723a <__udivmodsi4_loop>:
    723a:	aa 1f       	adc	r26, r26
    723c:	bb 1f       	adc	r27, r27
    723e:	ee 1f       	adc	r30, r30
    7240:	ff 1f       	adc	r31, r31
    7242:	a2 17       	cp	r26, r18
    7244:	b3 07       	cpc	r27, r19
    7246:	e4 07       	cpc	r30, r20
    7248:	f5 07       	cpc	r31, r21
    724a:	20 f0       	brcs	.+8      	; 0x7254 <__udivmodsi4_ep>
    724c:	a2 1b       	sub	r26, r18
    724e:	b3 0b       	sbc	r27, r19
    7250:	e4 0b       	sbc	r30, r20
    7252:	f5 0b       	sbc	r31, r21

00007254 <__udivmodsi4_ep>:
    7254:	66 1f       	adc	r22, r22
    7256:	77 1f       	adc	r23, r23
    7258:	88 1f       	adc	r24, r24
    725a:	99 1f       	adc	r25, r25
    725c:	1a 94       	dec	r1
    725e:	69 f7       	brne	.-38     	; 0x723a <__udivmodsi4_loop>
    7260:	60 95       	com	r22
    7262:	70 95       	com	r23
    7264:	80 95       	com	r24
    7266:	90 95       	com	r25
    7268:	9b 01       	movw	r18, r22
    726a:	ac 01       	movw	r20, r24
    726c:	bd 01       	movw	r22, r26
    726e:	cf 01       	movw	r24, r30
    7270:	08 95       	ret

00007272 <__divmodsi4>:
    7272:	05 2e       	mov	r0, r21
    7274:	97 fb       	bst	r25, 7
    7276:	1e f4       	brtc	.+6      	; 0x727e <__divmodsi4+0xc>
    7278:	00 94       	com	r0
    727a:	0e 94 50 39 	call	0x72a0	; 0x72a0 <__negsi2>
    727e:	57 fd       	sbrc	r21, 7
    7280:	07 d0       	rcall	.+14     	; 0x7290 <__divmodsi4_neg2>
    7282:	0e 94 17 39 	call	0x722e	; 0x722e <__udivmodsi4>
    7286:	07 fc       	sbrc	r0, 7
    7288:	03 d0       	rcall	.+6      	; 0x7290 <__divmodsi4_neg2>
    728a:	4e f4       	brtc	.+18     	; 0x729e <__divmodsi4_exit>
    728c:	0c 94 50 39 	jmp	0x72a0	; 0x72a0 <__negsi2>

00007290 <__divmodsi4_neg2>:
    7290:	50 95       	com	r21
    7292:	40 95       	com	r20
    7294:	30 95       	com	r19
    7296:	21 95       	neg	r18
    7298:	3f 4f       	sbci	r19, 0xFF	; 255
    729a:	4f 4f       	sbci	r20, 0xFF	; 255
    729c:	5f 4f       	sbci	r21, 0xFF	; 255

0000729e <__divmodsi4_exit>:
    729e:	08 95       	ret

000072a0 <__negsi2>:
    72a0:	90 95       	com	r25
    72a2:	80 95       	com	r24
    72a4:	70 95       	com	r23
    72a6:	61 95       	neg	r22
    72a8:	7f 4f       	sbci	r23, 0xFF	; 255
    72aa:	8f 4f       	sbci	r24, 0xFF	; 255
    72ac:	9f 4f       	sbci	r25, 0xFF	; 255
    72ae:	08 95       	ret

000072b0 <__muluhisi3>:
    72b0:	0e 94 a2 39 	call	0x7344	; 0x7344 <__umulhisi3>
    72b4:	a5 9f       	mul	r26, r21
    72b6:	90 0d       	add	r25, r0
    72b8:	b4 9f       	mul	r27, r20
    72ba:	90 0d       	add	r25, r0
    72bc:	a4 9f       	mul	r26, r20
    72be:	80 0d       	add	r24, r0
    72c0:	91 1d       	adc	r25, r1
    72c2:	11 24       	eor	r1, r1
    72c4:	08 95       	ret

000072c6 <__mulshisi3>:
    72c6:	b7 ff       	sbrs	r27, 7
    72c8:	0c 94 58 39 	jmp	0x72b0	; 0x72b0 <__muluhisi3>

000072cc <__mulohisi3>:
    72cc:	0e 94 58 39 	call	0x72b0	; 0x72b0 <__muluhisi3>
    72d0:	82 1b       	sub	r24, r18
    72d2:	93 0b       	sbc	r25, r19
    72d4:	08 95       	ret

000072d6 <__prologue_saves__>:
    72d6:	2f 92       	push	r2
    72d8:	3f 92       	push	r3
    72da:	4f 92       	push	r4
    72dc:	5f 92       	push	r5
    72de:	6f 92       	push	r6
    72e0:	7f 92       	push	r7
    72e2:	8f 92       	push	r8
    72e4:	9f 92       	push	r9
    72e6:	af 92       	push	r10
    72e8:	bf 92       	push	r11
    72ea:	cf 92       	push	r12
    72ec:	df 92       	push	r13
    72ee:	ef 92       	push	r14
    72f0:	ff 92       	push	r15
    72f2:	0f 93       	push	r16
    72f4:	1f 93       	push	r17
    72f6:	cf 93       	push	r28
    72f8:	df 93       	push	r29
    72fa:	cd b7       	in	r28, 0x3d	; 61
    72fc:	de b7       	in	r29, 0x3e	; 62
    72fe:	ca 1b       	sub	r28, r26
    7300:	db 0b       	sbc	r29, r27
    7302:	0f b6       	in	r0, 0x3f	; 63
    7304:	f8 94       	cli
    7306:	de bf       	out	0x3e, r29	; 62
    7308:	0f be       	out	0x3f, r0	; 63
    730a:	cd bf       	out	0x3d, r28	; 61
    730c:	09 94       	ijmp

0000730e <__epilogue_restores__>:
    730e:	2a 88       	ldd	r2, Y+18	; 0x12
    7310:	39 88       	ldd	r3, Y+17	; 0x11
    7312:	48 88       	ldd	r4, Y+16	; 0x10
    7314:	5f 84       	ldd	r5, Y+15	; 0x0f
    7316:	6e 84       	ldd	r6, Y+14	; 0x0e
    7318:	7d 84       	ldd	r7, Y+13	; 0x0d
    731a:	8c 84       	ldd	r8, Y+12	; 0x0c
    731c:	9b 84       	ldd	r9, Y+11	; 0x0b
    731e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7320:	b9 84       	ldd	r11, Y+9	; 0x09
    7322:	c8 84       	ldd	r12, Y+8	; 0x08
    7324:	df 80       	ldd	r13, Y+7	; 0x07
    7326:	ee 80       	ldd	r14, Y+6	; 0x06
    7328:	fd 80       	ldd	r15, Y+5	; 0x05
    732a:	0c 81       	ldd	r16, Y+4	; 0x04
    732c:	1b 81       	ldd	r17, Y+3	; 0x03
    732e:	aa 81       	ldd	r26, Y+2	; 0x02
    7330:	b9 81       	ldd	r27, Y+1	; 0x01
    7332:	ce 0f       	add	r28, r30
    7334:	d1 1d       	adc	r29, r1
    7336:	0f b6       	in	r0, 0x3f	; 63
    7338:	f8 94       	cli
    733a:	de bf       	out	0x3e, r29	; 62
    733c:	0f be       	out	0x3f, r0	; 63
    733e:	cd bf       	out	0x3d, r28	; 61
    7340:	ed 01       	movw	r28, r26
    7342:	08 95       	ret

00007344 <__umulhisi3>:
    7344:	a2 9f       	mul	r26, r18
    7346:	b0 01       	movw	r22, r0
    7348:	b3 9f       	mul	r27, r19
    734a:	c0 01       	movw	r24, r0
    734c:	a3 9f       	mul	r26, r19
    734e:	70 0d       	add	r23, r0
    7350:	81 1d       	adc	r24, r1
    7352:	11 24       	eor	r1, r1
    7354:	91 1d       	adc	r25, r1
    7356:	b2 9f       	mul	r27, r18
    7358:	70 0d       	add	r23, r0
    735a:	81 1d       	adc	r24, r1
    735c:	11 24       	eor	r1, r1
    735e:	91 1d       	adc	r25, r1
    7360:	08 95       	ret

00007362 <_exit>:
    7362:	f8 94       	cli

00007364 <__stop_program>:
    7364:	ff cf       	rjmp	.-2      	; 0x7364 <__stop_program>
